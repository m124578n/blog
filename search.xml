<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>開發日文五十音練習網站</title>
      <link href="/2024-03-14%E9%96%8B%E7%99%BC%E6%97%A5%E6%96%87%E4%BA%94%E5%8D%81%E9%9F%B3%E7%B7%B4%E7%BF%92%E7%B6%B2%E7%AB%99/"/>
      <url>/2024-03-14%E9%96%8B%E7%99%BC%E6%97%A5%E6%96%87%E4%BA%94%E5%8D%81%E9%9F%B3%E7%B7%B4%E7%BF%92%E7%B6%B2%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-03-14%E9%96%8B%E7%99%BC%E6%97%A5%E6%96%87%E4%BA%94%E5%8D%81%E9%9F%B3%E7%B7%B4%E7%BF%92%E7%B6%B2%E7%AB%99/1_YuIpjHE0PKu8x0UpgikWGw.webp"></p><p>連結在此 : <a href="https://japanese-practice.fly.dev/">五十音練習網站</a><br>目前部署在 <a href="https://fly.io/">fly.io</a> 上</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>友人說最近想學學日文目前稍微知道幾個單字都聽得懂會說但就是看不懂不知道日文五十音，於是乎我就想說做一個可以練習的網站讓他玩玩認識認識日本的五十音～</p><h1 id="規劃"><a href="#規劃" class="headerlink" title="規劃"></a>規劃</h1><p>既然都要開發了內容大概就是簡單的打字練習，知道每個日文字是怎麼發音或怎麼用羅馬拼音打出來，後面還想接Google api去把每個日文字怎麼念給播放出來（還沒做），越想越多越想越複雜，此時覺得不要想那麼多了先做個初版出來，而開發部分就想說平常都用Django，不然就來練習Flask吧！</p><h1 id="開發"><a href="#開發" class="headerlink" title="開發"></a>開發</h1><p>花了1, 2個小時的時間摸索Flask兼開發弄了個初版，初版只有練習區沒有計時賽，自己一個寫寫寫測測測～摁～都沒什麼毛病，然後再花一點時間部署到fly.io，丟給朋友玩玩</p><p>我：AA~我弄了一個可以練習五十音的你玩玩～<br>友：好喔，感謝！<br>１分鐘後<br>友：ㄟ你那個有問題，我明明答對卻說我是錯的<br>我：讓我來看看</p><p>馬上就收到回饋說我明明打對他卻說我錯的！！摁～趕緊檢查發現程式bug，現階段沒用DB去存都讀取同一個物件，所以有兩個人使用就會出問題XDD，而這時開發到一半的時候就打算加計時的部分，外加紀錄練習過的字，所以話不多說趕緊弄個簡單的DB吧～DB就用SQLite3方便就好，Flask-SQLAlchemy，Flask-Migrate弄一弄發現最新版跟網路上查到的資料有些出入document看一看，寫寫寫到fly.io部署的時候</p><pre><code class="hljs bash">ModuleNotFoundError: No module named <span class="hljs-string">&#x27;_sqlite3&#x27;</span> on a Python Flask application</code></pre><p>挖哩fly.io部署都交給他了跳出這個，趕緊Google找解法，幸虧這問題很常見很快就有解答</p><p><a href="https://community.fly.io/t/modulenotfounderror-no-module-named-sqlite3-on-a-python-flask-application/9487">ModuleNotFoundError: No module named ‘_sqlite3’ on a Python Flask application</a></p><p>解完成功部署後再丟一次連結給友人</p><p>我：AA，改好了你再試試<br>友：好<br>１分鐘後<br>友：你這個跳錯誤訊息耶，我看不懂<br>我：！！，我瞧瞧</p><p>不出意外馬上就要出意外了，抱錯500，去看fly.io後台給的log這時我才發現怎麼有兩台machine在run我不是只起一個app嗎？趕緊再去求助Google大神，很快就發現fly.io為了要維持高可用HA的關係預設會啟用兩台機器，我SQLite3目前還沒有移出來都跟著Flask這樣整包跑難怪會出問題，但目前我也不打算移出來把資料另外放，fly.io也有mount的功能，不過我目前最主要的需求是讓他正常運作，於是乎我把fly.io原始HA的設定弄掉改成一台就好，fly deploy完後丟給友人</p><p>我：AA，這次穩了你玩玩<br>友：好<br>１分鐘後<br>友：可以了可以了水喔<br>我：讚，再來開發計時賽再加個排行榜<br>友：排名有獎品喔？<br>我：當然沒有ＸＤＤ</p><p>到這邊終於把初版弄完了，而計時賽跟排行榜的開發就沒什麼問題很順利的寫完～</p><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>Flask一開始是只有一個app.py，後面也把他拆開來寫成flask factory的樣子，不然一個app後續要修改還新增寫到一半就感受到了，過程中當然就是Google＋ChatGPT，雙重導師下開發其實沒什麼難度，想清楚再做就OK了，未來還有想要串前面提到的Google api TTS可以把文字變成語音，然後串ChatGPT api弄自動生成日文文章練習打字，當然目前想都可以想，做好也不知道什麼時候了～而且這樣串不知道會收多少$$</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滲透測試 vs 弱點掃描</title>
      <link href="/2024-02-29%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6vs%E5%BC%B1%E9%BB%9E%E6%8E%83%E6%8F%8F/"/>
      <url>/2024-02-29%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6vs%E5%BC%B1%E9%BB%9E%E6%8E%83%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-02-29%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6vs%E5%BC%B1%E9%BB%9E%E6%8E%83%E6%8F%8F/0_xVsJWzST9ZMlD3ND.webp"></p><p>菜鳥工程師看資安，公司每年都會進行弱點掃描，而去年有考慮執行滲透測試，在好奇心的驅使下我也跟著聽了幾間廠商介紹，從而初淺的了解了一些資安相關的知識～而這兩者有甚麼差別呢，google看了一些文章後用自己的話講講看。</p><h1 id="弱點掃描"><a href="#弱點掃描" class="headerlink" title="弱點掃描"></a>弱點掃描</h1><p>弱點掃描通常是利用現成工具，針對IP或domain依照現成工具的規則下去檢測APP有哪些疑似漏洞或風險比較高的錯誤。</p><p>很常見的風險都是程式或伺服器版本過低，一些軟體版本過低往往容易造成已存在&#x2F;已揭漏的bug沒有補丁更新從而導致被攻擊，所以弱掃完後通常會依據報告中顯示的風險進行更新或補強，然後再進行第二次掃描確認第一次報告中的風險已不存在。</p><p>其中好像還有細分很多種，原始碼掃描，網站掃描，伺服器系統掃描等等。</p><p>而價格則會相對地比較便宜，因為所需的人力成本比較低，都是由現成自動化工具下去掃描比較多的樣子。</p><h1 id="滲透測試"><a href="#滲透測試" class="headerlink" title="滲透測試"></a>滲透測試</h1><p>滲透測試就比較有趣了，是一種模仿駭客思維去針對目標攻擊。</p><p>現在server，app百百種，滲透就很難依靠一種工具去執行，所以都是由滲透工程師自己本人的經驗進行滲透攻擊，而有經驗有能力的工程師所產生的費用當然就比較高，且工程師人力有限，為一家企業進行滲透測試光想像就覺得要花費的時間成本也不低，固然價格相對高。</p><p>然而滲透工程師需要經驗才有辦法成長，但又不可能亂打其他人的網站，還可能害自己犯法，就挺好奇在成為專業的滲透工程師之前是怎麼度過的。</p><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>其實我小時候就對駭客就有一種嚮往，可以在網路的世界自由穿梭又有點在灰色地帶活動，感覺非常有趣，當然不排除電視電影過度美化影響和小男孩天真的想法 XD，不過從簡單的了解滲透和弱掃就可以知道成為駭客所需要的知識量是非常大量和堅實的，且還需要具有柔軟和跳躍的思維，更需要了解人的天性，才能構思出完整的攻擊手法和防禦手段。</p><p>而資安還有很多關鍵字可以搜尋，OWASP，CVE，CWE，CTF等等</p>]]></content>
      
      
      <categories>
          
          <category> 資安 </category>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django顯示所有T-SQL的方法</title>
      <link href="/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/0_bc8v9wzbg2U72OHV.webp"></p><p>寫django的人應該或多或少都會使用ORM，而當ORM用太多怕忘記怎麼寫SQL或是想要優化無從下手，就該讓ORM幫我們組成的SQL現形啦！</p><p>可以使用以下方式</p><ul><li>logging</li><li>django-debug-toolbar</li><li>connection</li></ul><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>先準備一個model Person</p><pre><code class="hljs py"><span class="hljs-comment"># models.py</span><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(models.Model):    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sex</span>(models.IntegerChoices):        MALE = <span class="hljs-number">0</span>        FEMALE = <span class="hljs-number">1</span>        OTHERS = <span class="hljs-number">2</span>    name = models.CharField(max_length=<span class="hljs-number">255</span>)    sex = models.IntegerField(choices=Sex.choices)    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        db_table = <span class="hljs-string">&quot;person&quot;</span></code></pre><p>然後註冊進admin page</p><pre><code class="hljs py"><span class="hljs-comment"># admin.py</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person<span class="hljs-comment"># Register your models here.</span>admin.site.register(Person)</code></pre><p>之後下</p><ul><li><p><code>python manage.py makemigrations</code></p></li><li><p><code>python manage.py migrate</code></p></li><li><p><code>python manage.py createsuperuser</code></p></li><li><p><code>python manage.py runserver</code></p></li></ul><p>到 http:127.0.0.1:8000&#x2F;admin，輸入剛剛createsuperuser輸入的帳號密碼就可以看到下圖<br><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/1_7m4MwVZGEJXhDpZzokVwHg.webp"></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>顯示SQL的時刻到了，只需要在settings.py中新增這些</p><pre><code class="hljs py">LOGGING = &#123;    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,    <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;        <span class="hljs-string">&#x27;simple&#x27;</span>: &#123;            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[&#123;levelname&#125;] [&#123;asctime&#125;] &#123;message&#125;&#x27;</span>,            <span class="hljs-string">&#x27;style&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>        &#125;,    &#125;,    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;        <span class="hljs-string">&#x27;console&#x27;</span>:&#123;            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,            <span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;simple&#x27;</span>,        &#125;,    &#125;,    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;        <span class="hljs-string">&#x27;django.db.backends&#x27;</span>: &#123;            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>],            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,        &#125;,    &#125;&#125;</code></pre><ul><li>formatters 是在format顯現的格式</li><li>handlers 是指定處理器</li><li>loggers 是選擇要記錄log的範圍</li></ul><p>接著到admin page新增user，就能在很亂的console中獲得剛剛新增的SQL<br><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/1_x0cgOa5kNVSDwB446tNuDw.webp"></p><h2 id="django-debug-toolbar"><a href="#django-debug-toolbar" class="headerlink" title="django-debug-toolbar"></a>django-debug-toolbar</h2><p>接著是更方便查閱的套件 debug-toolbar</p><p><code>pip install django-debug-toolbar</code></p><p>安裝完後在settings.py中插入這些</p><pre><code class="hljs py">INSTALLED_APPS = [    <span class="hljs-comment"># ....</span>    <span class="hljs-string">&#x27;debug_toolbar&#x27;</span>,]<span class="hljs-keyword">if</span> DEBUG:    MIDDLEWARE.insert(<span class="hljs-number">0</span>,  <span class="hljs-string">&#x27;debug_toolbar.middleware.DebugToolbarMiddleware&#x27;</span>)INTERNAL_IPS = [    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,]</code></pre><p>並且在urls.py中加入</p><pre><code class="hljs py"><span class="hljs-keyword">if</span> DEBUG:    <span class="hljs-keyword">import</span> debug_toolbar    urlpatterns += [path(<span class="hljs-string">&#x27;__debug__/&#x27;</span>, include(debug_toolbar.urls))]</code></pre><p>回到admin page就能看到toolbar囉<br><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/1_PfznRk7i7ZV42l9Pq76bOw.webp"></p><p>而debug toolbar當今天views是回傳JsonResponse的話不會觸發，畢竟他會需要render出toolbar頁面</p><h2 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h2><p>直接在目標view插入connection</p><pre><code class="hljs py"><span class="hljs-comment"># views.py</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">request</span>):    context = &#123;&#125;    persons = Person.objects.<span class="hljs-built_in">all</span>()    context[<span class="hljs-string">&#x27;persons&#x27;</span>] = <span class="hljs-built_in">list</span>(persons.values())    <span class="hljs-built_in">print</span>(connection.queries)    <span class="hljs-built_in">print</span>(persons.query)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>, context)</code></pre><ul><li><p>connection.queries 會顯示執行過的SQL語句</p></li><li><p>persons.query 則是顯示當前ORM的SQL（僅限select）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> django orm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF練習-客製化User</title>
      <link href="/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/"/>
      <url>/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/0_WJlWpRWfueF3fiXG.webp"></p><p>上次我們的model已經繼承了AbstractUser，那麼接下來就是要爭對我們客製化的model進行細部的調整了～</p><p>先打個預防針，我接下來的code並不那麼restful，目前是當練習可能能有更好的寫法，我發現了在來修改吧！</p><p>我們的model基本上就固定那樣子了，會更動的是serializers和views，因為我們會需要客製化新建會員和修改會員密碼這兩項，所以呢serializers需要三個</p><ul><li>AccountSerializer 檢視用的</li><li>AccountCreateSerializer 新建用的</li><li>ChangePasswordSerializer 改密碼用的</li></ul><h2 id="AccountSerializer"><a href="#AccountSerializer" class="headerlink" title="AccountSerializer"></a>AccountSerializer</h2><p>基本上跟上次一樣沒變</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountSerializer</span>(serializers.HyperlinkedModelSerializer):    sex = serializers.SerializerMethodField()    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Account        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;is_staff&quot;</span>]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sex</span>(<span class="hljs-params">self, obj</span>):        <span class="hljs-keyword">return</span> obj.get_sex_display()</code></pre><h2 id="AccountCreateSerializer"><a href="#AccountCreateSerializer" class="headerlink" title="AccountCreateSerializer"></a>AccountCreateSerializer</h2><p>會需要去修改create這個function</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountCreateSerializer</span>(serializers.HyperlinkedModelSerializer):    password = serializers.CharField(write_only=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, validated_data</span>):        user = Account.objects.create_user(                username=validated_data[<span class="hljs-string">&#x27;username&#x27;</span>],                password=validated_data[<span class="hljs-string">&#x27;password&#x27;</span>],                sex=validated_data[<span class="hljs-string">&#x27;sex&#x27;</span>],                email=validated_data[<span class="hljs-string">&#x27;email&#x27;</span>],                phone=validated_data[<span class="hljs-string">&#x27;phone&#x27;</span>],                address=validated_data[<span class="hljs-string">&#x27;address&#x27;</span>],                is_superuser=validated_data[<span class="hljs-string">&#x27;is_superuser&#x27;</span>],                is_staff=validated_data[<span class="hljs-string">&#x27;is_staff&#x27;</span>],            )        <span class="hljs-keyword">return</span> user    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Account        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;is_staff&quot;</span>]</code></pre><p>複寫的create原本是在ModelSerializer中的function，原始的create會根據Meta中的model去處理</p><h2 id="ChangePasswordSerializer"><a href="#ChangePasswordSerializer" class="headerlink" title="ChangePasswordSerializer"></a>ChangePasswordSerializer</h2><p>這邊就是定義修改密碼需要的欄位和驗證</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangePasswordSerializer</span>(serializers.Serializer):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Serializer for password change endpoint.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    old_password = serializers.CharField(max_length=<span class="hljs-number">128</span>, write_only=<span class="hljs-literal">True</span>, required=<span class="hljs-literal">True</span>)    new_password1 = serializers.CharField(max_length=<span class="hljs-number">128</span>, write_only=<span class="hljs-literal">True</span>, required=<span class="hljs-literal">True</span>)    new_password2 = serializers.CharField(max_length=<span class="hljs-number">128</span>, write_only=<span class="hljs-literal">True</span>, required=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_old_password</span>(<span class="hljs-params">self, value</span>):        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        rest_framework serializers.py 480line explain that how validate_method works</span><span class="hljs-string">        &quot;&quot;&quot;</span>        user = self.context[<span class="hljs-string">&#x27;request&#x27;</span>].user        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user.check_password(value):            <span class="hljs-keyword">raise</span> serializers.ValidationError(                _(<span class="hljs-string">&#x27;Your old password was entered incorrectly. Please enter it again.&#x27;</span>)            )        <span class="hljs-keyword">return</span> value    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, data</span>):        <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;new_password1&#x27;</span>] != data[<span class="hljs-string">&#x27;new_password2&#x27;</span>]:            <span class="hljs-keyword">raise</span> serializers.ValidationError(&#123;<span class="hljs-string">&#x27;new_password2&#x27;</span>: _(<span class="hljs-string">&quot;The two password fields didn&#x27;t match.&quot;</span>)&#125;)        <span class="hljs-comment"># password_validation.validate_password(data[&#x27;new_password1&#x27;], self.context[&#x27;request&#x27;].user)</span>        <span class="hljs-keyword">return</span> data    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">self, **kwargs</span>):        password = self.validated_data[<span class="hljs-string">&#x27;new_password1&#x27;</span>]        user = self.context[<span class="hljs-string">&#x27;request&#x27;</span>].user        user.set_password(password)        user.save()        <span class="hljs-keyword">return</span> user</code></pre><p>這邊DRF的validate我覺得挺新奇的可以根據function name自行去驗證該欄位的寫法，像是上面的validate_old_password和validate就會在save之前被呼叫到，雖然很方便但需要花一點時間去理解他是怎麼實作的，不然都不知道自己用了什麼感覺不優</p><p>有了這三個serializer後就能寫view囉</p><h2 id="AccountView"><a href="#AccountView" class="headerlink" title="AccountView"></a>AccountView</h2><p>首先我們先把原本的AccountView中的create擋住</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountsView</span>(viewsets.ModelViewSet):    queryset = Account.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;id&quot;</span>)    serializer_class = AccountSerializer    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, request</span>):        <span class="hljs-keyword">return</span> Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)</code></pre><h2 id="CreateAccountView"><a href="#CreateAccountView" class="headerlink" title="CreateAccountView"></a>CreateAccountView</h2><p>我們在這邊自定一個新建會員的view</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateAccountView</span>(<span class="hljs-title class_ inherited__">CreateAPIView</span>):    model = Account    serializer_class = AccountCreateSerializer</code></pre><p>而這邊的CreateAPIView是因為我只需要post這個method</p><h2 id="ChangePasswordView"><a href="#ChangePasswordView" class="headerlink" title="ChangePasswordView"></a>ChangePasswordView</h2><p>修改密碼的部分</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangePasswordView</span>(<span class="hljs-title class_ inherited__">UpdateAPIView</span>):    serializer_class = ChangePasswordSerializer    permission_classes = (permissions.IsAuthenticated,)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):        serializer = self.get_serializer(data=request.data)        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)        user = serializer.save()        <span class="hljs-comment"># if using drf authtoken, create a new token </span>        <span class="hljs-comment"># if hasattr(user, &#x27;auth_token&#x27;):</span>        <span class="hljs-comment">#     user.auth_token.delete()</span>        <span class="hljs-comment"># token, created = Token.objects.get_or_create(user=user)</span>        <span class="hljs-comment"># return new token</span>        <span class="hljs-comment"># TODO remove token or create new token with JWT</span>        logout(request)        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;change password successful&#x27;</span>&#125;, status=status.HTTP_200_OK)</code></pre><p>因為目前token還沒接上所以改完密碼登出先用簡單的django提供的logout funtion，就像前面一樣我們這邊只會修改的步驟所以只需要put 和 patch的method</p><p>最後就是urls</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> account <span class="hljs-keyword">import</span> views<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routersrouter = routers.DefaultRouter()router.register(<span class="hljs-string">r&#x27;&#x27;</span>, views.AccountsView)urlpatterns = [    path(<span class="hljs-string">&#x27;register/&#x27;</span>, views.CreateAccountView.as_view()),    path(<span class="hljs-string">&#x27;logout/&#x27;</span>, views.LogoutView.as_view()),    path(<span class="hljs-string">&#x27;update_password/&#x27;</span>, views.ChangePasswordView.as_view()),]urlpatterns += router.urls</code></pre><p>這樣就大功告成啦！！</p><p>不過改密碼那邊必須要先登入才能修改（這不是廢話嗎XD<br>所以我們再加上permission</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangePasswordView</span>(<span class="hljs-title class_ inherited__">UpdateAPIView</span>):    serializer_class = ChangePasswordSerializer    permission_classes = (permissions.IsAuthenticated,) <span class="hljs-comment"># 這個</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):        serializer = self.get_serializer(data=request.data)        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)        user = serializer.save()        <span class="hljs-comment"># if using drf authtoken, create a new token </span>        <span class="hljs-comment"># if hasattr(user, &#x27;auth_token&#x27;):</span>        <span class="hljs-comment">#     user.auth_token.delete()</span>        <span class="hljs-comment"># token, created = Token.objects.get_or_create(user=user)</span>        <span class="hljs-comment"># return new token</span>        <span class="hljs-comment"># TODO remove token or create new token with JWT</span>        logout(request)        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;change password successful&#x27;</span>&#125;, status=status.HTTP_200_OK)</code></pre><p>這樣就完成了客製化的新建會員和修改密碼了～</p><p>最後如果有什麼更好的做法寫法請告訴我，我想知道各式各樣的做法和寫法！！</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> learning </tag>
            
            <tag> django restframework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF練習購物車紀錄-客製化django的User</title>
      <link href="/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/"/>
      <url>/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/0_p7cVVFOd6CpUowfp.webp"></p><h1 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h1><p>使用DRF django rest framework來寫一個簡單的購物車api，前端的部分就斟酌斟酌的寫了～主要著重在DRF這個超集，一直沒有好好的用他來寫一個東東出來，新的一年就來試著寫寫吧！</p><p>首先當然是建立環境，虛擬環境很多種大家就挑自己喜歡的建吧～<br>然後pip的部分如下</p><pre><code class="hljs py">asgiref==<span class="hljs-number">3.7</span><span class="hljs-number">.2</span>Django==<span class="hljs-number">5.0</span><span class="hljs-number">.1</span>django-<span class="hljs-built_in">filter</span>==<span class="hljs-number">23.5</span>djangorestframework==<span class="hljs-number">3.14</span><span class="hljs-number">.0</span>djangorestframework-simplejwt==<span class="hljs-number">5.3</span><span class="hljs-number">.1</span>Markdown==<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>PyJWT==<span class="hljs-number">2.8</span><span class="hljs-number">.0</span>pytz==<span class="hljs-number">2023.3</span>.post1setuptools==<span class="hljs-number">68.2</span><span class="hljs-number">.2</span>sqlparse==<span class="hljs-number">0.4</span><span class="hljs-number">.4</span>tzdata==<span class="hljs-number">2023.4</span>wheel==<span class="hljs-number">0.41</span><span class="hljs-number">.2</span></code></pre><p>python的版本則是用3.12.0</p><h1 id="資料夾"><a href="#資料夾" class="headerlink" title="資料夾"></a>資料夾</h1><p>目前規劃如下，有account, cart, order, shop, product</p><p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/1_aXOeWMJ8Ev1WeSSMXqkXzw.webp"></p><h1 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h1><p>首當其衝的就是登入了，目前考慮使用simplejwt和內建的api-auth兩個並行，api-auth是測試的時候比較方便，之後還要考慮轉換成simplejwt後一些request驗證怎麼執行～</p><pre><code class="hljs py"><span class="hljs-comment"># settings.py</span>INSTALLED_APPS = [    <span class="hljs-comment"># ...</span>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,    <span class="hljs-string">&#x27;rest_framework_simplejwt&#x27;</span>,    <span class="hljs-comment"># ...</span>]REST_FRAMEWORK = &#123;    <span class="hljs-comment"># ...</span>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,        <span class="hljs-string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,    ],    <span class="hljs-comment"># ...</span>&#125;</code></pre><pre><code class="hljs py"><span class="hljs-comment"># project下的urls.py</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<span class="hljs-keyword">from</span> rest_framework_simplejwt.views <span class="hljs-keyword">import</span> (    TokenObtainPairView,    TokenRefreshView,    TokenVerifyView,)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>)),    path(<span class="hljs-string">&#x27;api/token/&#x27;</span>, TokenObtainPairView.as_view(), name=<span class="hljs-string">&#x27;token_obtain_pair&#x27;</span>),    path(<span class="hljs-string">&#x27;api/token/refresh/&#x27;</span>, TokenRefreshView.as_view(), name=<span class="hljs-string">&#x27;token_refresh&#x27;</span>),    path(<span class="hljs-string">&#x27;api/token/verify/&#x27;</span>, TokenVerifyView.as_view(), name=<span class="hljs-string">&#x27;token_verify&#x27;</span>),]</code></pre><p>之後跑</p><ul><li><code>python manage.py migrate</code></li><li><code>python manage.py runserver</code></li></ul><p>接著去 <a href="http://127.0.0.1:8000/api/token">http://127.0.0.1:8000/api/token</a></p><p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/1_ZK2T4KEA1e9pIgp0k91FZQ.webp"></p><p>帳號密碼呢，我們先用 <code>python manage.py createsuperuser</code>建立一個admin帳號來測試會拿到什麼token～建立好輸入帳號密碼應該會像下面這樣拿到token～</p><pre><code class="hljs py">HTTP <span class="hljs-number">200</span> OKAllow: POST, OPTIONSContent-<span class="hljs-type">Type</span>: application/jsonVary: Accept&#123;    <span class="hljs-string">&quot;refresh&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcwOTczNTE0MywiaWF0IjoxNzA1NDE1MTQzLCJqdGkiOiJkMWI0MzRkZjc5YTM0MjE1OWFlOGY3ODViOWZiZWFiNiIsInVzZXJfaWQiOjF9.eCAuJ9LMUUbAYDmtB9h9VBbjCthz-SucJlcTTNztJk4&quot;</span>,    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzA1NDI1OTQzLCJpYXQiOjE3MDU0MTUxNDMsImp0aSI6ImY3MjViYmU4ZWVjZTQ5ZWJiYjk4MzZiMDk5NmM5MTVkIiwidXNlcl9pZCI6MX0.tAlpCVanj942qMjgBdxcTwqpLmdFCmPsSOJqkgw2XmY&quot;</span>&#125;</code></pre><p>這邊只是測試能否運行，實際要使用到JWT應該滿後期了～</p><h1 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h1><p>一開始就從Account開始著手吧！首先要起一個account的app</p><ul><li><code>python manage.py startapp account</code></li></ul><p>DRF會有三個不同負責的區域</p><ul><li>models</li><li>serializers</li><li>views</li></ul><h2 id="models"><a href="#models" class="headerlink" title="models"></a>models</h2><p>我們會需要動用到django內建的User，所以我們的model會去繼承</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">AbstractUser</span>):        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sex</span>(models.IntegerChoices):        FEMALE = <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Female&quot;</span>        MALE = <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Male&quot;</span>        OTHER = <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Other&quot;</span>        sex = models.PositiveSmallIntegerField(        verbose_name=<span class="hljs-string">&quot;sex&quot;</span>,        choices=Sex,        default=Sex.OTHER        )        phone = models.CharField(        verbose_name=<span class="hljs-string">&quot;phone&quot;</span>,         max_length=<span class="hljs-number">10</span>        )        email = models.EmailField(        verbose_name=<span class="hljs-string">&quot;email&quot;</span>,         max_length=<span class="hljs-number">254</span>        )        address = models.CharField(        verbose_name=<span class="hljs-string">&quot;address&quot;</span>,         max_length=<span class="hljs-number">100</span>        )        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.username</code></pre><p>這邊除了AbstractUser自帶的欄位外我自己新增了幾項～</p><h2 id="serializers"><a href="#serializers" class="headerlink" title="serializers"></a>serializers</h2><p>models是主要跟資料庫連結的class，而serializers則是把models跟view接在一起的通道</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountSerializer</span>(serializers.HyperlinkedModelSerializer):    sex = serializers.SerializerMethodField()    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Account        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;is_staff&quot;</span>]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sex</span>(<span class="hljs-params">self, obj</span>):        <span class="hljs-keyword">return</span> obj.get_sex_display()</code></pre><p>sex 性別額外拉出來是因為我想要它顯示的時候是顯示 male, female, other這樣，而不是0, 1, 2，至於這邊是怎麼對接上的有時間再來好好研究研究～</p><h2 id="views"><a href="#views" class="headerlink" title="views"></a>views</h2><p>views當然就是要準備回傳值的地方囉～</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<span class="hljs-keyword">from</span> account.models <span class="hljs-keyword">import</span> Account<span class="hljs-keyword">from</span> account.serializers <span class="hljs-keyword">import</span> AccountSerializer<span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountsView</span>(viewsets.ModelViewSet):    queryset = Account.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;id&quot;</span>)    serializer_class = AccountSerializer</code></pre><h2 id="urls"><a href="#urls" class="headerlink" title="urls"></a>urls</h2><p>最後把我們寫好的view註冊到urls裡面</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> account <span class="hljs-keyword">import</span> views<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routersrouter = routers.DefaultRouter()router.register(<span class="hljs-string">r&#x27;&#x27;</span>, views.AccountsView)urlpatterns = [     <span class="hljs-comment"># ...</span>]urlpatterns += router.urls</code></pre><p>最後在</p><ul><li><code>python manage.py makemigrations</code></li><li><code>python manage.py migrate</code></li><li><code>python manage.py runserver</code></li></ul><p>就可以看到DRF預設可以操作api的頁面囉～</p><p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/1_SogjtcatoJEyNwDA6VANyA.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> learning </tag>
            
            <tag> django restframework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Uvicorn Asyncio探索</title>
      <link href="/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/"/>
      <url>/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/0_INO7Jg0oBMnOleAX.webp"></p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在純函式咖啡每周三的podcast中講到的web framework benchmarks有著很多web framework的排行榜，那就好奇我大Python哪一個web framework是榜首呢～於是乎ctrl + F 搜尋下去就看到 uvicorn 228名，而我常用的django則是462名，那我就好奇uvicorn究竟是怎麼當python中的榜首的呢？就稍為的去了解了一下～</p><h1 id="Uvicorn"><a href="#Uvicorn" class="headerlink" title="Uvicorn"></a>Uvicorn</h1><p><a href="https://www.uvicorn.org/">Uvicorn  The lightning-fast ASGI server.</a></p><p>他是一個ASGI的web server，異步編程的server，所以嚴格說起來他並不是web framework，而且很容易迷路，且看到ASGI就會想到常用的WSGI，這兩者的差異就之後再說吧～</p><p>而要了解uvicorn呢需要知道的項目有</p><ul><li>asyncio</li><li>H11Protocol</li></ul><p>預設uvicorn main:app 是使用到H11Protocol，也支援</p><ul><li>HttpTools</li><li>WS</li><li>WebSocket</li></ul><p>而實際要起一個hello world的網站只需要簡單的</p><pre><code class="hljs py"><span class="hljs-comment"># main.py</span><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">app</span>(<span class="hljs-params">scope, receive, send</span>):    <span class="hljs-keyword">assert</span> scope[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;http&#x27;</span>    <span class="hljs-keyword">await</span> send(&#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;http.response.start&#x27;</span>,        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">200</span>,        <span class="hljs-string">&#x27;headers&#x27;</span>: [            [<span class="hljs-string">b&#x27;content-type&#x27;</span>, <span class="hljs-string">b&#x27;text/plain&#x27;</span>],        ],    &#125;)    <span class="hljs-keyword">await</span> send(&#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;http.response.body&#x27;</span>,        <span class="hljs-string">&#x27;body&#x27;</span>: <span class="hljs-string">b&#x27;Hello, world!&#x27;</span>,    &#125;)</code></pre><p>之後執行 uvicorn main:app 就可以起一個網站了</p><p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/1_6M705790uavMCE1bGNQwcg.webp"></p><p>在看看uvicorn之前我們先了解一下asyncio要起server怎麼做！</p><h1 id="Asyncio"><a href="#Asyncio" class="headerlink" title="Asyncio"></a>Asyncio</h1><p><a href="https://docs.python.org/3/library/asyncio-stream.html">Streams</a></p><p>跟著官方文件的範例來看看～可以稍微理解asyncio的server是怎麼運行的！</p><pre><code class="hljs py"><span class="hljs-comment"># server.py</span><span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoServerProtocol</span>(asyncio.Protocol):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connection_made</span>(<span class="hljs-params">self, transport</span>):        peername = transport.get_extra_info(<span class="hljs-string">&#x27;peername&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Connection from &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(peername))        self.transport = transport    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data_received</span>(<span class="hljs-params">self, data</span>):        message = data.decode()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data received: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(message))        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Send: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(message))        self.transport.write(data)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Close the client socket&#x27;</span>)        self.transport.close()<span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-comment"># Get a reference to the event loop as we plan to use</span>    <span class="hljs-comment"># low-level APIs.</span>    loop = asyncio.get_running_loop()    server = <span class="hljs-keyword">await</span> loop.create_server(        <span class="hljs-keyword">lambda</span>: EchoServerProtocol(),        <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> server:        <span class="hljs-keyword">await</span> server.serve_forever()asyncio.run(main())</code></pre><pre><code class="hljs py"><span class="hljs-comment"># client.py</span><span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoClientProtocol</span>(asyncio.Protocol):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, message, on_con_lost</span>):        self.message = message        self.on_con_lost = on_con_lost    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connection_made</span>(<span class="hljs-params">self, transport</span>):        transport.write(self.message.encode())        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data sent: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.message))    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data_received</span>(<span class="hljs-params">self, data</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data received: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.decode()))    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connection_lost</span>(<span class="hljs-params">self, exc</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The server closed the connection&#x27;</span>)        self.on_con_lost.set_result(<span class="hljs-literal">True</span>)<span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-comment"># Get a reference to the event loop as we plan to use</span>    <span class="hljs-comment"># low-level APIs.</span>    loop = asyncio.get_running_loop()    on_con_lost = loop.create_future()    message = <span class="hljs-string">&#x27;Hello World!&#x27;</span>    transport, protocol = <span class="hljs-keyword">await</span> loop.create_connection(        <span class="hljs-keyword">lambda</span>: EchoClientProtocol(message, on_con_lost),        <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)    <span class="hljs-comment"># Wait until the protocol signals that the connection</span>    <span class="hljs-comment"># is lost and close the transport.</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">await</span> on_con_lost    <span class="hljs-keyword">finally</span>:        transport.close()asyncio.run(main())</code></pre><p>分別在不同的terminal執行程式 python XXX.py就能看到他們之間的互動</p><p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/1_p33U5AmXiDjEH2Krkiq6WA.webp"></p><p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/1_sGPdz9OxyA0oS119NgfeHA.webp"></p><p>我們可以看到server和client都是跑在loop上面的，而這個EventLoop會是整個asyncio server中很重要的一個部分！</p><p>loop分為 windows_events 和 unix_events，我是在windows上測試的所以所有物件都會由windows_events那邊生成～可以在asyncio _<em>init</em>_.py中看到</p><pre><code class="hljs py"><span class="hljs-comment"># asyncio.__init__.py</span><span class="hljs-keyword">if</span> sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>:  <span class="hljs-comment"># pragma: no cover</span>    <span class="hljs-keyword">from</span> .windows_events <span class="hljs-keyword">import</span> *    __all__ += windows_events.__all__<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">from</span> .unix_events <span class="hljs-keyword">import</span> *  <span class="hljs-comment"># pragma: no cover</span>    __all__ += unix_events.__all__</code></pre><p>而我們剛剛照著官網範例實作的loop會是ProactorEventLoop，可以在windows_events.py中找到該class，那就先來看看 <code>create_server()</code>的過程吧！</p><h2 id="create-server"><a href="#create-server" class="headerlink" title="create_server()"></a>create_server()</h2><p>先找到ProactorEventLoop發現沒有create_server在往繼承上去找BaseProactorEventLoop，也發現沒有在往繼承上去找BaseEventLoop，找到create_server了</p><pre><code class="hljs py"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_server</span>(<span class="hljs-params"></span><span class="hljs-params">        self, protocol_factory, host=<span class="hljs-literal">None</span>, port=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        *,</span><span class="hljs-params">        family=socket.AF_UNSPEC,</span><span class="hljs-params">        flags=socket.AI_PASSIVE,</span><span class="hljs-params">        sock=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        backlog=<span class="hljs-number">100</span>,</span><span class="hljs-params">        ssl=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        reuse_address=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        reuse_port=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        ssl_handshake_timeout=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        ssl_shutdown_timeout=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        start_serving=<span class="hljs-literal">True</span></span>):    <span class="hljs-string">&quot;&quot;&quot;Create a TCP server.</span><span class="hljs-string"></span><span class="hljs-string">    The host parameter can be a string, in that case the TCP server is</span><span class="hljs-string">    bound to host and port.</span><span class="hljs-string"></span><span class="hljs-string">    The host parameter can also be a sequence of strings and in that case</span><span class="hljs-string">    the TCP server is bound to all hosts of the sequence. If a host</span><span class="hljs-string">    appears multiple times (possibly indirectly e.g. when hostnames</span><span class="hljs-string">    resolve to the same IP address), the server is only bound once to that</span><span class="hljs-string">    host.</span><span class="hljs-string"></span><span class="hljs-string">    Return a Server object which can be used to stop the service.</span><span class="hljs-string"></span><span class="hljs-string">    This method is a coroutine.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(ssl, <span class="hljs-built_in">bool</span>):        <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;ssl argument must be an SSLContext or None&#x27;</span>)    <span class="hljs-keyword">if</span> ssl_handshake_timeout <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> ssl <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> ValueError(            <span class="hljs-string">&#x27;ssl_handshake_timeout is only meaningful with ssl&#x27;</span>)    <span class="hljs-keyword">if</span> ssl_shutdown_timeout <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> ssl <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> ValueError(            <span class="hljs-string">&#x27;ssl_shutdown_timeout is only meaningful with ssl&#x27;</span>)    <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        _check_ssl_socket(sock)    <span class="hljs-keyword">if</span> host <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> port <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">raise</span> ValueError(                <span class="hljs-string">&#x27;host/port and sock can not be specified at the same time&#x27;</span>)        <span class="hljs-keyword">if</span> reuse_address <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            reuse_address = os.name == <span class="hljs-string">&quot;posix&quot;</span> <span class="hljs-keyword">and</span> sys.platform != <span class="hljs-string">&quot;cygwin&quot;</span>        sockets = []        <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;&#x27;</span>:            hosts = [<span class="hljs-literal">None</span>]        <span class="hljs-keyword">elif</span> (<span class="hljs-built_in">isinstance</span>(host, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">or</span>              <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(host, collections.abc.Iterable)):            hosts = [host]        <span class="hljs-keyword">else</span>:            hosts = host        fs = [self._create_server_getaddrinfo(host, port, family=family,                                              flags=flags)              <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> hosts]        infos = <span class="hljs-keyword">await</span> tasks.gather(*fs)        infos = <span class="hljs-built_in">set</span>(itertools.chain.from_iterable(infos))        completed = <span class="hljs-literal">False</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> infos:                af, socktype, proto, canonname, sa = res                <span class="hljs-keyword">try</span>:                    sock = socket.socket(af, socktype, proto)                <span class="hljs-keyword">except</span> socket.error:                    <span class="hljs-comment"># Assume it&#x27;s a bad family/type/protocol combination.</span>                    <span class="hljs-keyword">if</span> self._debug:                        logger.warning(<span class="hljs-string">&#x27;create_server() failed to create &#x27;</span>                                       <span class="hljs-string">&#x27;socket.socket(%r, %r, %r)&#x27;</span>,                                       af, socktype, proto, exc_info=<span class="hljs-literal">True</span>)                    <span class="hljs-keyword">continue</span>                sockets.append(sock)                <span class="hljs-keyword">if</span> reuse_address:                    sock.setsockopt(                        socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-literal">True</span>)                <span class="hljs-keyword">if</span> reuse_port:                    _set_reuseport(sock)                <span class="hljs-comment"># Disable IPv4/IPv6 dual stack support (enabled by</span>                <span class="hljs-comment"># default on Linux) which makes a single socket</span>                <span class="hljs-comment"># listen on both address families.</span>                <span class="hljs-keyword">if</span> (_HAS_IPv6 <span class="hljs-keyword">and</span>                        af == socket.AF_INET6 <span class="hljs-keyword">and</span>                        <span class="hljs-built_in">hasattr</span>(socket, <span class="hljs-string">&#x27;IPPROTO_IPV6&#x27;</span>)):                    sock.setsockopt(socket.IPPROTO_IPV6,                                    socket.IPV6_V6ONLY,                                    <span class="hljs-literal">True</span>)                <span class="hljs-keyword">try</span>:                    sock.bind(sa)                <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> err:                    <span class="hljs-keyword">raise</span> OSError(err.errno, <span class="hljs-string">&#x27;error while attempting &#x27;</span>                                  <span class="hljs-string">&#x27;to bind on address %r: %s&#x27;</span>                                  % (sa, err.strerror.lower())) <span class="hljs-keyword">from</span> <span class="hljs-literal">None</span>            completed = <span class="hljs-literal">True</span>        <span class="hljs-keyword">finally</span>:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> completed:                <span class="hljs-keyword">for</span> sock <span class="hljs-keyword">in</span> sockets:                    sock.close()    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Neither host/port nor sock were specified&#x27;</span>)        <span class="hljs-keyword">if</span> sock.<span class="hljs-built_in">type</span> != socket.SOCK_STREAM:            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;A Stream Socket was expected, got <span class="hljs-subst">&#123;sock!r&#125;</span>&#x27;</span>)        sockets = [sock]    <span class="hljs-keyword">for</span> sock <span class="hljs-keyword">in</span> sockets:        sock.setblocking(<span class="hljs-literal">False</span>)    server = Server(self, sockets, protocol_factory,                    ssl, backlog, ssl_handshake_timeout,                    ssl_shutdown_timeout)    <span class="hljs-keyword">if</span> start_serving:        server._start_serving()        <span class="hljs-comment"># Skip one loop iteration so that all &#x27;loop.add_reader&#x27;</span>        <span class="hljs-comment"># go through.</span>        <span class="hljs-keyword">await</span> tasks.sleep(<span class="hljs-number">0</span>)    <span class="hljs-keyword">if</span> self._debug:        logger.info(<span class="hljs-string">&quot;%r is serving&quot;</span>, server)    <span class="hljs-keyword">return</span> server</code></pre><p>當中有很多判斷點我們先略過，看他return的server為何～？</p><pre><code class="hljs py">server = Server(self, sockets, protocol_factory,                      ssl, backlog, ssl_handshake_timeout,                      ssl_shutdown_timeout)</code></pre><p>一個Server物件，再回到server.py看拿到server後的動作為</p><h2 id="server-forever"><a href="#server-forever" class="headerlink" title="server_forever()"></a>server_forever()</h2><pre><code class="hljs py"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-comment"># Get a reference to the event loop as we plan to use</span>    <span class="hljs-comment"># low-level APIs.</span>    loop = asyncio.get_running_loop()    server = <span class="hljs-keyword">await</span> loop.create_server(        <span class="hljs-keyword">lambda</span>: EchoServerProtocol(),        <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> server:        <span class="hljs-keyword">await</span> server.serve_forever()</code></pre><pre><code class="hljs py"><span class="hljs-comment"># base_events.Server</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>(events.AbstractServer):<span class="hljs-comment"># ...</span><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">serve_forever</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self._serving_forever_fut <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> RuntimeError(            <span class="hljs-string">f&#x27;server <span class="hljs-subst">&#123;self!r&#125;</span> is already being awaited on serve_forever()&#x27;</span>)    <span class="hljs-keyword">if</span> self._sockets <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">f&#x27;server <span class="hljs-subst">&#123;self!r&#125;</span> is closed&#x27;</span>)    self._start_serving()    self._serving_forever_fut = self._loop.create_future()    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">await</span> self._serving_forever_fut    <span class="hljs-keyword">except</span> exceptions.CancelledError:        <span class="hljs-keyword">try</span>:            self.close()            <span class="hljs-keyword">await</span> self.wait_closed()        <span class="hljs-keyword">finally</span>:            <span class="hljs-keyword">raise</span>    <span class="hljs-keyword">finally</span>:        self._serving_forever_fut = <span class="hljs-literal">None</span><span class="hljs-comment"># ...</span></code></pre><p>關注在self._start_serving()上</p><pre><code class="hljs py"><span class="hljs-comment"># base_events.Server</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>(events.AbstractServer):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">_start_serving</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self._serving:        <span class="hljs-keyword">return</span>    self._serving = <span class="hljs-literal">True</span>    <span class="hljs-keyword">for</span> sock <span class="hljs-keyword">in</span> self._sockets:        sock.listen(self._backlog)        self._loop._start_serving(            self._protocol_factory, sock, self._ssl_context,            self, self._backlog, self._ssl_handshake_timeout,            self._ssl_shutdown_timeout)<span class="hljs-comment"># ...</span></code></pre><p>接著看self._loop._start_serving()為何？別忘記這邊的self._loop唯一開始的ProactorEventLoop，所以要從這邊開始找，沒有在往繼承上面找，最後會在BaseProactorEventLoop中找到 _start_serving()</p><pre><code class="hljs py"><span class="hljs-comment"># proactor_events.py BaseProactorEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseProactorEventLoop</span>(base_events.BaseEventLoop):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">_start_serving</span>(<span class="hljs-params">self, protocol_factory, sock,</span><span class="hljs-params">                   sslcontext=<span class="hljs-literal">None</span>, server=<span class="hljs-literal">None</span>, backlog=<span class="hljs-number">100</span>,</span><span class="hljs-params">                   ssl_handshake_timeout=<span class="hljs-literal">None</span>,</span><span class="hljs-params">                   ssl_shutdown_timeout=<span class="hljs-literal">None</span></span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params">f=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> f <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                conn, addr = f.result()                <span class="hljs-keyword">if</span> self._debug:                    logger.debug(<span class="hljs-string">&quot;%r got a new connection from %r: %r&quot;</span>,                                 server, addr, conn)                protocol = protocol_factory()                <span class="hljs-keyword">if</span> sslcontext <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                    self._make_ssl_transport(                        conn, protocol, sslcontext, server_side=<span class="hljs-literal">True</span>,                        extra=&#123;<span class="hljs-string">&#x27;peername&#x27;</span>: addr&#125;, server=server,                        ssl_handshake_timeout=ssl_handshake_timeout,                        ssl_shutdown_timeout=ssl_shutdown_timeout)                <span class="hljs-keyword">else</span>:                    self._make_socket_transport(                        conn, protocol,                        extra=&#123;<span class="hljs-string">&#x27;peername&#x27;</span>: addr&#125;, server=server)            <span class="hljs-keyword">if</span> self.is_closed():                <span class="hljs-keyword">return</span>            f = self._proactor.accept(sock)        <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> exc:            <span class="hljs-keyword">if</span> sock.fileno() != -<span class="hljs-number">1</span>:                self.call_exception_handler(&#123;                    <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Accept failed on a socket&#x27;</span>,                    <span class="hljs-string">&#x27;exception&#x27;</span>: exc,                    <span class="hljs-string">&#x27;socket&#x27;</span>: trsock.TransportSocket(sock),                &#125;)                sock.close()            <span class="hljs-keyword">elif</span> self._debug:                logger.debug(<span class="hljs-string">&quot;Accept failed on socket %r&quot;</span>,                             sock, exc_info=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">except</span> exceptions.CancelledError:            sock.close()        <span class="hljs-keyword">else</span>:            self._accept_futures[sock.fileno()] = f            f.add_done_callback(loop)    self.call_soon(loop)<span class="hljs-comment"># ...</span></code></pre><p>這邊最後的self.call_soon()會把該function物件丟到events.Handle並生成Handle物件，然後加到self._ready中，self._ready為collections.deque()，這邊我還沒有搞清楚什麼時候self._ready會被觸發！server繞了一圈被丟到self._ready中～</p><h2 id="asyncio-run"><a href="#asyncio-run" class="headerlink" title="asyncio.run()"></a>asyncio.run()</h2><p>接著再切回來server.py中最後一行</p><pre><code class="hljs py"><span class="hljs-comment"># server.py</span>asyncio.run(main())</code></pre><p>asyncio啟動式</p><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">main, *, debug=<span class="hljs-literal">None</span>, loop_factory=<span class="hljs-literal">None</span></span>):    <span class="hljs-string">&quot;&quot;&quot;Execute the coroutine and return the result.</span><span class="hljs-string"></span><span class="hljs-string">    This function runs the passed coroutine, taking care of</span><span class="hljs-string">    managing the asyncio event loop, finalizing asynchronous</span><span class="hljs-string">    generators and closing the default executor.</span><span class="hljs-string"></span><span class="hljs-string">    This function cannot be called when another asyncio event loop is</span><span class="hljs-string">    running in the same thread.</span><span class="hljs-string"></span><span class="hljs-string">    If debug is True, the event loop will be run in debug mode.</span><span class="hljs-string"></span><span class="hljs-string">    This function always creates a new event loop and closes it at the end.</span><span class="hljs-string">    It should be used as a main entry point for asyncio programs, and should</span><span class="hljs-string">    ideally only be called once.</span><span class="hljs-string"></span><span class="hljs-string">    The executor is given a timeout duration of 5 minutes to shutdown.</span><span class="hljs-string">    If the executor hasn&#x27;t finished within that duration, a warning is</span><span class="hljs-string">    emitted and the executor is closed.</span><span class="hljs-string"></span><span class="hljs-string">    Example:</span><span class="hljs-string"></span><span class="hljs-string">        async def main():</span><span class="hljs-string">            await asyncio.sleep(1)</span><span class="hljs-string">            print(&#x27;hello&#x27;)</span><span class="hljs-string"></span><span class="hljs-string">        asyncio.run(main())</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> events._get_running_loop() <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-comment"># fail fast with short traceback</span>        <span class="hljs-keyword">raise</span> RuntimeError(            <span class="hljs-string">&quot;asyncio.run() cannot be called from a running event loop&quot;</span>)    <span class="hljs-keyword">with</span> Runner(debug=debug, loop_factory=loop_factory) <span class="hljs-keyword">as</span> runner:        <span class="hljs-keyword">return</span> runner.run(main)</code></pre><p>會交由Runner去執行</p><pre><code class="hljs py"><span class="hljs-comment"># runners.py Runner.run</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Runner</span>:<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, coro, *, context=<span class="hljs-literal">None</span></span>):    <span class="hljs-string">&quot;&quot;&quot;Run a coroutine inside the embedded event loop.&quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> coroutines.iscoroutine(coro):        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;a coroutine was expected, got &#123;!r&#125;&quot;</span>.<span class="hljs-built_in">format</span>(coro))    <span class="hljs-keyword">if</span> events._get_running_loop() <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-comment"># fail fast with short traceback</span>        <span class="hljs-keyword">raise</span> RuntimeError(            <span class="hljs-string">&quot;Runner.run() cannot be called from a running event loop&quot;</span>)    self._lazy_init()    <span class="hljs-keyword">if</span> context <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        context = self._context    task = self._loop.create_task(coro, context=context)    <span class="hljs-keyword">if</span> (threading.current_thread() <span class="hljs-keyword">is</span> threading.main_thread()        <span class="hljs-keyword">and</span> signal.getsignal(signal.SIGINT) <span class="hljs-keyword">is</span> signal.default_int_handler    ):        sigint_handler = functools.partial(self._on_sigint, main_task=task)        <span class="hljs-keyword">try</span>:            signal.signal(signal.SIGINT, sigint_handler)        <span class="hljs-keyword">except</span> ValueError:            <span class="hljs-comment"># `signal.signal` may throw if `threading.main_thread` does</span>            <span class="hljs-comment"># not support signals (e.g. embedded interpreter with signals</span>            <span class="hljs-comment"># not registered - see gh-91880)</span>            sigint_handler = <span class="hljs-literal">None</span>    <span class="hljs-keyword">else</span>:        sigint_handler = <span class="hljs-literal">None</span>    self._interrupt_count = <span class="hljs-number">0</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">return</span> self._loop.run_until_complete(task)    <span class="hljs-keyword">except</span> exceptions.CancelledError:        <span class="hljs-keyword">if</span> self._interrupt_count &gt; <span class="hljs-number">0</span>:            uncancel = <span class="hljs-built_in">getattr</span>(task, <span class="hljs-string">&quot;uncancel&quot;</span>, <span class="hljs-literal">None</span>)            <span class="hljs-keyword">if</span> uncancel <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> uncancel() == <span class="hljs-number">0</span>:                <span class="hljs-keyword">raise</span> KeyboardInterrupt()        <span class="hljs-keyword">raise</span>  <span class="hljs-comment"># CancelledError</span>    <span class="hljs-keyword">finally</span>:        <span class="hljs-keyword">if</span> (sigint_handler <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>            <span class="hljs-keyword">and</span> signal.getsignal(signal.SIGINT) <span class="hljs-keyword">is</span> sigint_handler        ):            signal.signal(signal.SIGINT, signal.default_int_handler)<span class="hljs-comment"># ...</span></code></pre><p>把main()丟到task裡面後，交由self._loop.run_until_complete(task)，create_task和run_until_complete都在BaseEventLoop中被定義！</p><pre><code class="hljs py"><span class="hljs-comment"># base_events.py BaseEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEventLoop</span>(events.AbstractEventLoop):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_until_complete</span>(<span class="hljs-params">self, future</span>):    <span class="hljs-string">&quot;&quot;&quot;Run until the Future is done.</span><span class="hljs-string"></span><span class="hljs-string">    If the argument is a coroutine, it is wrapped in a Task.</span><span class="hljs-string"></span><span class="hljs-string">    WARNING: It would be disastrous to call run_until_complete()</span><span class="hljs-string">    with the same coroutine twice -- it would wrap it in two</span><span class="hljs-string">    different Tasks and that can&#x27;t be good.</span><span class="hljs-string"></span><span class="hljs-string">    Return the Future&#x27;s result, or raise its exception.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    self._check_closed()    self._check_running()    new_task = <span class="hljs-keyword">not</span> futures.isfuture(future)    future = tasks.ensure_future(future, loop=self)    <span class="hljs-keyword">if</span> new_task:        <span class="hljs-comment"># An exception is raised if the future didn&#x27;t complete, so there</span>        <span class="hljs-comment"># is no need to log the &quot;destroy pending task&quot; message</span>        future._log_destroy_pending = <span class="hljs-literal">False</span>    future.add_done_callback(_run_until_complete_cb)    <span class="hljs-keyword">try</span>:        self.run_forever()    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">if</span> new_task <span class="hljs-keyword">and</span> future.done() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> future.cancelled():            <span class="hljs-comment"># The coroutine raised a BaseException. Consume the exception</span>            <span class="hljs-comment"># to not log a warning, the caller doesn&#x27;t have access to the</span>            <span class="hljs-comment"># local task.</span>            future.exception()        <span class="hljs-keyword">raise</span>    <span class="hljs-keyword">finally</span>:        future.remove_done_callback(_run_until_complete_cb)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> future.done():        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;Event loop stopped before Future completed.&#x27;</span>)    <span class="hljs-keyword">return</span> future.result()<span class="hljs-comment"># ...</span></code></pre><p>關注self.run_forever()，要再回頭看ProactorEventLoop中有沒有該function，有！</p><pre><code class="hljs py"><span class="hljs-comment"># windowns_events.py ProactorEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProactorEventLoop</span>(proactor_events.BaseProactorEventLoop):    <span class="hljs-string">&quot;&quot;&quot;Windows version of proactor event loop using IOCP.&quot;&quot;&quot;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, proactor=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">if</span> proactor <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            proactor = IocpProactor()        <span class="hljs-built_in">super</span>().__init__(proactor)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_forever</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">assert</span> self._self_reading_future <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>            self.call_soon(self._loop_self_reading)            <span class="hljs-built_in">super</span>().run_forever()        <span class="hljs-keyword">finally</span>:            <span class="hljs-keyword">if</span> self._self_reading_future <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                ov = self._self_reading_future._ov                self._self_reading_future.cancel()                <span class="hljs-comment"># self_reading_future was just cancelled so if it hasn&#x27;t been</span>                <span class="hljs-comment"># finished yet, it never will be (it&#x27;s possible that it has</span>                <span class="hljs-comment"># already finished and its callback is waiting in the queue,</span>                <span class="hljs-comment"># where it could still happen if the event loop is restarted).</span>                <span class="hljs-comment"># Unregister it otherwise IocpProactor.close will wait for it</span>                <span class="hljs-comment"># forever</span>                <span class="hljs-keyword">if</span> ov <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                    self._proactor._unregister(ov)                self._self_reading_future = <span class="hljs-literal">None</span></code></pre><p>super到BaseEventLoop的run_forever()</p><pre><code class="hljs py"><span class="hljs-comment"># base_events.py BaseEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEventLoop</span>(events.AbstractEventLoop):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_forever</span>(<span class="hljs-params">self</span>):    <span class="hljs-string">&quot;&quot;&quot;Run until stop() is called.&quot;&quot;&quot;</span>    self._check_closed()    self._check_running()    self._set_coroutine_origin_tracking(self._debug)    old_agen_hooks = sys.get_asyncgen_hooks()    <span class="hljs-keyword">try</span>:        self._thread_id = threading.get_ident()        sys.set_asyncgen_hooks(firstiter=self._asyncgen_firstiter_hook,                               finalizer=self._asyncgen_finalizer_hook)        events._set_running_loop(self)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            self._run_once()            <span class="hljs-keyword">if</span> self._stopping:                <span class="hljs-keyword">break</span>    <span class="hljs-keyword">finally</span>:        self._stopping = <span class="hljs-literal">False</span>        self._thread_id = <span class="hljs-literal">None</span>        events._set_running_loop(<span class="hljs-literal">None</span>)        self._set_coroutine_origin_tracking(<span class="hljs-literal">False</span>)        sys.set_asyncgen_hooks(*old_agen_hooks)<span class="hljs-comment"># ...</span></code></pre><p>這邊會設定events loop並一直執行裡面該有的任務，前面不知道的self._ready也會在self._run_once()當中被執行！</p><p>到這邊大概能有個對asyncio server的一個概觀了～</p><p>最後回頭來看看 uvicorn是怎麼運作的吧！</p><h2 id="uvicorn-server"><a href="#uvicorn-server" class="headerlink" title="uvicorn server"></a>uvicorn server</h2><p>先找到uvicorn的位置吧，找到之後看看main.py</p><p>參數有點多就不貼上來了，主要看看Server物件和該物件的run function！</p><pre><code class="hljs py"><span class="hljs-comment"># uvicorn server.py Server</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: Config</span>) -&gt; <span class="hljs-literal">None</span>:        self.config = config        self.server_state = ServerState()        self.started = <span class="hljs-literal">False</span>        self.should_exit = <span class="hljs-literal">False</span>        self.force_exit = <span class="hljs-literal">False</span>        self.last_notified = <span class="hljs-number">0.0</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, sockets: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[socket.socket]] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-literal">None</span>:        self.config.setup_event_loop()        <span class="hljs-keyword">return</span> asyncio.run(self.serve(sockets=sockets))</code></pre><p>可以看到一開始先準備好event_loop後執行asyncio.run()，看看其中的self.serve()</p><pre><code class="hljs py"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">serve</span>(<span class="hljs-params">self, sockets: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[socket.socket]] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-literal">None</span>:    process_id = os.getpid()    config = self.config    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> config.loaded:        config.load()    self.lifespan = config.lifespan_class(config)    self.install_signal_handlers()    message = <span class="hljs-string">&quot;Started server process [%d]&quot;</span>    color_message = <span class="hljs-string">&quot;Started server process [&quot;</span> + click.style(<span class="hljs-string">&quot;%d&quot;</span>, fg=<span class="hljs-string">&quot;cyan&quot;</span>) + <span class="hljs-string">&quot;]&quot;</span>    logger.info(message, process_id, extra=&#123;<span class="hljs-string">&quot;color_message&quot;</span>: color_message&#125;)    <span class="hljs-keyword">await</span> self.startup(sockets=sockets)    <span class="hljs-keyword">if</span> self.should_exit:        <span class="hljs-keyword">return</span>    <span class="hljs-keyword">await</span> self.main_loop()    <span class="hljs-keyword">await</span> self.shutdown(sockets=sockets)    message = <span class="hljs-string">&quot;Finished server process [%d]&quot;</span>    color_message = <span class="hljs-string">&quot;Finished server process [&quot;</span> + click.style(<span class="hljs-string">&quot;%d&quot;</span>, fg=<span class="hljs-string">&quot;cyan&quot;</span>) + <span class="hljs-string">&quot;]&quot;</span>    logger.info(message, process_id, extra=&#123;<span class="hljs-string">&quot;color_message&quot;</span>: color_message&#125;)</code></pre><p>在往下看self.startup()就能看到剛剛asyncio server.py那些部分啦！</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>uvicorn設定的部分還有很多，還沒有很熟悉就先到這邊了，對asyncio沒有很熟悉來看這些原始碼真的挺容易迷路的，不過稍微找一下還是能摸清楚大概的來龍去脈，也可以大致了解運行流程以及接收request的過程(這邊今天沒說到)，還可以跟django比較看看兩邊最大的差異點，之後再來看看FastAPI的原始碼吧！！</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> learning </tag>
            
            <tag> uvicorn </tag>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去年的檢討報告書</title>
      <link href="/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/"/>
      <url>/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/0_aruDvv2A-l3RmziV.webp"></p><p>2023年是一個非常充實的一整年，為了自己的目標，我嘗試去做了很多我不曾想過或不想做的事～有很多目標並沒有達成但….付出的努力或許會在將來有所回饋～</p><hr><h1 id="2023下半年目標"><a href="#2023下半年目標" class="headerlink" title="2023下半年目標"></a>2023下半年目標</h1><p>我年中的時候有定下了2023下半年的目標，為下～</p><ol><li>找到一份自己喜歡的工作</li><li>水球的課程如期完成</li><li>做出一個拉麵地圖的網站</li><li>日文的複習以及英文的學習</li><li>文章輸出練習</li><li>言語&#x2F;文字轉換程式的速度及完整度</li></ol><p>而結果對應為～</p><ol><li>未達成，不夠努力，履歷很難被看見所以面試很少</li><li>完成到4.2附近，覺得已達成報名目標就緩著了</li><li>懶惰且想太多而沒實際執行看看 ˊ_&gt;ˋ</li><li>日文每周讀書會練習，英文偶爾看</li><li>今年預計產出50篇文章，技術文章數量感覺偏少要注意</li><li>寫程式的想法跟速度由水球課程那邊訓練達成</li></ol><p>自我分析後大概還是缺乏執行力，且目標過大太過遙遠～</p><p>之後可能要列出大目標後再針對大目標進行拆解，想辦法把目標拆解成短期且持續成長的小目標～</p><hr><h1 id="一整年的感覺"><a href="#一整年的感覺" class="headerlink" title="一整年的感覺"></a>一整年的感覺</h1><p>然後稍微回想了一下一整年下來自己的感覺～</p><ol><li><p>今年大致已經了解web前後端的大技術。</p><p> 概觀有了但不夠深入每個都感覺淺淺的</p></li><li><p>工作難有專案實作，幾乎都只能自己練習。</p><p> 那就想辦法下班多練習，上班沒工作也練習相關技術</p></li><li><p>想法不多，需求難產。</p><p> 上網看別人都在練習甚麼挑幾個來做</p></li><li><p>中間崩潰過幾次休息了一陣子又出發。</p><p> 跨過去就是成長的開始</p></li><li><p>投履歷被現實擊垮沒有面試機會。</p><p> 沒有好好的修自己履歷，投履歷也沒有針對公司客製</p></li><li><p>努力方向不明確就停滯不前。</p><p> 應該要瘋狂練習管他對不對有趣就行，可能會繞遠路總比站在原地好</p></li><li><p>書有讀幾本但速度偏慢且深度也不夠。</p><p> 必須好好培養靜下來好好的閱讀</p></li></ol><hr><h1 id="活動"><a href="#活動" class="headerlink" title="活動"></a>活動</h1><p>而我今年參加過的線上線下活動～</p><h2 id="線下"><a href="#線下" class="headerlink" title="線下"></a>線下</h2><ul><li>taipei.py meetup</li><li>graphQL meetup</li><li>CosCup</li><li>pycon</li><li>DDDconf</li><li>DevOps meetup</li><li>release course</li></ul><h2 id="線上"><a href="#線上" class="headerlink" title="線上"></a>線上</h2><ul><li>SEC</li><li>GaaS</li><li>TTM</li><li>五倍紅寶石的分享</li><li>共學團</li><li>水球的線上課程</li></ul><p>這也算是我當初上台北的一個目的，多參加活動，認識不同的人，聽聽其他人的想法、故事、經驗、心法，參加的並不算多但也是頗有收穫！</p><hr><h1 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h1><p>今年空閒時間做的一些練習～<br>github repos</p><ul><li><a href="https://github.com/m124578n/Release_course">Release_course</a></li><li><a href="https://github.com/m124578n/IronMan_ToDoList">IronMan_ToDoList</a></li><li><a href="https://github.com/m124578n/ToDoList">ToDoList</a></li><li><a href="https://github.com/m124578n/waterball_missions">waterball_missions</a></li><li><a href="https://github.com/m124578n/python-line-bot-fly-flask">python-line-bot-fly-flask</a></li><li><a href="https://github.com/m124578n/ChatRoom">ChatRoom</a></li><li><a href="https://github.com/m124578n/django_rest_framework_practice">django_rest_framework_practice</a></li><li><a href="https://github.com/m124578n/spring_boot_swagger_test">spring_boot_swagger_test</a></li><li><a href="https://github.com/m124578n/spring_boot_playground">spring_boot_playground</a></li><li><a href="https://github.com/m124578n/pure-backend-practice-chih">pure-backend-practice-chih</a></li><li><a href="https://github.com/m124578n/old_blog">old_blog</a></li><li><a href="https://github.com/m124578n/m124578n.github.io">m124578n.github.io</a></li></ul><p>練習的量不夠多且淺，或許之後可以看看其他人的專案來找靈感～</p><hr><h1 id="Thome鐵人賽"><a href="#Thome鐵人賽" class="headerlink" title="Thome鐵人賽"></a>Thome鐵人賽</h1><ul><li><a href="https://ithelp.ithome.com.tw/users/20162905/ironman/6646">django還債</a><br>鐵人賽其實是臨時決定要參加的，當初一直猶豫自己會不會太菜技術力文章力都不夠，但後來想想並不是所有人都可以一次就做到完美，總是需要練習的過程，所以就參加了自我挑戰組，而挑選django也是因為常常使用且很好奇他實際的運行過程～</li></ul><hr><h1 id="明年目標-大標"><a href="#明年目標-大標" class="headerlink" title="明年目標 : 大標"></a>明年目標 : 大標</h1><ul><li>找到一份理想的工作</li><li>減肥健身維持運動習慣</li><li>學習成為值得交往的對象，多認識人</li><li>戴牙套</li><li>讀英文</li><li>參加鐵人賽</li><li>leetcode穩定練習</li><li>每月至少輸出2篇”技術”文章</li><li>每兩個月讀1本書</li><li>決定寫程式二轉職業</li></ul><p>這些大標為我目前想要達成的事或想要培養的習慣！之後還是需要制定執行計畫並定期回顧是否有達成～</p><hr><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>工程師也做了一年半，至今都還覺得自己不會得太廣太多了，也有點不清楚要往哪個方向前進，所以就嘗試了很多方法，改變了很多想法，算是一直在小量的迭代自己，希望自己可以成為理想中的自己。</p><p>而2023學習的過程也崩潰了好幾次，那些負面情緒跟雜念擊垮了我好幾回合，但成長或許就是一直崩潰一直振作而淬鍊出來的結晶，調整自己的心態、狀態，穩固好自己的腳步，只要不停止就是離成功離目標前進了一步！</p><p>而今年的目標或許會隨著遇見不同的人不同的事而有所改變或調整或新增吧！畢竟今年才剛開始，2024的我的旅程才剛準備出發～人生苦短，為自己努力，過一個有意義的一年吧！累積新的技能，堆疊新的回憶！希望明年的我也會覺得2024是個充實的一年！</p><p><code>祝大家新年快樂～持續成長！</code></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今年の本</title>
      <link href="/2023-12-24%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%9C%AC/"/>
      <url>/2023-12-24%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>僕が成長のために今年からいろいろな学習方法を試しました、でも試す前に方法自体が学ぶ必要がある、なので、最初はどうすれば効率的、有効的、飽きなくて自分に相応しい学習方法を見つけなければならない、ということで、幾つの本を読みました。</p><ol><li><p>Atomic Habits・アトミック．ハビッツ</p><p> 小さな違いで巨大な変化が生み出す</p><p> 習慣というのは普通に考えると変えにくいの感じでしょう、それは方法が間違えだということだ、本からの要点が掴めば自然に、人の本性を返さず、いい習慣をつけれると悪い習慣を除ける。</p></li><li><p>The Feynman Technique</p><p> 学習というのは、ただひたすらに知識を頭の中に入れる作業ではないのだ、頭の中でもう一と考え、理解して、自分なりに意思を話すのが大切なことだ。</p></li><li><p>OUTPUT ．アウトプット</p><p> この本も二番目と同じ感じで、理解した知識を話す、書く、教えるとこの過程中は知識が脳内で何回も何回も整理して、考えて、その一番核のポイントに掴んで最後にアウトプットする。</p></li></ol><p>こいう感じで印象が強い本、実際も影響されて成長しましたと思います、もし勉強の効果が低い方にはぜひ試してみてください。</p>]]></content>
      
      
      <categories>
          
          <category> 讀書心得 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> books </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神社，寺廟，日本行！！</title>
      <link href="/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
      <url>/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>日本的尾聲了，隔天就要準備搭飛機回台灣了，這10天說長不長說短不短的，滿足了我15年來一直想要體驗、感受、充實的過程，也讓我找到了我究竟是誰，追求的到底是什麼，生活的目標等等～身心靈整個大滿足！！</p><p>下圖為當天的行程，感覺走了很久但我卻不太會累，就是有點冷而已XD</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_EZoh5bUEXe375-juhzu86g.webp"></p><h2 id="日本之第九天"><a href="#日本之第九天" class="headerlink" title="日本之第九天"></a>日本之第九天</h2><p>一早前往南禪寺～從蹴上駅出來就感受到微微的寒風，此時的我已經開始後悔沒有穿厚一點的外套了XD，從車站出來可以明顯地感受到這邊是有點要上山的道路，周圍都是濃厚的自然芬芳，接著沿著google指示準備前往第一站</p><h3 id="南禪寺"><a href="#南禪寺" class="headerlink" title="南禪寺"></a>南禪寺</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_vDtq7rvCAfh7S-sNMZtUxg.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_CLayI51etdzY3TMK011n9A.webp"></p><p>通過這個隧道後彷彿進到了不一樣的世界，周圍都是深山老宅的那種感覺，古老的建築與翠綠的自然相互融合的那種視覺非常的舒服～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rfn-VIZ_vLYUg1vSp1lfKw.webp"></p><p>接著沿著道路一直走，周圍都是什麼什麼寺的，礙於時間關係我們就直接前往目標的南禪寺了，下次可以再好好的逛一次～就這樣走到底就可以看到目的地囉！！</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_GaCdjKkugxAgl_S9HCPFdQ.webp"></p><p>一走進去就感受到跟前面不太一樣的氛圍，這邊顯得更莊重、開闊、且生氣（畢竟人變多了XD），感受著這邊的朝氣，吸著山林間的空氣，通體舒暢～不多說了看圖感受一下這邊的美景～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tNN1_WFLngmOYm38CMei5g.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rZCWaBX0JTY1iST5sA5p1Q.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_7w-6VYDb3C4bXAwCMYC00Q.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_OVONT5AK9fhpStQc5FthNw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_CgpwuVOqPd7N18xHh_NvKA.webp"></p><p>而我也在這個時候開始了我今天的御守搜集之旅，從南禪寺開始我每到一間寺廟或神社就買個幾個御守和抽個籤～哈哈哈</p><p>接著我們就離開了南禪寺前往哲學之道～雖然這個時間點去沒什麼景色～不過走在這樣的路上聊聊天感覺也很不錯，路上還看到有人掉了IC卡，我們把它放到比較顯眼的地方希望他回來可以直接看到～而在道路上有人在寫生～有人在跟貓咪玩～有人在觀察著溪裡的魚～生活得如此愜意輕鬆的感覺也真不錯！</p><h3 id="哲學之道"><a href="#哲學之道" class="headerlink" title="哲學之道"></a>哲學之道</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_qCFdYQWnrJti5Jh4-90NXA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-I-_CfCkipTuLESdTCPOcw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_OH9vd1armtYYyi3tCtFWRg.webp"></p><p>哲學之道整條路的周圍有許多的神社跟寺廟就沒有一間一間去參訪了～其實這邊愜意的輕鬆的走感覺可以逛一整天呢～</p><p>前往下一站</p><h3 id="岡崎神社"><a href="#岡崎神社" class="headerlink" title="岡崎神社"></a>岡崎神社</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_xMWC1bQ0gbZzVIiX--0P6A.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rFA3nZ4C-gpmimGD913XIA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_8CWfbiiY3hV8MG5O5yJGgQ.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4tiv86gAeGky5RmJkqihwQ.webp"></p><p>這間神社是可以祈求結緣求子的，主要是供奉兔兔，所以神社內會有很多可愛的兔兔～～我在這邊也買了個御守，希望可以助我一臂之力遇見一個好對象！（現在好像出現了希望可以成功！！）願兔兔之神可以保佑我一切順利～～</p><p>接著前往下一站</p><h3 id="平安神宮"><a href="#平安神宮" class="headerlink" title="平安神宮"></a>平安神宮</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Qmhlia1DnnYdZCA-x98Fmw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_bFLpAaIfJWHKlCQd-3bFeA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tPNiuZ7KCi5aSnmhnHlNXw.webp"></p><p>這邊跟前面看見的神社跟寺廟的感覺是完完全全不一樣的，一進去就是一大片的廣闊的沙子石子地，走到最裡面還剛好看到了祈求祝福儀式的過程～然後建築物的風格也明顯的跟前面看到的都不太一樣～有不同的感受～</p><p>下一站～</p><h3 id="全家炸雞"><a href="#全家炸雞" class="headerlink" title="全家炸雞"></a>全家炸雞</h3><p>晴明神社之前呢經過了京都御所，留給我們的時間不多了我們就直接前往目的地，不然這個佔地大小感覺一逛也是一整天呢～哈哈哈，接著在附近的全家買了一個超級好吃的全家炸雞，這次終於記得拍照了！！我其實對日本的食物都沒什麼太特別的印象，就覺得食物都有在水準之上的好吃，但並沒也驚豔到的那種感覺，也可能是我們沒特別去挑店XD～總之我印象非常深刻的就是他！！！全家炸雞！！！我到此時此刻都還想要再吃個一塊呢～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_krLDibVNoDR8dRjJE507dw.webp"></p><p>小插曲結束後前往下一站</p><h3 id="晴明神社"><a href="#晴明神社" class="headerlink" title="晴明神社"></a>晴明神社</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Y5Jri-KjVgxRzG-wRFlZvQ.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_uz3tp1jkwRagyeG-YHCffA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eBhJor6ZdOm2HxnGzZRCRg.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_W2gwPVoglLcQBYUpCeneQQ.webp"></p><p>晴明我相信有稍微接觸日本文化或歷史的多多少少對這個名字有些許印象，就是歷代最強陰陽師！！連神社的標誌都非常的特殊是一個五角星～裡頭呢不會很大，就小小的一個神社座落在都市的那種感覺，而這邊的御守也非常的特別所以理所當然的就買了一個～</p><p>下一站</p><h3 id="金閣寺"><a href="#金閣寺" class="headerlink" title="金閣寺"></a>金閣寺</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_mfCwqaTuBVel_buO-67g5w.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_NnBwoIfsrTjyN38Z7cslFA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_UO-3B15m7FZEUozfMIgRJg.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_DtC7f3Kl91ozIbfKFpk-tw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_8xmleGH6-7Yx5rCJSn1QHw.webp"></p><p>晴明神社前往金閣寺剛好可以搭公車直達～而金閣寺離地鐵都比較遠所以只能搭計程車或公車前往，公車上人超多超滿的大家都是想去金閣寺，明明這時候時間也不早了～抵達後要再稍微走一段路上去～跟著人群走就對了XD，而金閣寺的門票也是超級特別的，是一個類似符咒所以就好好的保存起來了～進去之後不會馬上看到金閣寺本人，而是一群人XD，往前走一點就可以看到隔著湖遠遠的金閣寺了～不愧是金閣寺金碧輝煌的感覺又不會讓人覺得高調～是個滿不錯的地方～</p><p>到這邊日本的旅途也差不多要結束了～金閣寺逛完後大概也五點了附近的寺廟神社都這個時間點關門，所以我們就又去錦市場吃了好吃的蝦子XD，這個蝦子的記憶點也滿深的，只不過小貴～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_3GKAGh8bl40A2_FqaHUlLw.webp"></p><p>最後一天大概就是準備回家的過程，也沒什麼特別的事情發生了，早餐的雞蛋拌飯很好吃～</p><p>而我在這趟旅途最大的收穫大概就是知道了我，知道了目標，知道了方向，以及該讓自己成為更好的人那種想法跟感覺由此蒙然而生，也感受到今年努力的一個小小回饋，希望明年來的時候就是跟的喜歡的另一半囉～</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> travel </tag>
            
            <tag> japan </tag>
            
            <tag> kyoto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稻荷，清水，日本行！！</title>
      <link href="/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
      <url>/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！</p><h2 id="日本之第七天"><a href="#日本之第七天" class="headerlink" title="日本之第七天"></a>日本之第七天</h2><p>第一站是伏見稻荷神社，一早就搭火車過來，人還超級多的！光是走出車站就花了一些時間呢～這邊也是我此趟日本行最期待的景點之一！京都的空氣真的是有夠新鮮有夠好聞的，在那邊鼻子都不太會過敏呢～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_IS2l1v3yP_dFkwoKQlVNbw.webp"><br><em>我好胖XD</em></p><p>接著就往裡面走著！！開始看到一大堆鳥居，剛好朋友幫我科普了一下這些鳥居是怎麼來的～原來只要有固定的捐錢就能蓋自己的鳥居，然後鳥居就會保佑公司可以發大財～鳥居的後面都會有什麼公司在什麼時間點蓋起來的～未來有機會我也想要蓋一個自己的鳥居呢，哈哈</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eR2pNhdqLPo6LY74XgYqEA.webp"></p><p>接著大概還在路口處不遠的地方，我們看到了一條小小的道路，其他地方人都超多的但就是這條久久才有人往上爬，於是乎在好奇心的驅使下踏上了一條有點硬的道路XD</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LIX6n5oe1To2QHHMl8REqg.webp"></p><p>這條路走進去真的超級漂亮的，而且真的都沒什麼人～竹林再加上早上的晨曦眼睛大滿足後，再吸一口山林間的空氣，真的是非常舒適，也讓我開始喜歡爬山與大自然接觸的感覺～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_R83jG9L-W5XuUejP3V6-UA.webp"></p><p>因為我們走的是不尋常的路，應該是啦不然怎麼那麼少人XD，路途中還看到了一些貓咪和住宅，住在深山裡面感覺應該挺不方便的～途中有一位澳洲人，因為我太累了在中間休息時，想說搭話一下練習我的破英文XD，現在只記得他是澳洲人而已哈哈，稍微尬聊一下，他就接著往上爬了，沒錯我還在休息XD，他跟我們說山頂見囉～see you later～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_isARRMpks4YMXNqOAxH7bA.webp"></p><p>說實在的有些地方真的有夠陡的，雖然說身體好像變輕鬆了，但依舊是拖著在大阪走了五六天的身體來爬山XD，脫離小路之後就開始看的人群了～接著往上爬到山頂的那一刻那個瞬間那個moment，真的是身心舒暢很有成就感，也愛上了爬山的那種感覺～而且今天的天氣真的超好，山上既不熱又不冷，還吹著徐徐的微風，是個超級適合爬山的天氣！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_0TRF5K0ijImxvHieMOVd5g.webp"></p><p>之後我們就開始往下走，此時也接近中午的時間，肚子也開始餓了～大概再往下走一點的地方，看到有在賣吃的就直接進去吃了～吃了鍋燒烏龍麵，不知道為什麼這碗烏龍麵格外的美味！吃完出來後看到了一覽京都的美景～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tBJHPEj95XAk9BBwksMhEQ.webp"></p><p>稻荷山下次來要走走正規的路上去看看～感覺有一些地方是沒有繞道的～</p><p>爬完山後大概是下午的時間，接著準備前往清水寺，但坐火車過去好像有點麻煩，於是我們決定做計程車過去，原本以為會很貴，一直有個既定印象說日本計程車超級貴，但其實實際上搭起來三個人分不會有貴的感覺，重點是很舒服哈哈哈，一上車司機的口音有點重，我多聽了幾次才了解他想要說什麼～大概是說清水寺載上去的話，那邊塞車很嚴重會影響他的工作，所以要我們決定是在商店街下車呢？還是去一條秘徑走路五分鐘過去～當下我覺得很酷所以就跟他說五分鐘的那條！於是乎就被載到山上啦！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Z1-nAinf-MawkGeWW6s85Q.webp"></p><p>滿炫的！第一次來清水寺竟然不是從正門進去XD，果然走沒多久就看到清水寺本寺啦！可以看到這麼遠的地方看也可以看到上面一大堆人～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9NBWhR0N08p6WI8ubkisCg.webp"></p><p>有點可惜的是，十一月初去的依舊是綠油油的一大片～下次希望可以看到紅通通的楓葉，我想那場面一定很壯觀！在這邊看著夕陽也是一個很優的體驗～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LJZifWRIITNoElzAxCka9w.webp"></p><p>接著晚餐去吃了一間很特別的拉麵店，他是一個set的那種，有餐前酒，前菜，主食，甜點～整體來說不錯吃但依舊沒有打敗辰拉麵，不過他店的包廂超級有日劇的感覺的XD，很像是來談生意的那種～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-mOQJVRuXsUyzlNIIpTsOw.webp"></p><p>接著前往錦市場裡面的天滿宮～路上經過了八坂神社，然後走進去花見小路看看，路上還真的看到藝伎，親眼見到的衝擊力頗大的！錦市場逛完後想說去一間居酒屋看看（雖然我不喝酒～）然後吃吃鳥串燒，結果幾乎人都滿滿的～最後找到一間我覺得很好吃的串燒！不過好像太好吃了我完全沒拍照XD，吃完串燒後我們決定沿著鴨川回區住宿的地方，</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_PDZohp3l5L24pLzajrOZ6Q.webp"></p><p>很舒服的一個地方～如果跟女朋友來晚上在這邊散散步聊聊天肯定非常的浪漫XD可惜我是單身狗QQ，下次來一定要跟女友來！</p><hr><h2 id="日本之第八天"><a href="#日本之第八天" class="headerlink" title="日本之第八天"></a>日本之第八天</h2><p>今天的天氣預報說會下雨，果然也在下雨，所以我們本日行程都排在市內居多～第一站前往鐵道博物館～這邊其實超出我的期待不少，有好多可以互動的東西，也有好多可以細部的看看火車內部構造的裝置，甚至可以去按按那些平常不太能按的緊急按鈕XD</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_WHfZjGFEpckp6RUe70q4UA.webp"></p><p>還可以玩玩怎麼樣駕駛火車～頂樓還可以直接看到京都車站的火車進出站的樣子！不得不說日本火車的班次好像有點多XD</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_FpiTgAXDpYVTMTti6wlqwQ.webp"></p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_saqmsjzytS_DkwUpWHfchw.webp"></p><p>最後發現好像有個特別的蒸汽火車可以搭過來，只不過票賣完了XD，可惜了～那個蒸汽火車真的很壯觀！鳴笛的時候可以感受到大地都在震動！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_m7k6CeWGis_Fp_YTrEGUWg.webp"></p><p>之後我們前往錦市場，昨天只有去天滿宮其他地方都沒什麼逛而且時間也晚了大部分都收攤了～再次前往錦市場好好的看看有什麼可以吃～然後就看到我想吃的店！這個蝦子我真的超級喜歡的！那個緊實又飽滿的蝦肉，簡單的鹽調味，可以吃出蝦子本身的鮮甜和彈牙的口感，真的是太讚了！！！！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_E46GYJm9mKBkCxijGOpsqQ.webp"></p><p>之後就是逛街的行程啦，不得不說錦市場真的頗大的，而且有滿多滿特別的店～錦市場逛完後我們就前往京都塔啦～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-ggyH9SLIaoRJQWm2rcD4w.webp"></p><p>京都塔上面是挺壯觀的，不過不怎麼適合拍著，怎麼拍都紅紅或藍藍的XD，接著吃個拉麵就準備回旅館休息了～走路回家會經過東本願寺，晚上看也是很有威嚴的一個寺廟！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_nd1JOLZPxtcCEhBtwk8ERg.webp"></p><p>這個時候我在神社和寺廟中已經買了很多御守和抽了很多籤XD，而這個也變成我的興趣的感覺了，隔天也是去了很多的神社和寺廟，可以說是每個地方都買了！</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> travel </tag>
            
            <tag> japan </tag>
            
            <tag> kyoto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日記みたいなもの</title>
      <link href="/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/"/>
      <url>/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp"></p><p>最近はいろいろな事を試しています、よりいい状態とか、いい健康とか、自分が理想的な人になるために、たくさんのことを慣れるような、習慣をつけるようなことを努力しています。何でこういう考えが生み出すのか、それは主な原因はやはり付き合うの相手が欲しいからだ！その相手が見つかる前には、僕は自分が付き合いたい人にならないければならない！そこで、三つの点を考えました！</p><p>その一、運動</p><p>いい健康、いい体、いい体力、いいスタイル、というとそれほ運動ですね、運動の習慣をつけると定期的に身体の中の悪い、汚いなどな必要がないものを排除ができる、それで夜が眠れやすいし、起きた後もだるさもないし、体力も上がるし、全部いい事ばかり、やらない理由はとこにもないのだ！</p><p>その二、飲食</p><p>現代人は栄養バランスがとても悪いと気がする、特に自分のこと、以前は週に二、三回、それ以上かも、いっぱいの揚げ物とか加工製品を食べていた、それは絶対太るだろう、だから今は、なるべく野菜とかきのことか原型な食べ物を食べるつもり〜</p><p>その三、人</p><p>やば、人と人の接触が多いれば多いほどがいいのだ、理想的な相手が会うためにはたくさんの人に話す、知り合うのが、見つかりやすいと思っているのだ、それに人と話すのも奥が深い学問だ、話題とか、返事とかのも練習が必要だと思っている！</p><p>最後は自分がいい人になるように頑張ろう！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>歷史，城堡，日本行！！</title>
      <link href="/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
      <url>/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD</p><h2 id="日本之第四天"><a href="#日本之第四天" class="headerlink" title="日本之第四天"></a>日本之第四天</h2><p>早上起來搭地鐵前往大阪城！只要知道搭到哪一站就好了，其餘跟著外國人走準沒錯XD，大家的目的地都是大阪城～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4bq1chfZAhAi-iov83Dj-Q.webp"><br><em>一出車站就能看見的～</em></p><p>一走進去大阪城的區域，可以很明顯地感覺到整體的氛圍都不一樣了，都市中有一個那麼大又廣的區域，然後大量的自然融合在歷史的建築中，我超喜歡這種雰囲気的！</p><p>接著往前走一點就可以看到在最外圍的護城河，我第一眼真的是被震驚到，那滂薄重大莊嚴的感覺（明明只是在最外圍XD，不過這照片真的真的沒辦法傳達到現場感受到的那種強大又壯觀的氣勢，下次來大阪我肯定會再來一次把周圍沒逛到的仔細的繞過一遍！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_xTZWNWimlBst8gkXf6Xhwg.webp"><br><em>可以看到天氣不是很好ＱＱ</em></p><p>走進去！！我自己很喜歡拍這種由地上往前看的照片，我也不知道為什麼XD</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VVXKAemCObjS6iZxDs-v4g.webp"></p><p>走進去會經過兩扇超大的門，想想如果以前打仗要突破這些城門想必是非常不容易的事情！接著再繼續走會看到一些建築物，然後是神社！有點後悔沒有去看看這個神社～之後在京都的時候真的是愛上了神社，好喜歡裡面的御守！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Wtd9FeCA9lW0CcCgLSV0Nw.webp"></p><p>再來是內圈的護城河，護城河有兩圈！！可以從橋的這個門看到大阪城本城啦！！！整個氣勢都不一樣跟周圍的建築物比起來很明顯的感覺出來一種高貴奢華感～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_DT1BP9jsDFw5BYyBiHR2xQ.webp"></p><p>我當時有一個想法，我是敵人跑到這邊我也已經累了XD，這邊離一開始那邊其實有一點距離了～</p><p>接著當然是大阪城本城啦！！！當下看到真的是非常的壯觀，不只城堡本體，就連下面那些地基的石頭的覺得很驚豔，古時候到底是怎麼把這樣壯觀龐大的城堡給建立起來的～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_wwUbkicoHr-7F_ab21sQNw.webp"></p><p>進去裡面有很多樓層，頂樓可以感受到彷彿城主在觀看自己的領地那種感覺，不過周圍的景觀綠色出去一點就是現代的高樓大廈了～以前的話估計不可能有比大阪城還高的建築物吧！</p><p>依序往下走可以看到大阪城的歷史，和一些日本的歷史人物的一生，我自己是對日本歷史不太熟悉啦，不過裡面講故事的方式我覺得非常的特別！懂日文的話非常推薦進去看看，還有些樓層會有一些歷史的古物，武士刀、當時的書卷、裝備等等的，還有大阪城的更早以前的縮小版模型，我好喜歡看那些模型！！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_P_Ymz8t6Qr3ISAOF_9JoDA.webp"></p><p>接著呢本來打算去做環湖的船，但沒事先做功課，好多人呀！，要等大概兩個小時，而且中間開始飄雨了，就沒有搭船了～又留下了一個遺憾呢～</p><p>最後一張跟大阪城說再見的照片～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eCPXSn02oUMjafCswj9xAw.webp"></p><p>我真的好喜歡這樣的歷史建築（特別是日本的）～</p><p>接著搭地鐵前往下一站今昔館～時間已到中午先吃個飯吧！到天神橋筋，本來想吃的拉麵店沒開，只好在商店街找一間囉！</p><p>好吃的醬油拉麵！！但心目中的第一名（辰拉麵）沒有被更新掉就是了</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_MOWZtOkLBNYHA40ySEJ3Dg.webp"></p><p>接著前往今昔館～今昔館裡面有以前的歷史建築，像是他們的商店還是住宅等等的，還有我最喜歡的縮小模型！！裡面也是拍了很多照逛了個過癮，只不過身體開始覺得累了，肯定是因為外面在下雨！！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Xc925K98toPQg8uRAgcF8A.webp"></p><p>之後前往梅田逛街，雖然天氣不好，但在大阪走路依然感覺很舒服～不愧是日本之行人的天堂！！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H-Iqq5qD0gSYEpBYBn6xvQ.webp"></p><p>就這樣結束了，充滿歷史文化最後轉變到現在都市的一天～</p><hr><h2 id="日本之第五天"><a href="#日本之第五天" class="headerlink" title="日本之第五天"></a>日本之第五天</h2><p>這天很短，因為我覺得該讓身體休息一下準備京都的神社之旅！！所以早上在天下茶屋附近繞了一圈，看看這邊居民的生活，也看看大阪比較外圍的景色～悠閒的走在路上，漫無目的的看看日本的房子也是不錯的體驗！中間還路過一間看起來很像新開的超市～買了唐揚雞，摁～我果然喜歡這種軟軟的唐揚雞，這跟我之前大學在高雄的一間唐揚雞很像，我非常喜歡！！雖然吃完之後又跑去全家買了全家炸雞XD，依舊忘了拍照哈哈哈</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_TNy6Q2kS9Pnxu7sriRBvkg.webp"></p><p>接著就回住宿的地方睡了個午覺，後面覺得其實這樣中間差一天輕鬆的休息也不錯呢～(明明就是體力太差了XD，回去之後要好好鍛練了～)</p><hr><h2 id="日本之第六天"><a href="#日本之第六天" class="headerlink" title="日本之第六天"></a>日本之第六天</h2><p>今天是前往京都的日子，不過在那之前我們決定去大阪車站逛一下街～這邊的現代化都市感就特別的重了，雖然第四天有來過一次，不過下雨跟晴天的感覺差挺多的～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_1YCZGv5DY8kKPqpfiI-BHQ.webp"></p><p>又去逛了寶可夢中心、JUMP、卡普空等等的周邊～我真的好喜歡百變怪！！想要蒐集百變怪的周邊了～要不是只有I14的手機殼，不然我就買了手機殼回家再買I15（Ｘ</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VAQzRZ_MzA_z1HAP7_XXOQ.webp"><br><em>你看！他在對你笑耶！！</em></p><p>接著中午去吃了一間吃到飽，螃蟹就算了，吃到飽種類不多，整體都挺好吃的，最令我驚豔的是炒青菜！！好久沒吃到炒青菜了而且還超好吃，吃了好幾盤呢～而且我還怕自己吃太飽想睡覺哈哈，因為下午還有其他地方要逛，吃太飽也不會想走路只想躺平～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Y-0dexAlFhMNhJyzya_ctw.webp"><br><em>好吃！只不過爐烤豬排有點失望ＱＱ跟我想的不一樣～</em></p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_KmOZmndV_0GSDfDtD4DpvQ.webp"></p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_D1veRzeIf2s0c_09dDPnCg.webp"></p><p>日本真的是怎麼拍都好看，每次回顧都覺得照片拍太少了～這夕陽也是挺好看的！！</p><p>接著就前往京都了～搭個火車人好多，大概40分鐘就到了京都～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_esjxHxlcy0RF1AcF8Rns4w.webp"></p><p>旅程過了一半了，突然覺得時間漸漸的加速了～好希望再來十天XD</p><p>不過京都的路走起來就沒有大阪舒服～人行道有些整修的痕跡～</p><p>晚餐吃やよい軒定食就是好吃！白飯就是讚！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_jmBvsIWgIxnlGaevXe6Uig.webp"></p><p>如果台灣有像這樣的定食且價格合理的話我肯定吃爆！還有個前提是白飯要跟日本的一樣好吃XD</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> travel </tag>
            
            <tag> osaka </tag>
            
            <tag> japan </tag>
            
            <tag> kyoto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首次，出國，日本行！！</title>
      <link href="/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
      <url>/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="わくわく"><a href="#わくわく" class="headerlink" title="わくわく"></a>わくわく</h2><p>從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的嗎（X</p><p>走在日本的街道，聽著周圍都是日文的環境，大口吸著新鮮的空氣，品嚐最道地的日本拉麵，就在今年2023&#x2F;11終於實現了我做了25年的夢！<br>至今回來了兩個禮拜還是意猶未盡，甚至想直接住在那邊了XD</p><p>久久沒寫文章了，自從上次參加完ithome的鐵人賽後就沒再寫過了～連續三十天真的是有夠硬，好佩服那些每天都能輸出的前輩！好了回歸正題，今天就來好好的回顧我在日本十天的自由行～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eKQh7KF3N-dGvma2bUxYYw.webp"><br><em>桃園機場，人生首次離開台灣！</em></p><p>在去日本的前兩個禮拜，我突然重感冒！喉嚨痛到不行外加腳趾甲溝炎，我真的是非常擔心我真的能去日本嗎，機票都買了住宿都訂好了，甚至是行程都大致排好了，我期待了三四個月就要這樣泡湯了嗎！！！</p><p>而且看了好幾位醫生和醫院喉嚨疼痛感依舊讓我晚上都沒睡好，隔天起床沒精神就算了還很痛，我只好向公司一直請假，請了整整一個禮拜～基本上都躺在家裡完全不想動！</p><p>但就這樣過了一個禮拜後，奇蹟似的突然痊癒了，這時離去日本已經剩下5、6天，感謝我的身體和意志力讓我可以康復～雖然因為感冒的關係體力貌似消耗的極大，導致剛到日本的前幾天其實都累累的，但我那興奮的又悸動的心情好像讓我腎上腺素爆發，基本上精神都是超過200%的！撐起來！</p><hr><h2 id="日本之第一天"><a href="#日本之第一天" class="headerlink" title="日本之第一天"></a>日本之第一天</h2><p>到了住宿的地方，放完行李（我只有帶一個小背包，其餘都打算直接在日本買，哈哈哈）就走朋友走在晚上八點的日本街道，思考著要吃什麼來開啟這趟日本之旅呢！就這樣走到了一間看起來非常日式餐館的店，少少的幾個座位都是靠著吧台，老闆就在面前調理，看著既熟悉又陌生的日文菜單，跟老闆注文了拉麵跟焼きめし，原本以為不會太大份，結果來了個大的，吃到非常飽哈哈，就這樣聽著旁邊熟客跟老闆的互動，吃完了來日本的第一餐，有種既熟悉又陌生的味道，但真的很感動！</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_b6Mr-Z-9FDMKhaSLZVRfzw.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_ct864Ox3blu_Auq-opSeyQ.webp"></p><p>吃飽後，跑到了附近的超市購買了一些生活用品和明天的早餐，我買了一個梅子飯糰，接著呢！走到我非常期待的便利商店，全家！沒錯！我要吃全家炸雞了ファミチキ，我只能說超級無敵好吃，以前都聽著大家說好吃好吃，一直很好奇到底有多好吃，結果真的出乎意料的好吃，光是看著聞著那眼淚都快從嘴角流出來了XD，不過太快吃完忘記拍照了～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_2NFkPqtcCSxKh35yGz5Q6A.webp"><br><em>只有拍全家，食物已消失XD</em></p><p>就這樣踏入日本的第一天結束了，實際上只有在外面走2、3個小時而已吧，期待明天的行程！！</p><hr><h2 id="日本之第二天"><a href="#日本之第二天" class="headerlink" title="日本之第二天"></a>日本之第二天</h2><p>前進黑門市場！本來以為會吃很多東西，但可能昨天那個晚餐吃太飽了，再加上早上吃了一個飯糰（梅子飯糰也是有夠好吃），有挺多想試試看的食物但就吃一點而已，稍微可惜了一些些，不過有吃到和牛串，感想是我果然不喜歡吃牛XD，不過如果有和牛燒肉或牛排我應該還是會想嘗試看看，畢竟先試了再說～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HdajNFINc3kXtr5HXuMAhg.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HvvNNBPW8xA83KXdd8n12Q.webp"></p><p>逛完黑門市場後就一路走到道頓崛，不得不說日本真的非常的行人友善，走起來特別的舒服，街景也特別的優美柔和且整體的融合感看了就是舒暢，說到道頓崛，我就是個觀光客肯定要來看グリコ，到這邊的時候其實還算早，就一大堆人好恐怖！</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_bzrwVPPCSMG_kR_IjKVUZQ.webp"></p><p>在這邊逛了唐吉，拍了好多張照片，午餐吃了炸豬排，日本的白飯真的是非常的好吃，來了兩天我真的可以為了吃白飯搬到日本去XD，不過我們這次行程真的都只有排大地標，其餘真的是很隨性，都是到了現場才決定要做什麼要逛什麼～有種到處探索的感覺我很喜歡～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9pexDXd1RLMvAm0AEKFhHA.webp"></p><p>吃完豬排後，前往下個地方～下個地方是朋友說他喜歡的明星剛好來大阪辦活動，於是我們就決定去看看，中間路過了アメリカ村是一個滿特別的地方，整體的氛圍感不像在日本但又有日式的感覺，一如往常的人依舊非常多XD，還有一台特別的車播放著音樂在這周邊徘徊</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_GNjDlD9nnup759VZnh0MBQ.webp"></p><p>之後走到了一處比較像住宅區的地方，有一個大公園裡面很多家長帶著小孩子在玩耍～而我們的目的地就在這個公園的旁邊～這邊我都忘記拍照了，太可惜了QQ</p><p>走著走著很快地就來到晚上了，真的是繞了很多地方，可是我沒有習慣觀光客模式，都一直忘記拍照，太可惡了！！在前往難波車站的路上看到了一台大牛（我也想要一台XD）然後還有一棟很漂亮的建築，雖然我到現在還不知道他是什麼XD</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_gFs5P9ifQ6zYC6UqovR0IA.webp"></p><p>晚餐呢就在住處附近吃了美式的家庭餐廳，我自己是覺得還不錯，特別是漢堡排很好吃！不過這樣吃下來，發覺日本不容易吃到熟的蔬菜，都是生菜居多～這兩天已經感覺到蔬菜含量不足了XD</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4nYzzhAPqnPcBE2hiPdoMQ.webp"></p><p>就這樣結束了第二天在日本的旅遊～晚上回到家，買了一些貼腳的，希望明天可以再繼續走一整天XD，已經幾年沒運動的我，旅遊的前幾天身體一直在跟我哭訴的感覺，哈哈，只不過都被我這興奮的感覺和意志力給壓過去了，晚上還是得好好照顧一下他們，多貼幾片，明天還要靠你們呢！</p><hr><h2 id="日本之第三天"><a href="#日本之第三天" class="headerlink" title="日本之第三天"></a>日本之第三天</h2><p>一早就跑去日本橋，逛逛動漫的周邊等等的，不過我好像已經過了這個年紀了，我是沒有特別有興趣，只是覺得看看還行，不過要買的話很容易被現實層面的自己給制止，畢竟買了也沒地方放呀！</p><p>但中午是我滿期待的女僕咖啡廳，從來沒踏入過女僕咖啡廳，一直很想體驗看看那種感覺會尷尬的氛圍XD，沒錯學日文也是為了好好的跟女僕聊天（X</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_EP8DZnfMBc8k8mVg5W1H6Q.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_iGeFKg0o1Cg_wzOKJRbQYw.webp"></p><p>整體的感覺我還滿喜歡的，而且有種對自己的日文認可的那種感覺，可以好好的跟女僕聊聊天，可能也是我第一次用日文跟日本人聊天吧！只能說好險再來之前有跟朋友辦每個禮拜一次的日文讀書會，練習說說日文，不然我畢業後到現在完全沒用過真的是都快忘記怎麼講了～下次來日本旅遊，肯定會想再來看看的！</p><p>日本橋逛了很多間店，只不過我都偏走馬看花，又忘記開啟觀光客模式瘋狂拍照了，殘念！</p><p>接著就前往了心齋橋，那邊有寶可夢中心和吉卜力等等的店面，這邊真的挺好逛了，有好多相關的周邊，但本來打算要吃敘敘苑，沒訂位又不餓就沒吃了，小缺憾～不過心齋橋的人也是爆多，可以看到韓國，台灣，和日本其他地方來的觀光客，歐美反而比較少在這邊看到，不過這樣的商店街真的挺不錯的，最後來看看大龍貓和不要吃太胖還有無臉男XD</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H0_3Zv26qYbqefTXtY2cVw.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_lVqbpygbXXphhgj-91EnCw.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rOjg2uHcmr3yY3UdM7FujQ.webp"></p><p>繞著繞著就接近晚上了，心齋橋走回難波車站會經過道頓崛又拍了晚上版的XD，人更多了！</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_crIo2zjxvuhmwx9Rmtg_xA.webp"></p><p>第三天大概就這樣結束了，腳又酸又痛的XD趕緊回家多貼幾片！</p><p>日本的前三天，就這樣過完了，基本上都是觀光的地方，啊我就觀光客當然去觀光景點XD，有幾點比較可惜的是沒有去大阪知名的神社逛逛，不過這也是去京都後才有的感想XD</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> travel </tag>
            
            <tag> osaka </tag>
            
            <tag> japan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day30. 最後的一天，鐵人賽的結束，也是下一場旅途的開始～</title>
      <link href="/2023-10-15Day30.%E6%9C%80%E5%BE%8C%E7%9A%84%E4%B8%80%E5%A4%A9%EF%BC%8C%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%9A%84%E7%B5%90%E6%9D%9F%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%8B%E4%B8%80%E5%A0%B4%E6%97%85%E9%80%94%E7%9A%84%E9%96%8B%E5%A7%8B%EF%BD%9E/"/>
      <url>/2023-10-15Day30.%E6%9C%80%E5%BE%8C%E7%9A%84%E4%B8%80%E5%A4%A9%EF%BC%8C%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%9A%84%E7%B5%90%E6%9D%9F%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%8B%E4%B8%80%E5%A0%B4%E6%97%85%E9%80%94%E7%9A%84%E9%96%8B%E5%A7%8B%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="結束"><a href="#結束" class="headerlink" title="結束"></a>結束</h2><p>鐵人賽第三十天！<br>老實說我從來沒有想過我能寫完這三十天，雖然中的有很多地方其實我本來預期是一天要寫完的ＸＤ<br>不過在寫的過程中，因為只有下班的時間，所以有時候就稍微偷了個懶～</p><h2 id="起頭"><a href="#起頭" class="headerlink" title="起頭"></a>起頭</h2><p>一開始呢，我是抱持著好好的重新開始看看django怎麼寫比較正確，參考github上面其他人怎麼規劃django的資料夾等等，後面一個不小心在好奇心的驅使下就跑進去了原始碼裡面，一發不可收拾，就決定好好的來看看平常自己在使用django的時候裡面究竟發生了什麼事！總是要熟悉自己的工具的啦！</p><h2 id="過去"><a href="#過去" class="headerlink" title="過去"></a>過去</h2><p>其實我在去年2022年底的時候就有嘗試看看閱讀django的原始碼，然而那時的我真的是完全看不懂，最直接的就是連magic method是什麼都不知道～甚至連python和OO物件導向都沒有很明白其中的概念～</p><h2 id="成長-轉折點"><a href="#成長-轉折點" class="headerlink" title="成長&#x2F;轉折點"></a>成長&#x2F;轉折點</h2><p>而在今年年初2023年1月，我偶然間來到了『<em><strong>水球軟體學院</strong></em>』，在這之前我完全不知道公司外的工程師都在做什麼？要變強需要什麼技能？加入後，在這邊耳濡目染，環境的渲染下，我開始知道寫程式需要做什麼，需要學習什麼，要如何跟其他工程師合作等，受益良多！接著報名水球的『<a href="https://waterballsa.tw/design-pattern">軟體精通之旅</a>』課程後，我寫程式的能力可以說是大幅度的提升了，也開始厭惡自己以前的codeＸＤ這也奠下了我看django原始碼的基礎能力之一！</p><h2 id="突飛猛進"><a href="#突飛猛進" class="headerlink" title="突飛猛進"></a>突飛猛進</h2><p>隨著參加學院的活動，開始聽見看見許多知識，也自己開始吸收轉化練習，最後練習輸出(跟其他人分享學到的知識或者是寫成文章等)，回顧這快一年的收穫可以說是滿滿的，雖然自己還是有卡住之後在谷底思考了幾個禮拜，但之後也撥開迷霧能順利地向前進！這邊很常聽到的名詞大致為：DDD，CA，TDD，ATDD，design pattern，OOAD，Event Storming，Example Mapping，SQL問題，不同語言優勢，甚至是股票等等，許多有趣的知識和活動可以參與，也豐富了我下班學習的生活～雖然我很多東西都還只處在聽過的程度，還需要好好的練習實作才有辦法讓自己更上一層！</p><h2 id="未來規劃"><a href="#未來規劃" class="headerlink" title="未來規劃"></a>未來規劃</h2><p>鐵人賽的結束，也是下一場旅途的開始</p><p><img src="/images/2023-10-15Day30.%E6%9C%80%E5%BE%8C%E7%9A%84%E4%B8%80%E5%A4%A9%EF%BC%8C%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%9A%84%E7%B5%90%E6%9D%9F%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%8B%E4%B8%80%E5%A0%B4%E6%97%85%E9%80%94%E7%9A%84%E9%96%8B%E5%A7%8B%EF%BD%9E/201629058QFzSsavp2.jpg"></p><p>我再來的規劃是想要好好的打穩軟體基礎<br>學學DSA和OS，刷刷題～<br>接著在接觸學習Java，想要進去現階段理想的公司！<br>也有計畫上91的課程，提升自己的code速度和熟悉IDE！</p><p>時間上允許的話我對python的原始碼也是頗有興趣ＸＤ<br>不過現階段還是以DSA和OS和Java為主，畢竟快餓死了QQ</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day29. test指令的過程和unittest的運作！</title>
      <link href="/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/"/>
      <url>/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我們昨天稍微寫了一些test來測試我們的Todolist，那當中下了很多次djang去run test的指令<br>‘python manage.py test’<br>今天就來看看這個指令做了些什麼事吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>先來稍微看一下python unittest怎麼寫，因為django的test也是建立在unittest之上的</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905nBsGOcQ5HT.png"></p><p>接下來～<br>老樣子的到core management commands下的test.py看handle function</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905oQLpPRJUJR.png"></p><p>第一行的TestRunner從settings過來的，我想大家也都很熟悉了直接到<br><code>django.conf.global_settings.py</code>下找到TEST_RUNNER</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905hkxNIJP3L1.png"></p><p>然後就可以找到DiscoverRunner</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905FSkBG1g9Hi.png"></p><p>接著往下看</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/201629058dv4ldE2n4.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905WL6b3ktdcw.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905xkHOegnF7n.png"></p><p>這邊可以看到他有setup環境 db等等，我們看看最重要的run test部分～</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905iIsM9rGw9B.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905bbb2qD2BzV.png"></p><p>這邊的runner就是unittest中的runner了</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905ADLjnaOD4q.png"></p><p>而這個run就看最重要的地方吧</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905L8CNFvlXj7.png"></p><p>這邊的test就是我們剛剛傳進來的suite<br>那我們就來看看suite被call的時候會做什麼事吧！<br>看到call就要聯想到<code>__call__</code></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905Zsm0Th9skh.png"></p><p>再看run</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/201629053ZkKg4a2C9.png"></p><p>這邊就可以看到test運行前呢會先觸發class setup，結束會tear down～<br>然後接著看當中的test</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905W51CZM0UsG.png"></p><p>一樣<code>__call__</code></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905MAvnHfbiht.png"></p><p>再往下</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905kZ56skB5V1.png"></p><p>這邊也處理了很多東西<br>當中的<code>super.__call__(result)</code>就不多看了，裡面也是滿多東西ＸＤ</p><p>最後就來畫個久久沒畫的圖吧～</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905XwFKOoDtUN.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905OEG60FhfDp.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>test也是博大精深的學問，其實有時候光是想test要怎麼寫就花了一些時間，但有test的保護下自己交付出去的程式碼也相對能有信心！最後在好奇心的驅使下去看了django test的過程～起初是想要了解setUp, setUpClass, tearDown, tearDownClass的關聯，後面就把test整個巡過了一遍，挺有趣的！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day28. 寫些test來測試我們的網頁！</title>
      <link href="/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/"/>
      <url>/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>test測試，有了測試的保護以後要修改程式就比較不用怕出太多bug！<br>而測試寫熟了或測試的方式用熟了，還能挑戰TDD的開發方式，先寫測試在寫程式</p><blockquote><p>紅燈 -&gt; 綠燈 -&gt; 重構</p></blockquote><p>先寫測試也有一個好處是可以明確的自己知道專案進度如何，像我現在這樣回頭寫測試就會像為了寫測試而去測試的那種感覺，測試最重要的目的是保護我們的程式碼如期望中的運行，而這個期望就是我們最想要交付的東西～</p><p>而我在之前做個專案中都沒有寫過django的test，就讓我來研究研究要怎麼寫django的test吧！<br><strong>我這邊的測試都是寫完後面在補的唷～改天再來試試看TDD！</strong></p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>首先我們先來列下我們要測試的項目</p><ol><li>測試views.index有正確渲染index.html，並回傳http status 200</li><li>測試views.api有正確回傳所有Todo data（預先setUp的資料）</li><li>測試views.add有如期新增資料</li><li>測試views.update有如期更新資料</li><li>測試views.delete有如期刪除資料</li></ol><h3 id="項目一"><a href="#項目一" class="headerlink" title="項目一"></a>項目一</h3><p>首先就先來寫第一個test 測試views.index吧<br>我們直接修改在todoapp中的tests.py</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, Client<span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:        self.client = Client()            <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_index</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">&quot;/&quot;</span>)        self.assertEqual(res.status_code, <span class="hljs-number">200</span>)        self.assertTemplateUsed(<span class="hljs-string">&quot;index.html&quot;</span>)</code></pre><p>再來下指令<code>python manage.py test</code><br>就會看到</p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905ltCiadFf1S.png"></p><p>內容大致為</p><ul><li>找到test</li><li>建立test用database</li><li>run test</li><li>結果</li><li>刪掉test用database</li></ul><p>明天就決定來看看test究竟做了什麼吧！</p><h3 id="項目二"><a href="#項目二" class="headerlink" title="項目二"></a>項目二</h3><p>要測試api有沒有回傳所有data，要先塞給他預設的data</p><pre><code class="hljs py">data = [    &#123;        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>,        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;test 001&#x27;</span>,        <span class="hljs-string">&#x27;complete&#x27;</span>: <span class="hljs-literal">False</span>    &#125;,    &#123;        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>,        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;test 002&#x27;</span>,        <span class="hljs-string">&#x27;complete&#x27;</span>: <span class="hljs-literal">True</span>    &#125;,]<span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:        <span class="hljs-comment"># 新增資料</span>        Todo.objects.create(title=data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;title&#x27;</span>], complete=data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;complete&#x27;</span>])        Todo.objects.create(title=data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;title&#x27;</span>], complete=data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;complete&#x27;</span>])                <span class="hljs-comment"># 建立client</span>        self.client = Client()            <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_all_todos</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">&quot;/api/&quot;</span>)        res_datas = json.loads(res.content)[<span class="hljs-string">&#x27;data&#x27;</span>]        self.assertEqual(res.status_code, <span class="hljs-number">200</span>)        self.assertEqual(res_datas[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;title&#x27;</span>], data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;title&#x27;</span>])</code></pre><p>這邊我先setUp了我上面定義好的data<br>接下來就去看看我們寫的views.py回傳什麼去處理，我們回傳的事JsonResponse所以需要先用json.loads處理後就是普通的data在跟我們原本定義的做比較</p><p>最後下<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905uItp9j75cc.png"></p><p>沒有報錯，收工～</p><h3 id="項目三"><a href="#項目三" class="headerlink" title="項目三"></a>項目三</h3><p>這邊要test的是新增，就來寫吧！<br>這邊要稍微注意，post過來的data型別</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add_new_todo</span>(<span class="hljs-params">self</span>):        test_data = &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;test 003&#x27;</span>&#125;        res = self.client.post(                <span class="hljs-string">&quot;/api/add/&quot;</span>,                 json.dumps(test_data),                 content_type=<span class="hljs-string">&quot;application/json&quot;</span>            )        res_data = json.loads(res.content)        self.assertEqual(res_data[<span class="hljs-string">&#x27;todo_title&#x27;</span>], test_data[<span class="hljs-string">&#x27;title&#x27;</span>])        self.assertEqual(res_data[<span class="hljs-string">&#x27;complete&#x27;</span>], <span class="hljs-literal">False</span>)</code></pre><p>新增完後一樣下<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905VEbfAY0cGh.png"></p><p>看到OK後就完成</p><h3 id="項目四"><a href="#項目四" class="headerlink" title="項目四"></a>項目四</h3><p>再來是test update complete的部分，直接寫吧～</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_update_todo</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">f&quot;/api/update/<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>)        res_data = json.loads(res.content)        self.assertEqual(res_data[<span class="hljs-string">&#x27;todo_id&#x27;</span>], data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>])        self.assertEqual(res_data[<span class="hljs-string">&#x27;complete&#x27;</span>], <span class="hljs-literal">True</span>)</code></pre><p>測試修改預設data的第一筆資料是否complete<br>寫完一樣下<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905jplmyqR6ip.png"></p><p>OK下面一位</p><h3 id="項目五"><a href="#項目五" class="headerlink" title="項目五"></a>項目五</h3><p>test delete，開始</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_delete_todo</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">f&quot;/api/delete/<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>)        res_data = json.loads(res.content)        self.assertEqual(res_data[<span class="hljs-string">&#x27;todo_id&#x27;</span>], data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>])        todo = Todo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>])        self.assertEqual(<span class="hljs-built_in">list</span>(todo), [])</code></pre><p>這邊我很簡單的去測試找條件為我們刪除的id還存不存在<br>寫完一樣<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905q0SfdyIO8e.png"></p><p>OK大功告成～</p><p>那我這邊的測試項目都很簡單沒有用到太特別的框架或套件 e.g. seleninum or pytest等<br>做為我第一次寫test的開頭先簡單一點吧～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>測試這條路好像有很多東西可以玩，而且就寫測試這一點為出發點下去構想程式怎麼設計也是一個滿不錯的體驗，好的測試可以讓自己在開發的時候，像是完成一項一項的任務然後得到很多回饋感，再搭配CICD建立起來測完就推上去，之後再看自己git graph肯定會有滿滿的滿足感！之後的項目也要好好的寫測試！</p><p>完整的程式碼<br><a href="https://github.com/m124578n/IronMan_ToDoList/blob/main/todolist/todoapp/tests.py">https://github.com/m124578n/IronMan_ToDoList/blob/main/todolist/todoapp/tests.py</a></p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day27. 首先先來簡單做個Todolist頁面～</title>
      <link href="/2023-10-12Day27.%E9%A6%96%E5%85%88%E5%85%88%E4%BE%86%E7%B0%A1%E5%96%AE%E5%81%9A%E5%80%8BTodolist%E9%A0%81%E9%9D%A2%EF%BD%9E/"/>
      <url>/2023-10-12Day27.%E9%A6%96%E5%85%88%E5%85%88%E4%BE%86%E7%B0%A1%E5%96%AE%E5%81%9A%E5%80%8BTodolist%E9%A0%81%E9%9D%A2%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快要結尾了，稍微喘口氣，來做個簡單的Todolist頁面吧！<br>會參考以下兩篇文章進行</p><ul><li><a href="https://www.youtube.com/watch?v=3vfum74ggHE&list=PLrgX5bzJJljqMbq7msQX4nzTtV3kqZOST&index=20&ab_channel=PatrickLoeber">I built the same app 3 times | Which Python Framework is best? Django vs Flask vs FastAPI</a></li><li><a href="https://hackmd.io/@Heidi-Liu/note-fe302-review">前端框架 - 先別急著學 React</a></li></ul><p>稍微以這兩個為基底下去修改和融合～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先先建立django project 和 app，然後把一些基礎的設定弄完再做一個簡單的hello world吧！相信大家都很熟了～</p><ol><li>先下<code>django-admin startproject todolist</code></li><li>然後進去<code>cd todolist</code></li><li>接著下<code>python manage.py startapp todoapp</code></li><li>再來呢修改<code>settings.py</code><pre><code class="hljs py"><span class="hljs-comment"># 在installed apps裡面加上剛剛新增的app name</span>INSTALLED_APPS = [    <span class="hljs-string">&#x27;todoapp&#x27;</span>,    <span class="hljs-comment"># ...</span>]<span class="hljs-comment"># templates 中的 dirs 加上</span>TEMPLATES = [    &#123;        <span class="hljs-comment"># ...</span>        <span class="hljs-string">&#x27;DIRS&#x27;</span> : [<span class="hljs-string">&#x27;templates&#x27;</span>],        <span class="hljs-comment"># ...</span>    &#125;]</code></pre></li><li>建個templates資料夾備用<code>mkdir templates</code>，在裡面丟個<code>index.html</code>備用</li><li>在todoapp裡面新增一個<code>urls.py</code>內容如下<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),]</code></pre></li><li>todoapp裡面的<code>views.py</code>稍微加上<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;hello&#x27;</span>: <span class="hljs-string">&#x27;world&#x27;</span>&#125;)</code></pre></li><li>再來在todolist的urls.py加上<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, includeurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;todoapp.urls&#x27;</span>))]</code></pre></li></ol><p>如此一來<code>python manage.py migrate</code> 後 <code>python manage.py runserver</code>，就能看到json格式的hello world囉～</p><h3 id="開始新增todo"><a href="#開始新增todo" class="headerlink" title="開始新增todo"></a>開始新增todo</h3><ol><li>在todoapp中的<code>models.py</code>加上<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(models.Model):    title=models.CharField(max_length=<span class="hljs-number">350</span>)    complete=models.BooleanField(default=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.title</code></pre></li><li>接著下<code>python manage.py makemigrations</code> 後 <code>python manage.py migrate</code></li><li>修改todoapp下的<code>views.py</code><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<span class="hljs-keyword">from</span> django.views.decorators.http <span class="hljs-keyword">import</span> require_http_methods<span class="hljs-keyword">from</span> django.forms.models <span class="hljs-keyword">import</span> model_to_dict<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Todo<span class="hljs-keyword">import</span> json<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">api</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-built_in">list</span>(todos.values())&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    body = request.body.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    body = json.loads(body)    title = body.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete, <span class="hljs-string">&quot;todo_title&quot;</span>: todo.title&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id&#125;)</code></pre></li><li>接著是todoapp下的<code>urls.py</code><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&quot;index&quot;</span>),    path(<span class="hljs-string">&#x27;api/&#x27;</span>, views.api, name=<span class="hljs-string">&quot;api&quot;</span>),    path(<span class="hljs-string">&#x27;api/add/&#x27;</span>, views.add, name=<span class="hljs-string">&quot;add&quot;</span>),    path(<span class="hljs-string">&#x27;api/delete/&lt;int:todo_id&gt;&#x27;</span>, views.delete, name=<span class="hljs-string">&quot;delete&quot;</span>),    path(<span class="hljs-string">&#x27;api/update/&lt;int:todo_id&gt;&#x27;</span>, views.update, name=<span class="hljs-string">&quot;update&quot;</span>),]</code></pre></li><li>最後在把我們一開始新增的<code>index.html</code>修改<pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Todo App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.7.0.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;get_all_list()&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-todo&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button btn-add&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> &gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todos&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">let</span> state = &#123;</span><span class="language-javascript">                <span class="hljs-attr">todos</span>: []</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)</span><span class="language-javascript">                    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                        response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                            state = &#123;</span><span class="language-javascript">                                <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;</span><span class="language-javascript">                                    <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,</span><span class="language-javascript">                                    <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,</span><span class="language-javascript">                                    <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span></span><span class="language-javascript">                                &#125;]</span><span class="language-javascript">                            &#125;</span><span class="language-javascript">                        &#125;);</span><span class="language-javascript">                        <span class="hljs-title function_">updateState</span>(state)</span><span class="language-javascript">                    &#125;)</span><span class="language-javascript">                &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-comment">// 更新 state</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;</span><span class="language-javascript">                state = newState;</span><span class="language-javascript">                <span class="hljs-title function_">render</span>()</span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// state =&gt; UI</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">                <span class="hljs-comment">// 先把畫面清空</span></span><span class="language-javascript">                $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();</span><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)</span><span class="language-javascript">                $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(</span><span class="language-javascript">                <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span></span><span class="language-javascript">                state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><span class="language-javascript">                );</span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// Todo component</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span></span><span class="hljs-string"><span class="language-javascript">                &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span></span><span class="hljs-string"><span class="language-javascript">                    &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                    <span class="hljs-subst">$&#123;Span(&#123;</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                    &#125;)&#125;</span></span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                    <span class="hljs-subst">$&#123;Button(&#123;</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                    &#125;)&#125;</span></span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                    <span class="hljs-subst">$&#123;Button(&#123;</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                    &#125;)&#125;</span></span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                &lt;/div&gt;</span></span><span class="hljs-string"><span class="language-javascript">                `</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// Button component</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span></span><span class="hljs-string"><span class="language-javascript">                &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span></span><span class="hljs-string"><span class="language-javascript">                `</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// 新增 todo</span></span><span class="language-javascript">            $(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="language-javascript">                <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();</span><span class="language-javascript">                <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;</span><span class="language-javascript">                $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span><span class="language-javascript">                axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>, </span><span class="language-javascript">                    &#123;</span><span class="language-javascript">                        <span class="hljs-string">&quot;title&quot;</span>: content</span><span class="language-javascript">                    &#125;,</span><span class="language-javascript">                    &#123;</span><span class="language-javascript">                        <span class="hljs-attr">headers</span>: &#123; </span><span class="language-javascript">                        <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,</span><span class="language-javascript">                        &#125;,</span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                )</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                    todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]</span><span class="language-javascript">                    complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    <span class="hljs-comment">// 更新 state</span></span><span class="language-javascript">                    <span class="hljs-title function_">updateState</span>(&#123;</span><span class="language-javascript">                        <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;</span><span class="language-javascript">                            <span class="hljs-attr">id</span>: todo_id,</span><span class="language-javascript">                            <span class="hljs-attr">content</span>: title,</span><span class="language-javascript">                            <span class="hljs-attr">isDone</span>: complete</span><span class="language-javascript">                        &#125;]</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;);</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// 刪除 todo</span></span><span class="language-javascript">            $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><span class="language-javascript">                <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));</span><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                    d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    <span class="hljs-title function_">updateState</span>(&#123;</span><span class="language-javascript">                        <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;);</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// 未完成 -&gt; 已完成</span></span><span class="language-javascript">            $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><span class="language-javascript">                <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));</span><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                    u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    <span class="hljs-title function_">updateState</span>(&#123;</span><span class="language-javascript">                        <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                            <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;</span><span class="language-javascript">                            <span class="hljs-keyword">return</span> &#123;</span><span class="language-javascript">                            ...todo,</span><span class="language-javascript">                            <span class="hljs-attr">isDone</span>: complete</span><span class="language-javascript">                            &#125;</span><span class="language-javascript">                        &#125;)</span><span class="language-javascript">                    &#125;)</span><span class="language-javascript">                &#125;);</span><span class="language-javascript">            &#125;); </span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></li></ol><p>完成以上步驟後下<code>python manage.py runserver</code>就能看到簡單的ToDoList囉～</p><p><img src="/images/2023-10-12Day27.%E9%A6%96%E5%85%88%E5%85%88%E4%BE%86%E7%B0%A1%E5%96%AE%E5%81%9A%E5%80%8BTodolist%E9%A0%81%E9%9D%A2%EF%BD%9E/20162905rK4vgXs1dm.png"></p><p>那整體的介面是從上面那個youtube影片摳過來的，我自己對網頁的設計美感有點差而且CSS苦手ＸＤ<br>而JS則是透過下面那篇文章去修改的，當時想要學習React剛好看到這篇，改完就變成純JS的component和state的用法，收穫頗大！以前都是直接打API拿到Json後把html重組，現在知道了component和state後覺得JS那邊的可讀性變高很多～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>明天就來試試看對這個簡單的ToDoList寫些test吧！</p><p>完整的程式碼在這邊<br><a href="https://github.com/m124578n/IronMan_ToDoList">https://github.com/m124578n/IronMan_ToDoList</a></p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day26. render，終於要render context了！</title>
      <link href="/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/"/>
      <url>/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們真的code一步一步的往裡面走了好深，終於是把目標檔名的檔案內容load進來了！接下來回到最開始的地方，好像要開始處理context也是就我們傳給他的ORM囉！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>從昨天的位置接續下去吧！<code>django.template.loader</code></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905E811PXY2hD.png"></p><p>而這邊的template呢，從昨天的探查可以得知是在<code>django.template.backends.django</code>中的Template class</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905JhfeePu2yZ.png"></p><p>先從make_context開始吧！</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/201629057XxgOYPFGk.png"></p><p>那我們render是有帶著request的，所以往下看</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905jGUxSNwGUh.png"></p><p>生出這個RequestContext後，把我們定義的context push進去</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905YZIx7qcZQm.png"></p><p>這邊的push我有點不理解，為什麼這樣寫可以讓東西塞進dict裡面</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/2016290570BKezOHYx.png"></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905RnguTIWEmK.png"></p><p>先接著往下看，畢竟這邊有看到with的magic method用法，說不定等等就懂了～</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905td4h7ct2Dd.png"></p><p>做完context後再由template去render，又往裡面拋了～<br>這邊的template是<code>django.template.base.Template</code></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905hy8PaABbYA.png"></p><p>這邊要開始跳來跳去看code了～<br>找到render_context再找function</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905eclLVhNyyJ.png"></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/201629050Lzi2sNnw7.png"></p><p>又是剛剛那樣的操作，先跳過往下看<code>self._render()</code></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905XBqRk2jalQ.png"></p><p>這個nodelist是在init時被生出來的，內容為解析我們寫的html元素後存成相關的tag等<br>接著往裡面</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905A9Eq1sH69A.png"></p><p>這邊我還沒有完全釐清是怎麼處理的，但大致可以猜想我們context會在這個nodelist裡面的node中被處理，而處理的過程中就會去connect DB下SQL把資料取回來後生成字串回傳到最前面也就是這邊的content</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905K9dYTmKgvh.png"></p><p>然後塞進HttpResponse裡面回傳給middleware～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>需要找個時間好好的再仔細看看compile_nodelist那邊，以及生成的node tag有哪些又分別會觸發什麼！改天再找時間研究吧！明天先換個輕鬆的～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day25. render到engine，處理一堆東西～</title>
      <link href="/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/"/>
      <url>/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>render裡面的engine究竟是什麼？而當中的get_template又做了什麼事呢？今天就好好的來一層一層往裡面看進去！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>接續昨天的部分</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905ed5K6MgYJv.png"></p><p>往<code>self.find_tamplate()</code>看</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905zGOKCkKnvb.png"></p><p>這邊有又往裡面丟，丟給了loader.get_template()<br>先看看loader是什麼～</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/201629052BZ4yGa7Uz.png"></p><p>loader在init的時候會被賦予</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905i4P4wQqy2Y.png"></p><p>然後get_template_loaders()呢</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905GeQcAq2Qq1.png"></p><p>會去find該loader後import</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905Pcxun2P8Aq.png"></p><p>直接看一下我們這邊使用到的loader是誰～<br>可以看到會是cache loader，往這邊看</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/201629053NqHmoHz5K.png"></p><p>那我們要著重在這邊</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905jWdt5E4Q4X.png"></p><p>再去看父類別的get_template function</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905Az7mfpLMrH.png"></p><p>get_template_sources又會回到子類別</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905qNWYO2jSLb.png"></p><p>yield from 複習複習，<a href="https://zh-blog.logan.tw/2019/03/30/python3-intro-to-yield-from-expr/">文章</a><br>而這邊的loader會是filesystem和app_directories</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905OUfuqfqsBK.png"></p><p>這邊就會根據檔名找到對應的路徑回傳一個Origin物件<br>再回到這邊base.loader.get_template</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905dvX6r70mEU.png"></p><p>來看看get_contents()</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905vHviCDMcIZ.png"></p><p>origin剛剛已知是filesystem的loader</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905J4pbGAVqmZ.png"></p><p>直接把內容load進來<br>而最後也得到content了，再把所丟資訊丟給Template類別</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905yqwGhIn2G0.png"></p><p>而Template在init的時候會去解析該檔案內容</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905MyGz6PNjKg.png"></p><p>這邊就先不深究<br>回到最源頭<code>django.templates.backends.django.get_template</code></p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905UqkJnOerQ2.png"></p><p>在前面一階段</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905E6Z2jj1NX9.png"></p><p>明天我們再從這邊的render接下去</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Template init中最後一步compile_nodelist我沒有去深看，稍微看了一下裡面也是很精彩的code，有興趣的可以嘗試自己追追看～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day24. render～我渲～</title>
      <link href="/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/"/>
      <url>/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們看到了print ORM回傳的值，實際上會去觸發到SQL，那正常在使用的情況下又是什麼時候被觸發的呢！？根據debug toolbar和logging可以看到是render的時候被觸發的！那我們就來看看render有什麼特別的吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>在進去看render之前，我們先觀察一下render</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905nq3uJmG0fc.png"></p><p>在vscode中滑鼠一指過去就可以看到相關參數和說明～<br>那我們的todo看其來是對應到context<br>那我們就進去看看吧！</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905rQCuQ7EX3m.png"></p><p>render to string，很淺顯易懂呢！<br>接著看</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905PovzIovvZK.png"></p><p>我們的template_name是字串所以看get</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905YcVouRP4zQ.png"></p><p>會看到他會先去拿engine</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905wSVgHBBXV4.png"></p><p>就來看看engine.all()是什麼東西吧！</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905PQYNeyACEw.png"></p><p>這邊有個for迴圈對self，那看來又是老朋友magic method了～<br>這邊使用到的magic method有兩個</p><h3 id="一個是-iter"><a href="#一個是-iter" class="headerlink" title="一個是__iter__"></a>一個是<code>__iter__</code></h3><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905kIXL4E1Oad.png"></p><p>再看看templates</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905d6Ac3J4t0k.png"></p><p>大致看一下會去讀取settings.py中的TEMPLATES內容，在runserver的時候就讀取然後cache住了</p><h3 id="另一個是-getitem"><a href="#另一個是-getitem" class="headerlink" title="另一個是__getitem__"></a>另一個是<code>__getitem__</code></h3><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905WS8iGBTxCg.png"></p><p>getitem會去把剛剛讀取settings.py的TEMPLATES中的BACKEDN import進來</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905lCftbiLzfb.png"></p><p>那這邊就會是engines list的結果</p><p>我們回到這邊</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905RI7Ax2Z0Tn.png"></p><p>接著要看的就是這個engine的get_template function了～</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905vTmTfaAvZ5.png"></p><p>這邊可以看到又傳給一個engine的get_template function</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905VMgnWxwWjQ.png"></p><p>今天就先到這邊，明天繼續！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>沒想到render裡面延伸下去那麼遠，前面稍微探了探路發現在寫下去會有點多（<del>絕對不是我偷懶</del>），所以明天再繼續看吧！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day23. ORM觸發SQL的地方（這邊是print～）</title>
      <link href="/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/"/>
      <url>/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天那邊我推測Todo只有在他被動作的時候才會去connect DB，所以真的在被使用的地方照昨天的寫法會是在render的時候！但今天先來看看print</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>首先先稍微驗證一下想法是不是正確的，觸發SQL的是<code>print(todo)</code>，那在python中什麼會被print()觸發呢！？答案是magic method <code>__repr__</code> or <code>__str__</code></p><p>那我們接著來看ORM filter回傳的type是什麼<br><code>&lt;class &#39;django.db.models.query.QuerySet&#39;&gt;</code><br>是這個QueruSet類別，這個我們昨天也有看到，那邊其實我到現在都還沒有很有把握說我懂了…<br>總之跟著這個類別下去找<code>__repr__</code> or <code>__str__</code>這兩個magic method</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905N8YfursOAa.png"></p><p>這邊看到會顯示出data，到表已經從db中拿到data了！<br>所以我們要再根據這個線索看看取得data是透過什麼方式！<br>這邊可以看到他對自己做slice取值<code>self[: REPR_OUTPUT_SIZE + 1]</code><br>而這個動作又會觸發什麼magic method呢！？google一下～<br>找到啦～是<code>__getitem__</code>那我們接著看看他會做什麼～</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905Jsj1jJ56T5.png"></p><p>我們可以知道k是slice物件，所以會流向這邊</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905oQOnlVyg0i.png"></p><p>我這邊看了一下qs.query已經是組好的SQL了，尚未看到他怎麼組出來的～<br>而這邊有一個<code>list(qs)</code>，這個會觸發magic method <code>__iter__</code></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905ythIUszZoD.png"></p><p>在根據上圖的function找</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905Bfw4hXgGMk.png"></p><p>一樣找線索</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905DOaUo8RWaP.png"></p><p>一樣找list的magic method <code>__iter__</code></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905QwGhN8nyYH.png"></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905rc1g7W4f9O.png"></p><p>這邊就不細看了，粗看一下可以看到去執行SQL的地方～<br>先找query，直接print他的type看～<br>是在<code>django.db.models.sql.query.Query</code></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905BT4wpYihVw.png"></p><p>那這邊的connections我們也很熟悉了，他就是<code>DatabaseWrapper</code><br>其中的ops.compiler呢～</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905M5ua8fjq21.png"></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905VGdjNn5rO6.png"></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905kpsWqaQekO.png"></p><p>這下就找到compiler本人囉！<br>最後到compiler中的execute_sql就可以看到他與db連接的地方囉～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>就這樣挖著挖著就挖到與db連接的地方了，有很多python magic method如果沒接觸過python的可能會看不太習慣，不過還沒看到怎麼組出SQL了的地方就是了，是有看到類似的地方，看了一眼我就先當作沒看到了XD</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day22. 今天來稍微看一下ORM的原始碼！</title>
      <link href="/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/"/>
      <url>/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們看到了ORM是怎麼使用的，那麼今天就稍微來看一下ORM實際是怎麼做的吧，走到哪看到哪～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我們現在有的線索就只有ORM的用法～</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905IWodg17n7P.png"></p><p>直接點進去呢，會跑到這裡～</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905sh8mp80urR.png"></p><p>這邊是.pyi的檔案，讓vscode能夠知道該class類別有什麼function<br>那他實際是什麼類別呢，我們直接像上圖一樣print出來看看～<br><code>&lt;class &#39;django.db.models.manager.Manager&#39;&gt;</code><br>再依照這個類別的位置下去看看！</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905P3BAiJtokw.png"></p><p>我們這邊先回頭一下，去找找看這個Manager是怎麼被生出來的～<br>這邊就要回頭去看models.py裡面我們Todo的父類別models.Model</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905g5fgzAzTIf.png"></p><p>這邊可以看到metaclass，這也是python中很特別的物件，我也沒有把握自己可以講好，就請大家去看看<a href="https://dboyliao.medium.com/%E6%B7%BA%E8%AB%87-python-metaclass-dfacf24d6dd5">Dboy的文章</a>吧！<br>然後python還有一個特別的magic method</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905OFDHoGRSiu.png"></p><p>其實這個從字面上的意思也能看出來，當一個物件被new出來時會觸發的method，也就是說會在__init__之前被觸發～<br>之後呢直接ctrl+F找關鍵字objects</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905Cb5OssHmiC.png"></p><p>這邊就會看到Manager的物件囉～<br>在接著看BaseManager.from_queryset()</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905FDYIitrGFC.png"></p><p>這邊是python class的另一種寫法，Dboy也有說明！！<br>然後把queryset的function都塞到上面那個新的class裡面</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905z0vSzrhXFl.png"></p><p>所以最後我們就能在QuerySet這個class裡面找到我們使用的function filter啦！！</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905asYzlNoI10.png"></p><p>我試著再往裡面查看，但在裡面就看不太懂在寫什麼了QQ</p><p>但我弄著弄著發現一個有趣的點</p><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_todolist</span>(<span class="hljs-params">request, <span class="hljs-built_in">id</span></span>):    todo = Todo.objects.select_related(<span class="hljs-string">&quot;owner&quot;</span>).<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;person_todolist.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo&quot;</span>: todo&#125;)</code></pre><p>和</p><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_todolist</span>(<span class="hljs-params">request, <span class="hljs-built_in">id</span></span>):    todo = Todo.objects.select_related(<span class="hljs-string">&quot;owner&quot;</span>).<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)    <span class="hljs-built_in">print</span>(todo)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;person_todolist.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo&quot;</span>: todo&#125;)</code></pre><p>這兩個的差異可以透過我們的logging在console中看到<br>分別為<br>無print</p><pre><code class="hljs bash">(0.001) SELECT <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_data&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> FROM <span class="hljs-string">&quot;django_session&quot;</span> WHERE (<span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> &gt; <span class="hljs-string">&#x27;2023-10-07 08:16:37.529260&#x27;</span> AND <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span> = <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>) LIMIT 21; args=(<span class="hljs-string">&#x27;2023-10-07 08:16:37.529260&#x27;</span>, <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_login&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;first_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_staff&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_active&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;date_joined&quot;</span> FROM <span class="hljs-string">&quot;auth_user&quot;</span> WHERE <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span> = 1 LIMIT 21; args=(1,); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;add_date&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;sex&quot;</span> FROM <span class="hljs-string">&quot;todo_list&quot;</span> INNER JOIN <span class="hljs-string">&quot;person&quot;</span> ON (<span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>) WHERE <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = 1; args=(1,); <span class="hljs-built_in">alias</span>=default</code></pre><p>和有print</p><pre><code class="hljs bash">(0.001) SELECT <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;add_date&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;sex&quot;</span> FROM <span class="hljs-string">&quot;todo_list&quot;</span> INNER JOIN <span class="hljs-string">&quot;person&quot;</span> ON (<span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>) WHERE <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = 1 LIMIT 21; args=(1,); <span class="hljs-built_in">alias</span>=default&lt;QuerySet [&lt;Todo: Todo object (1)&gt;, &lt;Todo: Todo object (2)&gt;, &lt;Todo: Todo object (3)&gt;]&gt;(0.000) SELECT <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_data&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> FROM <span class="hljs-string">&quot;django_session&quot;</span> WHERE (<span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> &gt; <span class="hljs-string">&#x27;2023-10-07 08:15:55.474015&#x27;</span> AND <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span> = <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>) LIMIT 21; args=(<span class="hljs-string">&#x27;2023-10-07 08:15:55.474015&#x27;</span>, <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_login&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;first_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_staff&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_active&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;date_joined&quot;</span> FROM <span class="hljs-string">&quot;auth_user&quot;</span> WHERE <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span> = 1 LIMIT 21; args=(1,); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;add_date&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;sex&quot;</span> FROM <span class="hljs-string">&quot;todo_list&quot;</span> INNER JOIN <span class="hljs-string">&quot;person&quot;</span> ON (<span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>) WHERE <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = 1; args=(1,); <span class="hljs-built_in">alias</span>=default</code></pre><p>我們可以從上面兩個logging的差異中看到，如果有print的話，django會先行去db下SQL，而沒有的話則是在render的時候才下SQL，看來明天的功課就是看看render裡面有什麼奧秘了！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不得不說ORM這個框架真的是非常巨大，能力尚且不足完全無法想像這樣的架構是怎麼規劃和實作出來的！希望不久的將來自己也能手刻一套出來試試看！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day21. 看看djangoORM與其對應的SQL是否為預期的樣子！</title>
      <link href="/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/"/>
      <url>/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天就來看看ORM組成的SQL都長什麼樣子吧，怎麼看呢？當然是用我們昨天設定好的logging或是debug toolbar來看囉！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我們先來修改一下models.py</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone<span class="hljs-comment"># Create your models here.</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(models.Model):    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sex</span>(models.IntegerChoices):        MALE = <span class="hljs-number">0</span>        FEMALE = <span class="hljs-number">1</span>        THIRD = <span class="hljs-number">2</span>    name = models.CharField(max_length=<span class="hljs-number">255</span>)    sex = models.IntegerField(choices=Sex.choices)    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        db_table = <span class="hljs-string">&quot;person&quot;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(models.Model):    owner = models.ForeignKey(Person, on_delete=models.CASCADE)    title = models.CharField(max_length=<span class="hljs-number">255</span>)    complete = models.BooleanField(default=<span class="hljs-literal">False</span>)    add_date = models.DateField(default=timezone.now)    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        db_table = <span class="hljs-string">&quot;todo_list&quot;</span></code></pre><p>然後在settings.py加上templates的位置</p><pre><code class="hljs py">TEMPLATES = [    &#123;        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [<span class="hljs-string">&quot;templates&quot;</span>],  <span class="hljs-comment"># 這邊是更動處</span>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,            ],        &#125;,    &#125;,]</code></pre><p>加完之後在跟manage.py同階層的資料夾下新增一個資料夾templates<br>然後我們這邊加兩個檔案</p><ul><li>index.html</li><li>person_todolist.html</li></ul><p>內容如下</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    &#123;% for p in person %&#125;        &#123;&#123;p.id&#125;&#125;        &#123;&#123;p.name&#125;&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;person/&#123;&#123;p.id&#125;&#125;&quot;</span>&gt;</span> link <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    &#123;% endfor %&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- person_todolist.html --&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    &#123;% if todo %&#125;    &#123;% for t in todo %&#125;        &#123;&#123;t.owner.name&#125;&#125;        &#123;&#123;t.title&#125;&#125;        &#123;&#123;t.complete&#125;&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    &#123;% endfor %&#125;    &#123;% else %&#125;    no todo list    &#123;% endif %&#125;    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;back()&quot;</span>&gt;</span>back<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">back</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">            history.<span class="hljs-title function_">back</span>()</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>版面我就不管啦ＸＤ<br>接下來我們去hello_app中的views.py新增</p><pre><code class="hljs py"><span class="hljs-comment"># views.py</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person, Todo<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    p = Person.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;<span class="hljs-string">&quot;person&quot;</span>: p&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">person_todolist</span>(<span class="hljs-params">request, <span class="hljs-built_in">id</span></span>):    todo = Todo.objects.<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;person_todolist.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo&quot;</span>: todo&#125;)</code></pre><p>接著是urls.py</p><pre><code class="hljs py"><span class="hljs-comment"># urls.py</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;hello/&#x27;</span>, views.hello),    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),    path(<span class="hljs-string">&#x27;person/&lt;int:id&gt;&#x27;</span>, views.person_todolist)]</code></pre><p>這樣我們前置作業就完成了！來看看ORM的SQL吧！<br>首先先在admin新增幾筆資料～<br>新增完後到127.0.0.1:8000應該就會看到類似下圖這樣，會有你新增的角色person</p><p><img src="/images/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/20162905pWDx3M2A9W.png"></p><p>然後能從console看到<br><code>(0.000) SELECT &quot;person&quot;.&quot;id&quot;, &quot;person&quot;.&quot;name&quot;, &quot;person&quot;.&quot;sex&quot; FROM &quot;person&quot;; args=(); alias=default</code><br>也能從debug toolbar看到</p><p><img src="/images/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/20162905md3hhsDvFP.png"></p><p>接著再點link</p><p><img src="/images/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/20162905p4y4JoCN42.png"></p><p>可以看到該person的todolist事項～（我這邊沒給他完成，過幾天我們在做個完整版的今天先看看ORM～）<br>一樣debug toolbar和console都能看到SQL</p><pre><code class="hljs plaintext">(0.000) SELECT &quot;todo_list&quot;.&quot;id&quot;, &quot;todo_list&quot;.&quot;owner_id&quot;, &quot;todo_list&quot;.&quot;title&quot;, &quot;todo_list&quot;.&quot;complete&quot;, &quot;todo_list&quot;.&quot;add_date&quot; FROM &quot;todo_list&quot; WHERE &quot;todo_list&quot;.&quot;owner_id&quot; = 1; args=(1,); alias=default(0.000) SELECT &quot;person&quot;.&quot;id&quot;, &quot;person&quot;.&quot;name&quot;, &quot;person&quot;.&quot;sex&quot; FROM &quot;person&quot; WHERE &quot;person&quot;.&quot;id&quot; = 1 LIMIT 21; args=(1,); alias=default(0.000) SELECT &quot;person&quot;.&quot;id&quot;, &quot;person&quot;.&quot;name&quot;, &quot;person&quot;.&quot;sex&quot; FROM &quot;person&quot; WHERE &quot;person&quot;.&quot;id&quot; = 1 LIMIT 21; args=(1,); alias=default</code></pre><p><img src="/images/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/20162905ccytXNX1u5.png"></p><p>這邊就有個疑問了！為什麼他明明都是同一個人卻要select兩次呢？<br>那是因為我們的views.py那邊寫這樣</p><pre><code class="hljs py">todo = Todo.objects.<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)</code></pre><p>這個會導致django重複搜尋，現在只有一兩筆資料所以影響不大，資料量一多DB就要多搜尋好幾次很吃效能的！<br>所以當有兩個table FK關聯時，這正確的寫法要這樣讓django先去下join</p><pre><code class="hljs py">todo = Todo.objects.select_related(<span class="hljs-string">&quot;owner&quot;</span>).<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)</code></pre><p>那我們再來看改過的～</p><pre><code class="hljs plaintext">(0.000) SELECT &quot;todo_list&quot;.&quot;id&quot;, &quot;todo_list&quot;.&quot;owner_id&quot;, &quot;todo_list&quot;.&quot;title&quot;, &quot;todo_list&quot;.&quot;complete&quot;, &quot;todo_list&quot;.&quot;add_date&quot;, &quot;person&quot;.&quot;id&quot;, &quot;person&quot;.&quot;name&quot;, &quot;person&quot;.&quot;sex&quot; FROM &quot;todo_list&quot; INNER JOIN &quot;person&quot; ON (&quot;todo_list&quot;.&quot;owner_id&quot; = &quot;person&quot;.&quot;id&quot;) WHERE &quot;todo_list&quot;.&quot;owner_id&quot; = 1; args=(1,); alias=default</code></pre><p><img src="/images/2023-10-06Day21.%E7%9C%8B%E7%9C%8BdjangoORM%E8%88%87%E5%85%B6%E5%B0%8D%E6%87%89%E7%9A%84SQL%E6%98%AF%E5%90%A6%E7%82%BA%E9%A0%90%E6%9C%9F%E7%9A%84%E6%A8%A3%E5%AD%90%EF%BC%81/20162905nj0NfhbLFy.png"></p><p>摁～只要select一次，完美！</p><p>django的ORM隨著專案的龐大，資料庫的結構複雜化後會有很多有趣的用法，雖然真的太複雜還是直接寫SQL比較優～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>有了這兩種方式可以查看SQL後，這樣就再也不用怕自己寫的ORM是不是生出來的SQL會嚴重影響效能了，可以直接查看生成後的SQL來確認是不是自己想要的SQL！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day20. 怎麼看django組出來的SQL！</title>
      <link href="/2023-10-05Day20.%E6%80%8E%E9%BA%BC%E7%9C%8Bdjango%E7%B5%84%E5%87%BA%E4%BE%86%E7%9A%84SQL%EF%BC%81/"/>
      <url>/2023-10-05Day20.%E6%80%8E%E9%BA%BC%E7%9C%8Bdjango%E7%B5%84%E5%87%BA%E4%BE%86%E7%9A%84SQL%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>那麼今天要來看看，怎麼在django裡面看到django本身組合出來的SQL呢！？<br>這個也只是我單純好奇，常常聽到有人會說用ORM生出來的SQL效能不佳等等的評語，不過今天我們只是單純看看django生成出來的SQL而已，並不會討論效能這項問題就是了，我自己是很喜歡使用ORM，因為寫ORM讓我感覺程式碼看起來的樣子比較舒服，當然這只是個人觀感～SQL還是很重要的！要會！<br>​</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>今天一共會有三種方式來看django生成的SQL～<br>其中一種是看migration會對django下什麼指令，另外兩種則是看django接受到request後在我們view下ORM的SQL～</p><ul><li><code>python manage.py sqlmigrate &quot;app name&quot; &quot;migrations number like 0001&quot;</code></li><li>logging</li><li>debug_toolbar (套件)<br>​</li></ul><h3 id="sqlmigrate"><a href="#sqlmigrate" class="headerlink" title="sqlmigrate"></a>sqlmigrate</h3><p>首先呢就是sqlmigrate指令啦～<br>我的migration長這樣，檔名”0001_initial.py”</p><pre><code class="hljs py"><span class="hljs-comment"># Generated by Django 4.2.5 on 2023-09-27 11:09</span>​<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> migrations, models​​<span class="hljs-keyword">class</span> <span class="hljs-title class_">Migration</span>(migrations.Migration):​    initial = <span class="hljs-literal">True</span>​    dependencies = [    ]​    operations = [        migrations.CreateModel(            name=<span class="hljs-string">&#x27;Person&#x27;</span>,            fields=[                (<span class="hljs-string">&#x27;id&#x27;</span>, models.BigAutoField(auto_created=<span class="hljs-literal">True</span>, primary_key=<span class="hljs-literal">True</span>, serialize=<span class="hljs-literal">False</span>, verbose_name=<span class="hljs-string">&#x27;ID&#x27;</span>)),                (<span class="hljs-string">&#x27;name&#x27;</span>, models.CharField(max_length=<span class="hljs-number">255</span>)),            ],            options=&#123;                <span class="hljs-string">&#x27;db_table&#x27;</span>: <span class="hljs-string">&#x27;person&#x27;</span>,            &#125;,        ),        migrations.CreateModel(            name=<span class="hljs-string">&#x27;Todo&#x27;</span>,            fields=[                (<span class="hljs-string">&#x27;id&#x27;</span>, models.BigAutoField(auto_created=<span class="hljs-literal">True</span>, primary_key=<span class="hljs-literal">True</span>, serialize=<span class="hljs-literal">False</span>, verbose_name=<span class="hljs-string">&#x27;ID&#x27;</span>)),                (<span class="hljs-string">&#x27;title&#x27;</span>, models.CharField(max_length=<span class="hljs-number">255</span>)),                (<span class="hljs-string">&#x27;complete&#x27;</span>, models.BooleanField(default=<span class="hljs-literal">False</span>)),            ],            options=&#123;                <span class="hljs-string">&#x27;db_table&#x27;</span>: <span class="hljs-string">&#x27;todolist&#x27;</span>,            &#125;,        ),    ]​</code></pre><p>​<br>而指令下完會跑出</p><pre><code class="hljs plaintext">BEGIN;---- Create model Person--CREATE TABLE &quot;person&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;name&quot; varchar(255) NOT NULL);---- Create model Todo--CREATE TABLE &quot;todolist&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;title&quot; varchar(255) NOT NULL, &quot;complete&quot; bool NOT NULL);COMMIT;</code></pre><p>挺有趣的～有興趣的可以自己去翻翻這個指令sqlmigrate的原始碼！<br>​</p><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p>django的log其實我還是看得模糊模糊的，他設定很豐富，所以會需要花時間去看要怎麼寫～<br><a href="https://cloud.tencent.com/developer/article/1780422">參考文件</a><br>簡單的在settings.py當中加入這個</p><pre><code class="hljs py">LOGGING = &#123;    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;        <span class="hljs-string">&#x27;console&#x27;</span>:&#123;            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,            <span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,        &#125;,    &#125;,    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;        <span class="hljs-string">&#x27;django.db.backends&#x27;</span>: &#123;            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>],            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,        &#125;,    &#125;&#125;</code></pre><p>就可以在console中看到印出來的sql囉！我們光是runserver就可以看到了XD</p><pre><code class="hljs plaintext">(0.000)             SELECT name, type FROM sqlite_master            WHERE type in (&#x27;table&#x27;, &#x27;view&#x27;) AND NOT name=&#x27;sqlite_sequence&#x27;            ORDER BY name; args=None; alias=default(0.000) SELECT &quot;django_migrations&quot;.&quot;id&quot;, &quot;django_migrations&quot;.&quot;app&quot;, &quot;django_migrations&quot;.&quot;name&quot;, &quot;django_migrations&quot;.&quot;applied&quot; FROM &quot;django_migrations&quot;; args=(); alias=default</code></pre><p>​<br>我們在這邊使用django的admin後台新增看看！</p><p><img src="/images/2023-10-05Day20.%E6%80%8E%E9%BA%BC%E7%9C%8Bdjango%E7%B5%84%E5%87%BA%E4%BE%86%E7%9A%84SQL%EF%BC%81/20162905FY5Y5AKXiR.png"></p><p>簡單的新增一個person，然後觀察一下！</p><pre><code class="hljs plaintext">(0.000) BEGIN; args=None; alias=default(0.001) INSERT INTO &quot;person&quot; (&quot;name&quot;) VALUES (&#x27;john&#x27;) RETURNING &quot;person&quot;.&quot;id&quot;; args=(&#x27;john&#x27;,); alias=default(0.002) INSERT INTO &quot;django_admin_log&quot; (&quot;action_time&quot;, &quot;user_id&quot;, &quot;content_type_id&quot;, &quot;object_id&quot;, &quot;object_repr&quot;, &quot;action_flag&quot;, &quot;change_message&quot;) VALUES (&#x27;2023-10-05 12:35:35.362862&#x27;, 1, 1, &#x27;1&#x27;, &#x27;Person object (1)&#x27;, 1, &#x27;[&#123;&quot;added&quot;: &#123;&#125;&#125;]&#x27;) RETURNING &quot;django_admin_log&quot;.&quot;id&quot;; args=(&#x27;2023-10-05 12:35:35.362862&#x27;, 1, 1, &#x27;1&#x27;, &#x27;Person object (1)&#x27;, 1, &#x27;[&#123;&quot;added&quot;: &#123;&#125;&#125;]&#x27;); alias=default(0.001) COMMIT; args=None; alias=default</code></pre><p>大概這一串，就可以看到生成的sql啦！<br>​</p><h3 id="debug-toolbar"><a href="#debug-toolbar" class="headerlink" title="debug_toolbar"></a>debug_toolbar</h3><p>套件當然就要先安裝囉～<br><code>pip install django-debug-toolbar</code> <a href="https://pypi.org/project/django-debug-toolbar/">這裡～</a><br>然後稍微設定一下settings.py，跟著<a href="https://django-debug-toolbar.readthedocs.io/en/latest/installation.html">docs</a>走！<br>​<br>在settings.py加</p><pre><code class="hljs py">INSTALLED_APPS = [    <span class="hljs-comment"># ...</span>    <span class="hljs-string">&quot;debug_toolbar&quot;</span>    <span class="hljs-comment"># ...</span>]​<span class="hljs-comment"># 這個要加在第一個</span>MIDDLEWARE = [    <span class="hljs-string">&quot;debug_toolbar.middleware.DebugToolbarMiddleware&quot;</span>,    <span class="hljs-comment"># ...</span>]​INTERNAL_IPS = [    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,]</code></pre><p>​<br>然後urls.py上面加</p><pre><code class="hljs py">urlpatterns = [    <span class="hljs-comment"># ...</span>    path(<span class="hljs-string">&quot;__debug__/&quot;</span>, include(<span class="hljs-string">&quot;debug_toolbar.urls&quot;</span>)),]</code></pre><p>​<br>之後打開我們剛剛的admin頁面，就可以看到他的debug工具囉！</p><p><img src="/images/2023-10-05Day20.%E6%80%8E%E9%BA%BC%E7%9C%8Bdjango%E7%B5%84%E5%87%BA%E4%BE%86%E7%9A%84SQL%EF%BC%81/20162905ExC7TPcvk5.png"></p><p>然後點個SQL就可以看到這個頁面django下了多少sql了！</p><p><img src="/images/2023-10-05Day20.%E6%80%8E%E9%BA%BC%E7%9C%8Bdjango%E7%B5%84%E5%87%BA%E4%BE%86%E7%9A%84SQL%EF%BC%81/20162905IhUwMMCdCg.png"></p><p>是不是挺有趣的！<br>改天再研究研究他是怎麼寫的～<br>​</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>debug toolbar也是我在做鐵人賽時候找到的，當時就是想要把SQL印出來google找了一些方法，剛好看到有個日本人在介紹debug toolbar而我剛好又會日文就看了一下，<a href="https://self-methods.com/django-debug-toolbar-setting/">文章在這</a>，發現這個東西真不錯！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day19. 把現有DB轉移至djangoORM～</title>
      <link href="/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/"/>
      <url>/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雖然好像用django通常就會直接搭配django的ORM下去開發，但本人我第一個自己開發的程式中就是一開始沒有使用djangoORM而且還把所有頁面都寫在同一個app同一個view裡面，然後在那個view裡面又組了一大堆的raw sql，再加上那時候程式能力很差完全沒有規劃只想把功能做出來，導致裡面一堆重複的地方，一想到就覺得好恐怖，不過好像扯遠了ＸＤ</p><p>就是說在初期開發下沒使用ORM又或是需要把現有資料庫的table轉移至django並使用ORM這樣的需求，而django剛好有提供一個指令可以讓你簡單的就把models的輪廓生出來！！今天就來看看這個神奇的指令吧！</p><p><code>python manage.py inspectdb</code></p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我們就來看看會生出什麼樣的models吧！<br>首先先準備好一個db<br>我這邊就用我們前幾次生成的db.sqlite3<br>而他的原始models.py長這樣</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(models.Model):    name = models.CharField(max_length=<span class="hljs-number">255</span>)    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        db_table = <span class="hljs-string">&#x27;person&#x27;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(models.Model):    title = models.CharField(max_length=<span class="hljs-number">255</span>)    complete = models.BooleanField(default=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        db_table = <span class="hljs-string">&#x27;todolist&#x27;</span></code></pre><p>接著我們直接下指令<code>python manage.py inspectdb</code><br>會跳出這些訊息</p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905qNwwA6OANL.png"></p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905k5ZeiVPrUv.png"></p><p>跟著他上面的指示走，而下面就是我們目標的models.py，當然這充其量只是django根據database中的table資訊去生成的，詳細的內容還是需要確認調整過，那因為我們範例很簡單所以基本上是一模一樣～</p><p>身為菜鳥工程師的我不得不說，還真沒辦法想像裡面做了什麼事！！<br>既然沒辦法想像，那我們就直接看他怎麼做的！<br>老樣子直接找commands</p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905QP3bC5tCPP.png"></p><p>看起來有點少呢，就來看看這個for loop的funtion吧！</p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905LJVXLS6VTy.png"></p><p>connection也是老朋友了，詳細可以看<a href="https://ithelp.ithome.com.tw/articles/10329888">這篇</a></p><p>這邊使用到yield，python的yield可以讓一個可迭代的物件先暫時停止並return，下次在從yield的地方往下執行，我把它理解為暫時中離，<a href="https://chriskang028.medium.com/python-%E8%A3%A1%E7%9A%84-yield-%E8%AE%93%E4%BD%A0%E7%B0%A1%E5%96%AE-%E5%BF%AB%E9%80%9F%E7%9E%AD%E8%A7%A3-yield-%E7%9A%84%E6%A6%82%E5%BF%B5-f660521f3aa7">參考資料</a></p><p>那他yield的內容是不是很熟悉啊～沒錯！就是我們輸入inspectdb後一開始出現的那幾行指引教學！<br>而這樣看起來就是外面的for loop會把yield的內容接起來後先執行<code>self.stdout.write(line)</code><br>那我們繼續往下看</p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905nPNNhAihuX.png"></p><p><code>connection.introspection.get_table_list(cursor)</code>好像也有看過呢～<a href="https://ithelp.ithome.com.tw/articles/10331312">這邊這邊</a></p><p>接下來的內容大致上就是把database裡的資訊轉換成字串的過程後全部丟給這</p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905c5B9qZxQSG.png"></p><p>這邊又出現了一個陌生的東西<code>yield from</code> google看看，<a href="https://wenkefendou.gitbooks.io/python3-learning/content/yield_from.html">參考文章</a>，我可能還需要一點時間理解ＱＱ，我們先往下看<code>self.get_meta()</code></p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905Ju19Lusndi.png"></p><p><img src="/images/2023-10-04Day19.%E6%8A%8A%E7%8F%BE%E6%9C%89DB%E8%BD%89%E7%A7%BB%E8%87%B3djangoORM%EF%BD%9E/20162905jFfE90dO6Y.png"></p><p>淺顯易懂得就是處理models中meta的部分～<br>最外層的for loop就會把database的table一個一個跑過後，把table的colums一個一個比對生成，最後在去組meta得部分，結果就像我們下指令後得到的樣子！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>django其實commands稍微看了一下有很多沒看過也不知道什麼情況會用到呢，這個inspectdb也是因為我想要重寫之前那的很恐怖的程式才突發奇想找看看有沒有可以轉化的東西，沒想到還真的有～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day18. migrate終於走到db啦！</title>
      <link href="/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/"/>
      <url>/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>migrate走到最後終於把前置材料都準備好要寫進db啦！！稍微回顧一下前面準備了什麼，最開始先把database load進來，接著比對了disk和database裡的table這當中還生出了migration graph，再來跟著我們下的command看處理額外對應的參數，準備好migration plan和project state後，開始處理migrate~</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>開挖migrate</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905TenCTFa3ba.png"></p><p>挖</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905wGbSDmdy5O.png"></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905kIEo8FdOAj.png"></p><p>這邊我們就挑關鍵來看，也就是實際有尚未migrate的migration會怎麼處理（一般情境），根據我試驗了幾次（一直修改某個table）發現大概流向</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905mRy11Ysk6R.png"></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905OLCC91EFUn.png"></p><p>會先去檢查migration table是否存在，不存在的話能不能正常建立，也就是說建立db的關鍵就是<code>self.connection.schema_editor()</code>這個function啦！！（self.connection &#x3D;&#x3D; sqlite3.base.DatabaseWrapper）<br>那我們就來看看<code>schema_editor</code>吧！</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/2016290549qRKmR5vl.png"></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905TPrkJzmwtf.png"></p><p>那還記得with的用法嗎！？忘記的趕快去google～～</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905b4mW5FVgN2.png"></p><p>終於是看到SQL啦！接著是with用法～</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905estGGIIRas.png"></p><p>再去看父類別的</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905uSVj0XQqhN.png"></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/201629051EfSnjCm7m.png"></p><p>with進出的過程<br>那我們知道<code>with self.connection.schema_editor()</code>會給我們<code>DatabaseSchemaEditor()</code><br>接著往下看<code>create_model()</code></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905RBuLI4hhfY.png"></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905QuKcenWYav.png"></p><p>看第一行<code>self.table_sql(model)</code>model是誰呢，是這個</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905825j6Nc6UY.png"></p><p>如果把sql print出來會長怎樣呢？<br><code>CREATE TABLE &quot;django_migrations&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;app&quot; varchar(255) NOT NULL, &quot;name&quot; varchar(255) NOT NULL, &quot;applied&quot; datetime NOT NULL)</code><br>這個神奇的function以後我們再來看！<br>接著就是<code>self.execute()</code></p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905wcQdGFo0el.png"></p><p>可以看到最下面，終於寫進了SQL啦！<br>而我們再回到migrate那邊（<code>django.db.migrations.executor.MigrationExecutor</code>的function）<br>根據我的測試都流向</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905gwkxaTumRm.png"></p><p><code>self._migrate_all_forwards()</code>就會把我們所有還沒migrate的plan一個一個migrate上去！</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905yb4vAonnoY.png"></p><p>關鍵在<code>self.apply_migration()</code>那邊</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905WpHlpU67Od.png"></p><p>這邊就能看到我們上面提到的<code>with self.connection.schema_editor()</code>然後會由<code>Migration</code>去apply狀態和db，裡面細節我們也先跳過，接下來會去紀錄我們migration的歷程</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905ZEi0tHgYNI.png"></p><p>寫進資料庫！</p><p><img src="/images/2023-10-03Day18.migrate%E7%B5%82%E6%96%BC%E8%B5%B0%E5%88%B0db%E5%95%A6%EF%BC%81/20162905nmIBmhO9MQ.png"></p><p>那migrate就差不多到這邊結束啦！後面return一個state還會發送一個<code>post_migrate_signal()</code>這個也之後再說吧！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看了那麼久的migrate終於看到SQL寫在哪邊了，中間還挖了很多坑坑洞洞的，之後也不一定會補就是了ＸＤ<br>本日重點</p><ul><li>DatabaseWrapper.DatabaseSchemaEditor</li><li>django.db.Migration</li></ul><p>依舊是會在一堆物件中作用，很容易就迷路了，可以邊看邊做記號！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day17. migrate發送了信號signal！？</title>
      <link href="/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/"/>
      <url>/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天的內容我只能說我自己也沒有把握說真的理解了，就算了解了程式在寫什麼，也還沒達到可以理解為什麼這樣寫！話不多說，趕緊走著！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>今天先從上次沒能理解的地方開始</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905jCT41RbHje.png"></p><p>這個是django有一個寫法叫做signal，顧名思義是一個傳送信號的function，而信號能做什麼事呢，接著看</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905qEQJvGdcVW.png"></p><p>看到這邊django會根據django settings中INSTALLED_APPS的AppConfig來去分送分別的信號給該app所擁有的信號接收者，接收者在哪，我們接著看</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/201629056fcbbE8sU4.png"></p><p>這裡面就會把信號signal送給接收者receiver囉！<br>而receiver當中又有使用到python函式庫weakref，weakref也是滿有趣的可以解決掉一些python麻煩的問題，像是circular等等問題相關文章google可以找很多，<a href="https://blog.louie.lu/2017/07/29/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-python-%E6%A8%99%E6%BA%96%E5%87%BD%E5%BC%8F%E5%BA%AB%E7%94%A8%E6%B3%95-04-weakref/">參考文章</a><br>那這個receiver又是什麼時候被設置的呢？而他又會觸發什麼樣的function呢？<br>其實早在<code>MigrationExecutor</code> init中的<code>MigrationRecorder</code>那邊就被設置了<br>被django當中的apps</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905lVm16HyEX1.png"></p><p>而這個會去跑所有AppConfig的ready function</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905PDSY6gtWck.png"></p><p>那我們再來看ready中有什麼存在吧<br>經過我一番搜索，在<code>ContentTypesConfig</code>中找到了ready跟<code>pre_migrate</code>有關的地方</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905MtQPJE0BhY.png"></p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905sw3S90HDCc.png"></p><p>connect在ready的時候設置，而在send的時候被觸發，大概是這種感覺吧！<br>這邊是看migrate相關的signal，django還有設置其他的signal，當然也可以自定義詳細可以自行google或看這邊<a href="https://pythondjango.cn/django/advanced/10-signals/">大江狗</a><br>大概了解了signal的運作後，我們繼續往下走吧！（每個app都有自己的pre post migrate有興趣的也可以嘗試自己讀讀看找找看，這邊就不詳細的一個一個介紹了，還是之後篇幅不夠再拿來介紹ＸＤ）<br>再來終於到了migrate至db的地方</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/201629057wgW6Kus4r.png"></p><p>今天就當我補坑，明天再接續著看看migrate吧～（稍微看了一下篇幅好像挺長的ＸＤ</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天的圖大概長這樣</p><p><img src="/images/2023-10-02Day17.migrate%E7%99%BC%E9%80%81%E4%BA%86%E4%BF%A1%E8%99%9Fsignal%EF%BC%81%EF%BC%9F/20162905iY3oyj4wGo.png"></p><p>本日關鍵字</p><ul><li>django signal</li><li>python weakref</li></ul><p>migrate這個指令真的跟太多相關的物件有關聯了，追原始碼的過程中很容易不小心就迷路了，或者是突然忘記那個變數是什麼東東，通常都直接print出來看看就好了，但有時候print出來的和自己想的不一樣就要回去重找ＸＤ這也算是python的特性之一吧！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day16. migrate 接著走遇到演算法～</title>
      <link href="/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/"/>
      <url>/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們看到了django中的migrations是用graph的方式去存取，在造graph的時候也跑了一些function去驗證graph的一些特性，那～今天我們就繼續往下看看migrate接下來的過程吧！<br>​</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905OlrkWIaXjv.png"></p><p>executor init後會跑一個去驗證graph和migration的一致性<br>接下來會去檢查衝突</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905FQa3IYUDmJ.png"></p><p>他會去檢查graph中的葉節點是否有重複</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905lsZ8vAI14b.png"></p><p>有的話就會報錯～<br>接著往下會去看<code>python manage.py migrate</code>的時候有沒有其他的參數，那我這邊都沒給參數所以會是這個</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905SsjguOHDlf.png"></p><p>會把所有葉節點指向targets<br>接著中間有一段也是檢查有無而外參數，我們跳過到<br>這邊</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/201629052wZJBK8ccI.png"></p><p>生出一個migration plan</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905lZEtSLn5yh.png"></p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905orr0Q1ZV1h.png"></p><p>其中大部分都會流向</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905RSlLCMQxFz.png"></p><p>而當中的forwards_plan呢又做了什麼事</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/201629051zZHcUTZl7.png"></p><p>會去把該target相關依賴依據DFS深度優先搜尋找出來</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905HHANV8Y8Qb.png"></p><p>把相關不存在applied的migration都加到plan中<br>接著往下</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905ZS7gdFPIYG.png"></p><p>這邊我們先跳過，因為我還沒搞清楚ＸＤ，他有pre和post都會丟signal給db，明天好好研究！<br>但<code>_create_project_state</code>先來看看</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/2016290513LLxj0BLr.png"></p><p>這邊先記錄一下，不太清楚<code>migration.mutate_state()</code>這一段在做什麼！？<br>再往下</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905XmHPlFSnb7.png"></p><p>其中<code>MigrationAutodetector</code>會去比較兩邊的<code>ProjectState</code></p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905NmwPLVK9Fc.png"></p><p>看看兩邊有無改變，如果有會說明要如何解決～</p><p><img src="/images/2023-10-01Day16.migrate%E6%8E%A5%E8%91%97%E8%B5%B0%E9%81%87%E5%88%B0%E6%BC%94%E7%AE%97%E6%B3%95%EF%BD%9E/20162905gg5ngixhx3.png"></p><p>最後會才會進入migrate，不過今天就先到這邊吧！剩下的我們明天繼續！<br>​</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天這樣看著看著當中有些地方看一兩遍其實還是沒有很清楚，需要再花一點時間去了解整體架構和一些python的lib用法！<br>尚未了解事項：</p><ul><li>signal</li><li>migration.mutate_state<br>​<br>之後再找時間補起來！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day15. django中的graph！</title>
      <link href="/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/"/>
      <url>/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們有看到django中有個<code>MigrationGraph</code>，接續前面的部分應該就會看到graph的真面目了！這也是我第一次在程式中看到資料結構&#x2F;演算法的應用～想想就覺得興奮！<br>​</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>那我們昨天的位置到了<code>django.db.backends.base.base.BaseDatabaseWrapper</code>中的<code>_cursor()</code></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905ygTUGr6K6X.png"></p><p>而今天要從下面的</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/201629057yiCtQgSIR.png"></p><p>看看他究竟return了什麼～</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905qixPJERAuS.png"></p><p>裡面的function是在子類別的<code>DatabaseWrapper</code>覆寫，而connection呢就是我們昨天跟sqlite3 dbapi2溝通產生的，這邊還有一個factory參數<code>SQLiteCursorWrapper</code></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905CM1L1f34FE.png"></p><p>這個class是照著sqlite3 dbapi2的規範去覆寫，看起來是要處理字串<br>接著是<code>_prepare_cursor()</code></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905L5Q9gz098q.png"></p><p>平常開發都用debug模式，就看看debug吧</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905GoRCjnVX3F.png"></p><p>看起來是會把所有跟database的指令都記錄到log裡面<br>到目前為止就是大致的（<code>django.db.migrations.recorder.MigrationRecorder</code>中的<code>has_table()</code>）</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905moa7quv3fY.png"></p><p>過程<br>接著往下看會去拿取資料庫的table name</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905cyj0lMbSop.png"></p><p>當中的<code>introspection.table_names()</code>可以在<code>DatabaseIntrospection</code>中找到</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905qMOho350AY.png"></p><p>再往裡面看<code>get_table_list()</code></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905H2ne7jx3ea.png"></p><p>哦！終於是看到SQL語法了<br>最後會確認Migration是否存在database的table裡面</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/2016290591xx55CKKY.png"></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/201629053m8kVsQ2if.png"></p><p>ORM相關的部分我們之後再看看<br>上面<code>MigrationRecorder</code>的部分就這樣告一個段落<br>接下來我們回到loader這邊</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905plB2zl80Oq.png"></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/2016290502xsvN4fGE.png"></p><p>註解大概解釋了，graph中存的data以及運作流程<br>接著往下</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905qcNiHRZGhL.png"></p><p>這邊就會根據我們實際存在app中的migrations資料夾內的檔案組成graph，並且確認他們之間的依賴性，並也加進graph中</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905uW2zA2FVLI.png"></p><p>都建好graph後要確認其consistency</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905KtG4DIAcsR.png"></p><p>最後面要確認是否有循環</p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905IL7paKTter.png"></p><p><img src="/images/2023-09-30Day15.django%E4%B8%AD%E7%9A%84graph%EF%BC%81/20162905yUTcyPFwPF.png"></p><p>到這邊，我們<code>MigrationLoader</code>的init終於結束了<br>明天再回到<code>MigrationExecutor</code>吧！<br>​<br>​</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>migrate真的是很龐大，要跟一堆物件做比對確認後才會真的寫進資料庫（這邊都還在前面的階段而已），有點好奇這樣的做法和想法是怎麼孕育且迭代出來的！！<br>​<br>本日重點</p><ul><li>產出cursor的後半段</li><li>migrations中的files都會被變成graph</li></ul>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day14. django與database的橋樑～</title>
      <link href="/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/"/>
      <url>/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們看到了migrate一開始會去拿到相對應的connection物件也就是<code>DatabaseWrapper</code>，而拿到這個connection後具體要做什麼呢？今天就讓我們繼續往下捕捉migrate的動向！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>接續昨天的位置，今天會從MigrationExecutor開始～</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905S7rmo4ymkk.png"></p><p>挖</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905Ka4cs4Ieez.png"></p><p>這邊看到原本的connection又分別丟給了<code>MigrationLoader</code>和<code>MigrationRecorder</code>兩個class，看一下他們init時分別會做什麼事吧！<br>先從Loader開始</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905VV6aayPqbm.png"></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905bROmG3JGhw.png"></p><p>看註解，Loader會把分別在disk和database中的migration files load進來後進行操作～看來會分別和disk和databse做連接<br>接著看到最後一行<code>self.build_graph()</code>建立圖表？來看看這是在做什麼～</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905xRaBVjYRku.png"></p><p>哦！看來是把migrations中的disk和database的data存到<code>MigrationGraph</code>中！<br>不過我們還是一個一個擊破！<br>首先是</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905tILlK7A1W4.png"></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905b6QIqG9R8X.png"></p><p>會把我們在<code>settings.py</code>中<code>INSTALLED_APPS</code>的每個app中的migrations讀取進來，下面做了一些檔案的操作會把在app中的migrations裡面的py檔的Migration丟進dict存著</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905D7FYNNPLYM.png"></p><p>接著我們回到<code>build_graph</code>往下<br>接下來是load database data</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905Zv1JTj4hzn.png"></p><p><code>MigrationRecorder</code>前面好像也要看到，這邊不止new出來還call了<code>applied_migrations</code>從function名字我們也可以很輕易的了解他想做什麼了～我們進去看看這個function做了什麼事吧！</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905R4DAgecEKL.png"></p><p>再往裡看<code>has_table()</code></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905O4BQg3TV2s.png"></p><p>哦！！這裡的connection是誰還記得嗎！是sqlite3中的<code>DatabaseWrapper</code>看看<code>cursor</code>做了什麼～<br>我們可以在他的父類別<code>BaseDatabaseWrapper</code>找到，而with的原理需要google看文章了！<a href="https://cloud.tencent.com/developer/article/1809089">提供一篇</a></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905QLlHXBbvlH.png"></p><p>再往裡</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905vplXqOjakV.png"></p><p>一樣一個一個看</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905scDTdk0Afm.png"></p><p>看註解就可以知道會關掉有問題的連線～<br>往下移動</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905SmBcog5lEX.png"></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905tLNFjUPYVV.png"></p><p>這邊的<code>self.wrap_database_errors</code>又是什麼呢？</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905mIEsE1YERe.png"></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905QR29noxH4c.png"></p><p>這邊有些with的相關用法～先暫時把他理解為處理過程中遇到error的地方吧～<br>我們在回到<code>ensure_connection()</code>的下一個<code>self.connect()</code></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905yYLJ0bv5yD.png"></p><p>我們先把目標放在<code>self.get_new_connection()</code>這個function！<br>這邊要回到sqlite3的<code>DatabaseWrapper</code></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/201629055Yrt5blnLT.png"></p><p>終於是看到連接database的地方啦！！</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905MUmQoGHTpl.png"></p><p>這個就是django&#x2F;python跟sqlite3溝通的地方了！有機會再看看更底層連接的C語言吧～這個DB-API相關規範也都有寫在python的文件裡面！<br>接著再回到<code>_cursor()</code></p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905HQYdYeIsf7.png"></p><p>然後今天就先停在這邊吧！明天我們再接著繼續！！</p><p><img src="/images/2023-09-29Day14.django%E8%88%87database%E7%9A%84%E6%A9%8B%E6%A8%91%EF%BD%9E/20162905AdRiypzjVx.png"></p><p>現在停在紅色那點～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>稍微看一下今天的關鍵字</p><ul><li>sqlite3 dbapi2</li><li>with 原理</li><li>disk 和 database 的graph（還沒看到）</li></ul><p>migrate真的是很龐大，也終於是找到django和database的橋樑啦！！不過詳細的運作邏輯還是得去看python的原始碼看看python sqlite C 這三個怎麼串接的！不過我們這次主題是django這邊就不寫在鐵人賽了～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day13. migrate 資料庫遷移？</title>
      <link href="/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/"/>
      <url>/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>直到昨天我們才第一次對資料庫下migrate，什麼是migrate？而migrate又是會做什麼事呢？django的migrate指令會根據我們寫的一些檔案生成對應的SQL後對資料庫進行操作，而具體的檔案會是由makemigrations生成，django會根據migrations資料夾內的檔案對我們自己撰寫的table也就是models.py做版控，而一開始的migrate會根據django預設migrations內的檔案做驗證確認後才寫進資料庫！聽起來不容易呢，有很多細微的操作！接著就讓我們潛下去<code>python manage.py migrate</code>來看看細部的內容吧～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>老熟了，我們就到<code>django.core.management.commands</code>中找到對應的檔案吧！不過以防萬一我們還是驗證一下是不是真的是這個位置！<code>&lt;django.core.management.commands.migrate.Command object at 0x000001C327463D50&gt;</code>沒問題是對的！</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905kM2H8mtq1a.png"></p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905z0Qmyj9Hfy.png"></p><p>這個原始碼的長度看了一下就知道大事不妙了！需要慢慢拆解來看～那就邊看註解邊讀原始碼吧！<br>首先看到的是</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/2016290577vRgZ4pm3.png"></p><p>這邊說實際的我沒有很清楚這樣做的目的，看註解是把所有相關的app.management import進來，為了處理events？可能需要再詳細研究看看～<br>接著是</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905Ek9oaISXG1.png"></p><p>先來看看connections是怎麼來的吧！</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/201629054YJQfbc4VA.png"></p><p>繼續挖</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905VYgyMdhqKT.png"></p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905tk5PcV1XAz.png"></p><p>上次有介紹過的magic method，這邊是用在<code>BaseConnectionHandler</code>中的<code>__getitem__</code>這個magic method來處理</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905NJpRv1ZdQW.png"></p><p>可以看到他會去create一個connection我們在往裡面看，<code>create_connection()</code>要回到<code>ConnectionHandler</code>來看</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905juxmXeVzgY.png"></p><p>此時這邊會根據我們在settings設定的DATABASEDS中的ENGINE去找到相對應的db，然後回傳該DB的DatabaseWrapper物件，我們再接著看一下DatabaseWrapper是什麼？那因為我是用預設的sqlite，我們就根據<code>load_backend()</code>這個線索找到sqlite的資料夾放在哪～</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905VJJBUsvcNK.png"></p><p><code>django.db.backends.sqlite3.base</code></p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905ftEOSmbZC1.png"></p><p>之後我們在前面migrate的時候使用的connection就可以知道他會是sqlite中的DatabaseWrapper囉！<br>接著我們在回到migrate的下面一個</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905Sp0yuGO0Fo.png"></p><p>根據剛剛的結果我們可以知道他會是<code>DatabaseWrapper</code>的function</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905Sd6TLEMVZ5.png"></p><p>這個我自己看了看他是沒有被使用到的，具體有沒有做其他我不清楚的操作不確定！<br>今天大概就先到這邊～明天就從這裡開始接續～</p><p><img src="/images/2023-09-28Day13.migrate%E8%B3%87%E6%96%99%E5%BA%AB%E9%81%B7%E7%A7%BB%EF%BC%9F/20162905tfP7hPgWQ3.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>migrate會碰到資料庫的地方也是我一直很好奇的部分，到底django的orm是怎麼跟database做溝通的呢！？藉由這次機會就來好好的研究研究，剛好明天中秋節放假，可以有很多時間來探明django與database之間的橋樑！！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day12. 超級使用者 Super User</title>
      <link href="/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/"/>
      <url>/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什麼是超級使用者 Super User呢？django預設有一整套完整的資料庫管理介面，也就是我們在一開始startproject預設中的urls.py裡面的urlpatterns裡面的那個admin，沒錯！Super User就是admin，今天就來看看Super User怎麼被建立出來的？還有admin裡面究竟又有些什麼呢？</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>django要怎麼建立Super User呢？只要輸入<code>python manage.py createsuperuser</code>在依照指示輸入django就會幫你把Super User建立起來，這邊要注意！再輸入<code>python manage.py createsuperuser</code>之前要記得先幫django的預設資料表migrate進DB，<code>python manage.py migrate</code>！！不然Super User的資料會沒地方存，而django自己也會抱錯並提示！<br>create完後，我們再把server run起來，<code>python manage.py runserver</code>，進去後在url後面加上<code>/admin</code>就能看到admin的登入頁面囉～此時在輸入我們剛剛create的帳號密碼，就可以登入了</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905a4mKt6R7jc.png"></p><p>登入後會看到</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905MDLZIQnzfC.png"></p><p>在這邊就可以簡單的對django的table進行圖形介面的CRUD，如果是自己寫在models.py的table的話，就必須要註冊進去admin.py裡面django才能順利的去讀取到！寫起來像這樣，假設我有兩個models，分別為<code>Person</code>、<code>Todo</code>，把他註冊進去</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> *<span class="hljs-comment"># Register your models here.</span>admin.site.register(Person)admin.site.register(Todo)</code></pre><p>就可以很順利的在admin頁面中看到這兩個table的資訊囉～</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905lHnZ9SHV5d.png"></p><p>那麼接下來，我們就來看看<code>python manage.py createsuperuser</code>做了什麼吧！不出意料的話應該就是簡單的把我們輸入的資料寫進特定的table而已～<br>這次位置變了，換去<code>django.contrib.auth.management.commands.createsuperuser.py</code>，那我們一樣看到<code>handle()</code><br>先處理username</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905lNMGzP7kmc.png"></p><p>再來是相關資訊</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/201629053uKRx1eMp5.png"></p><p>接著處理password</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905IIMpDiJjVR.png"></p><p>密碼這邊有使用python內建函式庫<code>getpass</code>會讓你在CLI看不到你打的字<br>最後前面的步驟都沒問題的話就會寫進資料庫！</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905cL7dDJ4lKP.png"></p><p>步驟大概是上面那樣，和我們實際操作create super user的時候差不多，但裡面有些變數都不太清楚在哪邊，來找找看吧！<br>首先就來看看<code>self.UserModel</code>這個變數吧，熟悉django的夥伴一看名稱大概就可以猜測出他是ORM的model了！只不過具體的位置在哪邊呢？</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905OoPLHKiGsp.png"></p><p>再往裡看</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905LskIZknKIU.png"></p><p>這邊就可以看到他是根據settings中的變數AUTH_USER_MODEL來去定位的，那反推我們如果需要客製化或許就需要去修改到這個變數～<br>再往裡面挖，就可以在這邊找到了<code>django.conf.global_settings.py</code>這邊有一些django相關的settings預設變數</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/201629050vNlIXqDlb.png"></p><p>那我們在根據這個的位置來去找！<br>最後終於找到我們的model位置<code>django.contrib.auth.models.User</code></p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905UWoq2DD1p0.png"></p><p>讓我們看重要的他是如何create的！</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905GB1cLwLRVi.png"></p><p>我目前沒看到他是怎麼定義<code>_default_manager</code>的部分，不過可以知道他是<code>UserManager</code><br>然後就可以在<code>UserManager</code>那邊找到<code>create_superuser</code>部分啦！</p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905Ea5bMKnWvA.png"></p><p><img src="/images/2023-09-27Day12.%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85SuperUser/20162905AyNxGLJlyQ.png"></p><p>至於ORM的部分我們之後再找一天來看看吧！！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>沒想到django的model也可以有這樣的寫法，之前都只有用最普通的寫法，一個model一個table那樣～真的看著source code都會有不同的驚喜在等著我們！！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day11. 我們常寫的view，在這裡！</title>
      <link href="/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/"/>
      <url>/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天的主題是我們最常在使用的部分，也就是view，django中要回傳response的方法大致可分為兩種，一種是class based，另一種是function based，至於兩種哪個比較好呢，各有好壞也有適合使用的時機，這個之後我們再來看看，而今天主要目的是要把這個view什麼時候被import進去，而我們自己寫的response又怎麼出去，那個地方給找出來～</p><p>根據昨天我們已經可以知道所有的request都會送進middleware_chain，而最裡面那層就是找到我們的view然後回傳，大致如下圖</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905n8hgT3VUzc.png"></p><p>那我們就進去探險吧！！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>先找到<code>_get_response</code>的位置，會在<code>django.core.hnadlers.base.BaseHandler</code>其中一個function</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905C1PX8NEoC0.png"></p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905sIf7lfl6Bu.png"></p><p>稍微看一下註解就能知道我們的目標是沒錯的！<br>接著往裡面看</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/201629059eLEdJBSX9.png"></p><p>首先會先看到，<code>self.resolve_request(request)</code>看起來會去處理request，但具體是怎麼處理的呢？</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/201629058oCPtOdkUm.png"></p><p>照著程式碼看，也可以很一目瞭然的知道他會去拿<code>resolver</code>之後把request.path丟進去找符合的，來看看誰又是reolver吧！</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/201629059CJOPgrUz5.png"></p><p>很直接的就叫做<code>URLResolver</code>了呢，而他的<code>resolve</code>function又做了什麼事呢！？</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905LHKIGsnDY5.png"></p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905J03iOg2v8y.png"></p><p>可以看到他會去我們在settings.py中定義的ROOT_URL中找到該py檔案中的urlpatterns，然後跑一個for迴圈去比對，最後回傳一個<code>ResolverMatch</code>物件～<br>最後直接看看return了什麼給我們吧！</p><pre><code class="hljs python">ResolverMatch(func=hello_app.views.hello, args=(), kwargs=&#123;&#125;, url_name=<span class="hljs-literal">None</span>, app_names=[], namespaces=[], route=<span class="hljs-string">&#x27;&#x27;</span>)</code></pre><p>可以看到他處理完request.path後就會幫我們找到對應的view function回來～<br>找到view function之後呢？</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905omg4FXgU14.png"></p><p>會先把他丟給middleware，這邊是middleware如果含有<code>process_view</code>function就會被加到<code>self._view_middleware</code>當中，然後在這邊處理request和view function<br>接著往下</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905wz46KBspO1.png"></p><p>首先會先讓view function也就是callback看看需不需要變成原子，直接翻譯怪怪的，進去看看</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905qkqpxXzIfq.png"></p><p>這邊應該是有特別設定參數在settings的話可以指定讓view變成原子性的方式<br>那再往下</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905MSsZrCLmVB.png"></p><p>到這邊就會去把我們的view function邏輯跑完後得到response啦！<br>接著會去確認response是不是合法的，response亂return的話debug模式大概就可以看到卡這個function</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905ZKVR5bavqv.png"></p><p>最後會再去跑一次middleware，如果該middleware含有<code>process_template_response</code></p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/20162905CbRQqRbsLs.png"></p><p>至此<code>_get_response</code>大概如下圖</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/2016290542QDKRAGsc.png"></p><p>注意！最後的<code>return response</code>還沒完全回出去唷！！<br>別忘了這個是我們的middleware_chain的最裡面，還要一層一層的跑回去，所以我們的middleware流程大致如下圖～</p><p><img src="/images/2023-09-26Day11.%E6%88%91%E5%80%91%E5%B8%B8%E5%AF%AB%E7%9A%84view%EF%BC%8C%E5%9C%A8%E9%80%99%E8%A3%A1%EF%BC%81/201629055KAxrVJDQT.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>request進來到response出去，django做的事情也不是一般的多，不過透過這次這樣看原始碼，我也更了解了平常寫的urls和view之間的關係～再來要想想明天要寫什麼了～～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day10. middleware mixin</title>
      <link href="/2023-09-25Day10.middlewaremixin/"/>
      <url>/2023-09-25Day10.middlewaremixin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>settings中的middleware真的有人進去看過嗎！？而昨天我們看了request進middleware加工廠，那今天就來看看內部有什麼吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>當然就是先找一個middleware來看看</p><p><img src="/images/2023-09-25Day10.middlewaremixin/201629054OGICW55s7.png"></p><p>我們就看看第一個middleware吧～<code>django.middleware.security.SecurityMiddleware</code><br>跟著路徑進去，會看到</p><p><img src="/images/2023-09-25Day10.middlewaremixin/2016290501iFGH0jy8.png"></p><p>其中的<code>MiddlewareMixin</code>就是我們今天的主角啦！！</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905p0BHUxZwa5.png"></p><p>這個就是我們的主角，但還記得昨天的<code>self._middleware_chain</code>是怎麼串的嗎！？回顧一下<br>middleware_chain會是由一個一個inner function去串連起來的</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905cgds48s3kE.png"></p><p>而其中的adapted_handler就是inner function</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905VgWZrC8mlX.png"></p><p>最後串出來的middleware大概會長得像這樣<code>mid4(mid3(mid2(mid1())))</code><br>由此可知，<code>MiddlewareMixin</code>init時給的<code>get_response</code>就是inner function<br>最後<code>_middleware_chain</code>會在get_response function時被呼叫</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905PKGhRbReJP.png"></p><p>而呼叫時會觸發的是<code>inner</code>中的邏輯</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905ha5dVRaxBy.png"></p><p>而其中的<code>get_response(request)</code>會去觸發<code>MiddlewareMixin</code>中的<code>__call__()</code></p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905JjWPgmZ8Li.png"></p><p>那這邊就會一層一層的往裡面去處理request，這樣講解我自己都覺得有點抽象，我們一樣上圖來看看！</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905ne4jv3gVxj.png"></p><p>照目前資訊畫出來會長這樣，當然<code>MiddleMixin</code>其實不只這些官網範例還有其他項，但我們依照目前資訊畫出來的就如上圖，還有其中最重要處理view的邏輯在最裡面那層，也就是在<code>load_middleware()</code>的時候這個部分</p><p><img src="/images/2023-09-25Day10.middlewaremixin/20162905HQeMJIVYht.png"></p><p>其中的<code>self._get_response</code>就是我們明天的主角！！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然現在已經看懂middleware在做什麼事情了，但我卻不太清楚什麼時機點會去用他（客製化）就是了，比較常看到的是第三方套件大概率會有自己寫的middleware去處理request或response，可能是我做過的專案不夠多不夠複雜吧～不過讀懂了之後遇到感覺可以套用的情境時，就是讓自己多了個選擇！！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day09. request加工廠&quot;middleware&quot;～</title>
      <link href="/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/"/>
      <url>/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上回我們接到了request但跳過了其中處理request的部分，而其中django在處理request的部分呢，就是<strong>middleware</strong>中間件，middleware會把收到的request處理後生成response，而middleware又有好幾個，他們是怎麼串連在一起的呢？具體又是怎麼做的呢？我們待會就來一探究竟～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我們先回到上次抓到middleware的地方！</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905cYL5ROgF7G.png"></p><p>其中會看到<code>response = self._middleware_chain(request)</code>，這個middleware_chain怎麼形成的呢？來去看看～<br>點下去會看到是在<code>BaseHandler</code>中的function <code>load_middleware()</code>（太長了截圖不了，以下是他的原始碼</p><pre><code class="hljs py"><span class="hljs-comment"># BaseHandle</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_middleware</span>(<span class="hljs-params">self, is_async=<span class="hljs-literal">False</span></span>):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Populate middleware lists from settings.MIDDLEWARE.</span><span class="hljs-string"></span><span class="hljs-string">    Must be called after the environment is fixed (see __call__ in subclasses).</span><span class="hljs-string">    &quot;&quot;&quot;</span>    self._view_middleware = []    self._template_response_middleware = []    self._exception_middleware = []    get_response = self._get_response_async <span class="hljs-keyword">if</span> is_async <span class="hljs-keyword">else</span> self._get_response    handler = convert_exception_to_response(get_response)    handler_is_async = is_async    <span class="hljs-keyword">for</span> middleware_path <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(settings.MIDDLEWARE):        middleware = import_string(middleware_path)        middleware_can_sync = <span class="hljs-built_in">getattr</span>(middleware, <span class="hljs-string">&quot;sync_capable&quot;</span>, <span class="hljs-literal">True</span>)        middleware_can_async = <span class="hljs-built_in">getattr</span>(middleware, <span class="hljs-string">&quot;async_capable&quot;</span>, <span class="hljs-literal">False</span>)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> middleware_can_sync <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> middleware_can_async:            <span class="hljs-keyword">raise</span> RuntimeError(                <span class="hljs-string">&quot;Middleware %s must have at least one of &quot;</span>                <span class="hljs-string">&quot;sync_capable/async_capable set to True.&quot;</span> % middleware_path            )        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> handler_is_async <span class="hljs-keyword">and</span> middleware_can_sync:            middleware_is_async = <span class="hljs-literal">False</span>        <span class="hljs-keyword">else</span>:            middleware_is_async = middleware_can_async        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># Adapt handler, if needed.</span>            adapted_handler = self.adapt_method_mode(                middleware_is_async,                handler,                handler_is_async,                debug=settings.DEBUG,                name=<span class="hljs-string">&quot;middleware %s&quot;</span> % middleware_path,            )            mw_instance = middleware(adapted_handler)        <span class="hljs-keyword">except</span> MiddlewareNotUsed <span class="hljs-keyword">as</span> exc:            <span class="hljs-keyword">if</span> settings.DEBUG:                <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(exc):                    logger.debug(<span class="hljs-string">&quot;MiddlewareNotUsed(%r): %s&quot;</span>, middleware_path, exc)                <span class="hljs-keyword">else</span>:                    logger.debug(<span class="hljs-string">&quot;MiddlewareNotUsed: %r&quot;</span>, middleware_path)            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">else</span>:            handler = adapted_handler        <span class="hljs-keyword">if</span> mw_instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">raise</span> ImproperlyConfigured(                <span class="hljs-string">&quot;Middleware factory %s returned None.&quot;</span> % middleware_path            )        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mw_instance, <span class="hljs-string">&quot;process_view&quot;</span>):            self._view_middleware.insert(                <span class="hljs-number">0</span>,                self.adapt_method_mode(is_async, mw_instance.process_view),            )        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mw_instance, <span class="hljs-string">&quot;process_template_response&quot;</span>):            self._template_response_middleware.append(                self.adapt_method_mode(                    is_async, mw_instance.process_template_response                ),            )        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mw_instance, <span class="hljs-string">&quot;process_exception&quot;</span>):            <span class="hljs-comment"># The exception-handling stack is still always synchronous for</span>            <span class="hljs-comment"># now, so adapt that way.</span>            self._exception_middleware.append(                self.adapt_method_mode(<span class="hljs-literal">False</span>, mw_instance.process_exception),            )        handler = convert_exception_to_response(mw_instance)        handler_is_async = middleware_is_async    <span class="hljs-comment"># Adapt the top of the stack, if needed.</span>    handler = self.adapt_method_mode(is_async, handler, handler_is_async)    <span class="hljs-comment"># We only assign to this when initialization is complete as it is used</span>    <span class="hljs-comment"># as a flag for initialization being complete.</span>    self._middleware_chain = handler</code></pre><p>在最後一行可以看到我們的目標<code>self._middleware_chain = handler</code>，在來回推看看這個handler怎麼形成的吧～<br>先把焦點移至上面</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905fmyQIoVCGH.png"></p><p>會看到他把<code>self._get_response</code>丟進去一個function <code>convert_exception_to_response()</code>裡面後指定給變數handler，我們先來看看生成handler的這支function</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905BLQyvP4ich.png"></p><p>這個function其實看function name大概就可以猜測他想做什麼了，而看註解後就更詳細了～<br>我們也可以從程式碼中看到django會去處理sync or async，而預設是sync所以我們就看sync的部分就好了～</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/201629054Mrv0cBfYq.png"></p><p>這個部分是python自己寫decorator的做法，因為我自己也沒什麼客製化寫過decorator所以看的時候花了一些時間去找出程式的流向！這邊可以看到他把傳進來的<code>get_response</code>參數丟到inner裡面後去處理try catch吐出結果response，然而這些都會在實際那個<code>self._middleware_chain</code>被call的時候才會觸發，這邊會拋出inner這個function出去到外面那個handler，說得有點抽象，畫個圖來看看～</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905tQ48Tkm4K3.png"></p><p>應該還算清楚XD<br>那現在我們知道了handler會是一個inner function包含了處理request的邏輯，那我們繼續往下看那個for迴圈</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/201629052fVLA1lhg8.png"></p><p>可以看到他會去跑一遍<code>settings.MIDDLEWARE</code>也就是這個，而且是反轉的（這邊之後再講）</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905UV7Ni3j8on.png"></p><p>把該middleware import進來後，會把原先的handler由<code>self.adapt_method_mode()</code>去check並轉換sync or async，最後再把他丟進去前面import進來的middleware -&gt; <code>mw_instance = middleware(handler)</code><br>之後的過程處理一些middleware中的function（這邊我們也之後再說）</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905Xz8b5iiNmn.png"></p><p>最後來到這裡，for loop的尾巴</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905TzoR5VcdA4.png"></p><p>又再把剛剛的import middleware丟給<code>handler = convert_exception_to_response(mw_instance)</code>，那我們前面已經知道這個handler是一個inner function了，就這樣把for loop跑完後指定給<code>self._middleware_chain</code></p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905xInxBlC2VP.png"></p><p>最後再來畫一張圖看看～</p><p><img src="/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905J5di0aoFJb.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我們今天看了middleware_chain生成的過程，但跳過了兩個重要的地方</p><ul><li><code>self._get_response</code></li><li><code>Middleware</code>這個class本身</li></ul><p>這兩個過明後天再來看看吧！！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day08. Request來了 ！ 我接！</title>
      <link href="/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/"/>
      <url>/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家有沒有聽過這個面試題目，『當你的瀏覽器輸入網址後會發生什麼事情？』，據說工程師的每個階段都可以想想看怎麼回答這個問題，而每個階段思考的廣度和深度都會不太一樣，聽起來都有點像心理測驗了～那今天就是要來看看我的Django runserver後，我打開瀏覽器到我們指定的url位置後究竟會發生什麼事情呢？他又是怎麼徜徉Django的呢？今天就來挖挖看吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>究竟怎麼去接request的呢？是透過<code>wsgiref</code>這個python的lib，我們在runserver那邊也有提到過，位置在這邊<code>django.core.servers.basehttp.py</code>中的<code>run</code></p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905wYWwYUzPRi.png"></p><p>這邊是我們在runserver的最後面真的啟動server的部分，而當中的</p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905rCfO7uIMCj.png"></p><p><code>set_app()</code>就是去指定我們要接收request的地方～那個這handler怎麼來的，在往前回朔一下到<code>django.core.management.commands.runserver.py</code>中的<code>inner_run</code></p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905nORFoeMeH6.png"></p><p>其中的<code>self.get_handler()</code>就是我們handler的來源，跟著這支function往前進最後就會看到一切的源頭handler就是<code>WSGIHnadler()</code></p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905oKdiQInJlA.png"></p><p>而request進來django的時候就會去呼叫這個handler，所以我們可以看看<code>__call__</code>這個magic method<br>我們先來看看這兩個最重要的</p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905Kwkw2JGEAy.png"></p><p>夾帶environ也就是真正request送進來的資訊去new出一個<code>WSGIRequest()</code><br>之後再把request包進<code>get_response()</code>裡面就會拿到response，看到這邊我已經開始覺得裡面一定發生了我無法想像的過程 XD<br><code>WSGIRequest</code>就是讓扁平的request資料變成一個物件class的形式活在django中<br>而<code>get_response()</code>做了些什麼呢？往裡面看發現是父類別<code>BaseHandler</code>的function繼承過去的而已</p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905YX1rnXFgpl.png"></p><p>摁～過一個<code>self._middleware_chain()</code>就得到response這麼神奇，這邊我們先當瞎子，<code>self._middleware_chain()</code>先當作沒看到，明天再挖看看～<br>那得到response後下面又做什麼呢？</p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905gRQq9D3cWO.png"></p><p>看起來是收集了<code>status</code>和<code>headers</code>的資訊，然後餵給<code>start_response()</code><br>而這個<code>start_response()</code>是<code>wsgiref</code>的寫法，實際去查了一下發現好像是會去驗證<code>headers</code>如果當中發生了errors就會去改變<code>status</code>的狀態～（這邊實際情況我還在查閱資料中，如果有人知道的話歡迎下方留言！！）</p><p>那到這邊大概就是request進去django在變成response的大致流程囉～依舊來畫個圖</p><p><img src="/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905Y3MFWBTBCK.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天的重點在request的進來跟出去，而request的加工廠middleware我們就留到明天再來看看吧，不只middleware我們還要找到他是如何去對其我們的<code>urls.py</code>然後把我們自己寫的view function拋出去也要找找～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day07. 正常一點的Django長這樣～</title>
      <link href="/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/"/>
      <url>/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾篇我大概把我們一開始有用到的部分都挖了一遍（還有沒說到的部分），那我們可以繼續走下去，先把那個恐怖的Hello World！改成正常一點的吧！接著再看看今天會提到指令的原始碼～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我前面把原先<code>django-admin startproject iron_man001</code>的<code>urls.py</code>改成了這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, hello), ]</code></pre><p>那今天我們先把view也就是hello function移出去吧！<br>先把terminal cd到有<code>manage.py</code>的資料夾，接著輸入<code>python manage.py startapp hello_app</code><br>此時會生成一個hello_app的資料夾，現在我們的資料夾長這樣</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/201629057oRrXh1AbR.png"></p><p>接下來新增<code>urls.py</code>到hello_app資料夾內並在裡面打出</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;&#x27;</span>, views.hello),]</code></pre><p>然後把<code>views.py</code>改成這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)</code></pre><p>接下來呢把iron_man001的<code>urls.py</code>改成這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, includeurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&quot;hello_app.urls&quot;</span>)), ]</code></pre><p>最後把<code>settings.py</code>中的<code>INSTALLED_APPS</code>新增一個</p><pre><code class="hljs python">INSTALLED_APPS = [    <span class="hljs-string">&#x27;hello_app.apps.HelloAppConfig&#x27;</span>, <span class="hljs-comment"># 新增這個</span>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,]</code></pre><p>這樣在runserver就可以看到我們寫的view function hello return 的字串囉～</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905A0aAxBD1bf.png"></p><p>完美～我們終於完成了一個相對正常的Django了 XD</p><p>接下來稍微看一下，<code>django-admin startproject</code>和<code>python manage.py startapp</code>這兩個指令，以及他是怎麼幫我們生成預設的檔案的呢？<br>相信我們對Django怎麼去讀CLI的階段已經很熟悉了，我們直接從commands中的<code>startproject.py</code>看起</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905frSKI6hEUK.png"></p><p>看起來只有指定一些變數然後去跑父類別的handle了<br>我們來看看父類別<code>TemplateCommand</code><br>一開始會去驗證我們給予的project名稱是否合法</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905piCoozE3Lr.png"></p><p>之後中間有些處理參數的過程後，到檔案處理的關卡</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905Dm1W1att1u.png"></p><p>這邊實際去看看他變數的值，就可以看到原來django預設的那些檔案全都放在了這邊<br><code>django.conf</code>中的project_template和app_template<br>接著後面的處理流程就是把他們一個一個寫入我們指定的project’s name的資料夾中</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905AiZ1AdAyuZ.png"></p><p>一個一個寫進去了呢～</p><p>最後大致過程長下圖這樣</p><p><img src="/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905uR2aQLnjV2.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天大概看了一下Django產生檔案的過程，我原本一直以為他是寫在程式裡面動態一行一行生成，原來是有現成的檔案去copy，其實細看他也算是動態的寫進去了啦 XD</p><p>那明後天來看看Django接收request的過程吧，我們自己寫的view function到底是怎麼接到request然後return response的呢！？</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day06. settings 注入！</title>
      <link href="/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/"/>
      <url>/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>稍微補一下前幾篇的坑，這也是很重要的一環，所有Django框架層的設定都會在<code>settings.py</code>裡面，而我們在runserver的邊也有看到他是在什麼時候被import進去的，只不過沒有細講他是怎麼個import法，今天就來挖挖看settings的奧秘吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>先稍微回顧一下，據我的觀察，settings是在我們指令觸發也就是<code>python manage.py XXX</code>會到這邊</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905lTaBOQM7Si.png"></p><p>那這個檔案在import的時候就先把settings給new出來了</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905Xb02ODxjYc.png"></p><p>那什麼時候import的呢，在這邊</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905bBhcP29CA4.png"></p><p>可是他這樣怎麼import，他就只是叫一下那個INSTALLED_APPS的參數而已啊，怎麼就會把所有的<code>settings.py</code>的東西都吃進來呢？接著看<br>我挖<br>進來<code>django.conf.__init__.py</code></p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905OFFc39VKnk.png"></p><p>這邊看到真面目了！<br><code>LazySettings()</code>看起來就是不會new出來的時候就動作<br>接著看</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905QuGH93RJff.png"></p><p>可以從這邊看到其實我們真正的目標是那個<code>Settings(settings_module)</code><br>跳過去看看</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905IzzOgiQbIv.png"></p><p>這邊其實就可以很明顯的看到是在處理<code>settings.py</code>的地方了～<br>到這邊把上面得到的資訊整理一下串起來會變這樣：</p><ol><li><code>settings.INSTALLED_APPS</code></li><li><code>LazySettings()</code></li><li><code>_setup()</code></li><li><code>Settings(settings_module)</code></li></ol><p>以上，這邊會用到python的特性 </p><h3 id="magic-method"><a href="#magic-method" class="headerlink" title="magic method"></a>magic method</h3><p>在python中看到雙底線開頭雙底線結尾的變數或function<code>__&lt;magic method name&gt;__</code>就會是magic method，而其使用方法技巧妙用有很大的發揮空間，在看Django的source code的過程就可以發現大量的被使用中！</p><p>回歸正題，當今天我們呼叫<code>settings.INSTALLED_APPS</code>會觸發這個magic method</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905PLCc6IoCpU.png"></p><p>在這邊我又看到我不曾寫過的code</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905sHIDPfkgRw.png"></p><p>google了一下是python 3.8新功能，叫海象運算符<code>:=</code>，其作用是可以在表達式（expression）中給變數賦值<br>再回來看code就可以發現當今天<code>self._wrapped</code>是空的時候就會去觸發<code>self._setup()</code>也就是說會去import settings啦！<br>以上大致上就是Django如何把<code>settings.py</code>的變數import進來的過程<br>用draw.io稍微畫一下大概如下</p><p><img src="/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/201629059UJwc9RVH7.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>source code看了看真的能有不少的收穫，且可以看到很多pythonic的寫法，未來有機會情境對了想到之前看的source code寫法可能就可以更簡單更好看，可喜可賀！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day05. runserver，怎麼run起來的？真相是！？part.2</title>
      <link href="/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/"/>
      <url>/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接續上回，我們終於走到了感覺像真的要把server run起來的地方了！畢竟function名稱都直接叫run了！<br>那今天我們就繼續挖，挖到底看到底會長怎麼樣吧！！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>接續上集的圖，今天會集中在這張圖～</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629056iZD7Q4rHe.png"></p><p>昨天我們到了<code>run()</code>的階段，讓我們來看看～</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905Zvp3tUbsR4.png"></p><p>那這邊會流向使用<code>reloader</code>因為我們<code>python manage.py runserver</code>並沒有要求他不要啟動autoreloader</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905jUSwhKy1TW.png"></p><p>我挖</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905NlHu5hFgub.png"></p><p>這邊會看到幾個重點（路徑為<code>django.utils.autoreload.py</code>）</p><ul><li><code>signal</code></li><li><code>get_reloader()</code></li><li><code>start_django()</code></li></ul><p>我們一個一個看<br><code>signal</code>先來<br>他怎麼來的呢，往上看會發現</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905s20cMGne5f.png"></p><p>是內建函式庫呢，看來直接google比較快～<br><a href="https://docs.python.org/zh-tw/3/library/signal.html">python的官方文件</a><br>簡單的理解大概是當python接收到訊號<code>signal.SIGTERM</code>會去執行後面的<code>lambda</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905l8yEutMyHj.png"></p><p>而<code>lambda</code>中的<code>sys.exit(0)</code>則是讓這支程序退出</p><p>接下來是<br><code>get_reloader()</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905rp2gBzZ1IP.png"></p><p>這邊會看到兩條路<code>WatchmanReloader</code>和<code>StatReloader</code>，兩個都是會去紀錄並關心Django的健康狀況，之後看有沒有機會來說明，今天的重點依舊是<code>runserver</code></p><p>最後是<br><code>start_django()</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905d6jxXe6aNA.png"></p><p>這邊可以看到Django額外開了一個thread是for main_func的，至於thread是什麼呢？可能還會提到process，網路上有很多詳細的資料可以查閱這邊就不獻醜了<br>我們回過頭來看<code>main_func</code>是什麼呢？</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905jUSwhKy1TW.png"></p><p>哦～是在進去<code>autoreload</code>之前的<code>runserver</code>裡面的function啊～<br>那這個<code>self.inner_run</code>做了哪些事情呢？<br>我們直接來看重點！</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629059Mtp7dLi6K.png"></p><p>這邊兩個重點</p><ul><li><code>get_handler()</code></li><li><code>run()</code></li></ul><p>首先<br><code>get_handler()</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629050kLwRZ9ypz.png"></p><p>再挖</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905cdwTOrHyMF.png"></p><p>這邊我們可以看到他會去拿我們<code>startproject</code>後生出來的<code>wsgi.py</code><br>我挖<code>wsgi.py</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629050iwhce5Wnd.png"></p><p>我再挖<code>get_wsgi_application()</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629058X9IUoDKS2.png"></p><p>這邊可以看到<code>django.setup()</code>然後<code>return WSGIHandler()</code>，這兩個坑之後會補起來的！<br>至此我們可以知道<code>get_handler()</code>會<code>return WSGIHandler()</code></p><p>接下來換<br><code>run()</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629052JQP8Ccpxi.png"></p><p>關鍵字來</p><ul><li>WSGIServer</li><li>WSGIRequestHandler</li><li>set_app()</li><li>serve_forever()</li></ul><p><code>WSGIServer</code>和<code>WSGIRequestHandler</code></p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905IezZtR1oNn.png"></p><p>這邊我們看關鍵字<code>simple_server</code>就好了（<code>WSGIRequestHandler</code>也是去繼承<code>simple_server</code>的類別）</p><p><img src="/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905xnARHcAcO8.png"></p><p>摁～<code>wsgiref</code>也是個python的內建函式庫<br>上<a href="https://docs.python.org/zh-tw/3/library/wsgiref.html">官方文件</a>可以看到有提供簡單的起一個server的範例<br>而<code>wsgiref</code>的範例中就可以看到<code>set_app()</code>和<code>serve_forever()</code>的身影～</p><p>至此大概的流程就走到這邊，而<code>python manage.py runserver</code>最後就是由<code>wsgiref</code>啟動的！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實當中還是有很多地方可以去深探，但我這邊就是講一個菜鳥看源碼的感覺，可以看到平常使用的<code>python manage.py runserver</code>到底做了多少事情，可以說越挖越深，但挖的越深我越開心呀！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day04. 所以說runserver，阿server怎麼run的！？part.1</title>
      <link href="/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/"/>
      <url>/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在探索Django的項目，我想首當其衝的肯定是<code>python manage.py runserver</code>了吧！！runserver肯定是在開發Django最常用到的指令了，每次輸入完後就看他跑一些東西，然後呢～</p><p>然後server就run起來了，Django背後到底做了什麼？一行指令就讓server跑起來這是什麼黑魔法！</p><p>今天就來探索探索runserver背後的運行過程吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>開門見山的說，直接上圖</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905kmKhwiUOYZ.png"></p><p>摁～這畫質有夠差（Ｘ<br>讓我把圖拆成兩份來看</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905ZuGRjzZ1vn.png"></p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905dFdF7XK018.png"></p><p>清楚多了！<br>不過可以很明顯地看到他肯定做了很多事，而且我還沒列出全部上圖只是大部分我自己覺得重要的過程而已！！其他可能有點重要的部分我們之後再來深究！</p><p>接下來我會一個步驟一個步驟的走我是怎麼把這張圖畫出來的！<br>首先呢當然就是從指令下手<code>python manage.py runserver</code>，其中的manage.py不知道大家有沒有點進去看過，當中就是我們第一個探勘地點～<br>manage.py長這樣</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-string">&quot;&quot;&quot;Django&#x27;s command-line utility for administrative tasks.&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-string">&quot;&quot;&quot;Run administrative tasks.&quot;&quot;&quot;</span>    os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;iron_man001.settings&#x27;</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">from</span> django.core.management <span class="hljs-keyword">import</span> execute_from_command_line    <span class="hljs-keyword">except</span> ImportError <span class="hljs-keyword">as</span> exc:        <span class="hljs-keyword">raise</span> ImportError(            <span class="hljs-string">&quot;Couldn&#x27;t import Django. Are you sure it&#x27;s installed and &quot;</span>            <span class="hljs-string">&quot;available on your PYTHONPATH environment variable? Did you &quot;</span>            <span class="hljs-string">&quot;forget to activate a virtual environment?&quot;</span>        ) <span class="hljs-keyword">from</span> exc    execute_from_command_line(sys.argv)    <span class="hljs-comment"># 這邊的sys.argv = [manage.py, runserver]</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><p>挺短的也挺好懂的，基本上看變數和function名稱就可以大概知道在做什麼事情了～<br>那我們繼續跟著<code>execute_from_command_line(sys.argv)</code>看下去<br>以下位置在 <code>django.core.management.__init__ 裡面</code></p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905W1U3aOkf69.png"></p><p>new 出一個 <code>ManagementUtility()</code>然後<code>execute()</code>他，來看看<code>execute()</code>在做什麼～</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/201629057JOkCtmKKk.png"></p><p><code>CommandParser()</code>是去繼承python lib的<code>argparse.ArgumentParser()</code><br>（python argparse是一個專門處理CLI command的內建函式庫，有興趣的可以到官網看著文件手刻玩看看～）<br>再繼續往下挖</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905akQItKdoIE.png"></p><p>這邊<code>settings.INSTALLED_APPS</code>其實就會去import settings了，這邊先挖個坑，繼續往下</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905nO3YwDbQN0.png"></p><p>這邊註解寫的很詳細，不管怎樣都會先啟動autoreloading dev server，因為我們的command class還沒被讀到，command class！看來所有的command都會是class呢～<br>再繼續挖</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905BL10ij9xSU.png"></p><p><code>fetch_command()</code>後<code>run_from_argv()</code>這兩個function好像又要做一堆事情了<br>先看看<code>fetch_command()</code>會return什麼<br>最一開始會<code>get_commands()</code>而此function會把django所有相關的資料夾中有commands字眼的都抓進來</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/201629058R5abyS0Oq.png"></p><p>接下來</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905PaDryxPYbt.png"></p><p>照上圖所示，把該command的class import進來<br>到這邊<code>fetch_command()</code>就告一段落了～</p><hr><p>那runserver會import哪個command class呢？而<code>run_from_argv()</code>又在哪呢？<br>這一個<code>django.contrib.staticfiles.management.commands.runserver</code><br>我挖</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905LqtgFDO6a7.png"></p><p>他會去繼承這個command<code>django.core.management.commands.runserver.Command</code><br>我挖<br>會發現該command會去繼承<code>django.core.management.base</code>中的<code>BaseCommand</code><br>終於找到你了<code>run_from_argv()</code></p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905xUjeMx88tO.png"></p><p>中間有些地方就先跳過，去看最下面的<code>self.execute(*args, **cmd_options)</code><br>我挖</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/201629058HALKyEjO0.png"></p><p>我再挖</p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905snrrbrObKc.png"></p><p><code>handle()</code>最後會去觸發<code>run()</code></p><p><img src="/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905Wmu3jLomj5.png"></p><p>而<code>run()</code>又做了一大堆事情，我們放到明天再繼續～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天的部分大概就是最上面圖的前半段，大概就照著這樣的感覺下去挖原始碼<br>回顧一下最一開始的<code>python manage.py runserver</code>引發了那麼一大串的程式互相作用形成，真的是挺有趣的呢，只不過一些地方要稍微想一下找一下就是了～</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day03. Django的預設頁面跑哪去啦！？</title>
      <link href="/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/"/>
      <url>/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>接續昨天做了一個非常簡易版的Hello World！頁面，發現我們的Django預設頁面消失了，究竟發生什麼事情了呢！？今天就依照我的直覺來一步一步猜測其中的原因吧！！</p><h2 id="開始通靈"><a href="#開始通靈" class="headerlink" title="開始通靈"></a>開始通靈</h2><p>來觀察一下，什麼情況下預設頁面會存在，而什麼情況下不會存在呢？<br>首先當我們都還沒做任何修改的時候預設頁面是存在的，而當我們新增一個hello就不見了，會不會是path把根路徑覆蓋掉了？</p><p>我們把path改一下看看</p><pre><code class="hljs python">path(<span class="hljs-string">&#x27;&#x27;</span>, hello)<span class="hljs-comment"># 改成</span>path(<span class="hljs-string">&#x27;hello/&#x27;</span>, hello)</code></pre><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905du3tmI22Qf.png"></p><p>摁～跳出了404 Page not found呢</p><p>那我們回復原本的情況讓path只有預設的呢肯定會出來的吧</p><pre><code class="hljs python">urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    <span class="hljs-comment"># path(&#x27;hello/&#x27;, hello), </span>]</code></pre><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905WdizQnZl82.png"></p><p>跟我們預期的一樣呢</p><p>再來把預設的admin改成hello呢</p><pre><code class="hljs python">urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, hello),    <span class="hljs-comment"># path(&#x27;hello/&#x27;, hello), </span>]</code></pre><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905bygwNBHDec.png"></p><p>預設的改成hello也是會出404</p><p>把預設的admin刪掉呢</p><pre><code class="hljs python">urlpatterns = [    <span class="hljs-comment"># path(&#x27;admin/&#x27;, hello),</span>    <span class="hljs-comment"># path(&#x27;hello/&#x27;, hello), </span>]</code></pre><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/201629052PYuQWG9eq.png"></p><p>摁～預設頁面有跳出來</p><p>這邊可以先下一個結論<br>預設頁面會在urlpatterns這個list是空的或是只有預設的admin才會存在</p><p>接下來預設頁面中有提供一個很重要的線索</p><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905dCnTEliZPg.png"></p><p>那就是在settings file 裡的DEBUG &#x3D; True 的時候才會有這個預設畫面</p><p>嘗試的驗證一下</p><pre><code class="hljs python"><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span>DEBUG = <span class="hljs-literal">True</span><span class="hljs-comment"># 改成</span>DEBUG = <span class="hljs-literal">False</span></code></pre><p>這樣會跳</p><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905xKIfN2eXQA.png"></p><p>修一下</p><pre><code class="hljs python">ALLOWED_HOSTS = []<span class="hljs-comment"># 改成</span>ALLOWED_HOSTS = [<span class="hljs-string">&#x27;*&#x27;</span>]</code></pre><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/201629053yZYtywFH4.png"></p><p>摁～說的沒錯，變成DEBUG &#x3D; False就變not found了</p><h2 id="通靈結束"><a href="#通靈結束" class="headerlink" title="通靈結束"></a>通靈結束</h2><p>至此可以下一個總結了<br>預設頁面要出現的條件如下</p><ul><li>settings.py 中的DEBUG一定要等於True</li><li>預設的urls.py中的urlpatterns的list要為空或預設的admin<br>如果沒有滿足的話會跳出404</li></ul><h2 id="開挖"><a href="#開挖" class="headerlink" title="開挖"></a>開挖</h2><p>線索都有了就往原始碼挖吧！<br>先找看看有沒有debug相關的程式碼<br>順利的在django.views中找到debug.py<br>在裡面搜尋一下404 或 default 就會看到</p><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">technical_404_response</span>(<span class="hljs-params">request, exception</span>):    <span class="hljs-string">&quot;&quot;&quot;Create a technical 404 error response. `exception` is the Http404.&quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        error_url = exception.args[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;path&quot;</span>]    <span class="hljs-keyword">except</span> (IndexError, TypeError, KeyError):        error_url = request.path_info[<span class="hljs-number">1</span>:]  <span class="hljs-comment"># Trim leading slash</span>    <span class="hljs-keyword">try</span>:        tried = exception.args[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;tried&quot;</span>]    <span class="hljs-keyword">except</span> (IndexError, TypeError, KeyError):        resolved = <span class="hljs-literal">True</span>        tried = request.resolver_match.tried <span class="hljs-keyword">if</span> request.resolver_match <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>    <span class="hljs-keyword">else</span>:        resolved = <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tried <span class="hljs-keyword">or</span> (  <span class="hljs-comment"># empty URLconf</span>            request.path == <span class="hljs-string">&quot;/&quot;</span>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(tried) == <span class="hljs-number">1</span>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(tried[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>  <span class="hljs-comment"># default URLconf</span>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">getattr</span>(tried[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-string">&quot;app_name&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)            == <span class="hljs-built_in">getattr</span>(tried[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-string">&quot;namespace&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)            == <span class="hljs-string">&quot;admin&quot;</span>        ):            <span class="hljs-keyword">return</span> default_urlconf(request)    urlconf = <span class="hljs-built_in">getattr</span>(request, <span class="hljs-string">&quot;urlconf&quot;</span>, settings.ROOT_URLCONF)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(urlconf, types.ModuleType):        urlconf = urlconf.__name__    <span class="hljs-keyword">with</span> builtin_template_path(<span class="hljs-string">&quot;technical_404.html&quot;</span>).<span class="hljs-built_in">open</span>(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fh:        t = DEBUG_ENGINE.from_string(fh.read())    reporter_filter = get_default_exception_reporter_filter()    c = Context(        &#123;            <span class="hljs-string">&quot;urlconf&quot;</span>: urlconf,            <span class="hljs-string">&quot;root_urlconf&quot;</span>: settings.ROOT_URLCONF,            <span class="hljs-string">&quot;request_path&quot;</span>: error_url,            <span class="hljs-string">&quot;urlpatterns&quot;</span>: tried,            <span class="hljs-string">&quot;resolved&quot;</span>: resolved,            <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-built_in">str</span>(exception),            <span class="hljs-string">&quot;request&quot;</span>: request,            <span class="hljs-string">&quot;settings&quot;</span>: reporter_filter.get_safe_settings(),            <span class="hljs-string">&quot;raising_view_name&quot;</span>: get_caller(request),        &#125;    )    <span class="hljs-keyword">return</span> HttpResponseNotFound(t.render(c))<span class="hljs-keyword">def</span> <span class="hljs-title function_">default_urlconf</span>(<span class="hljs-params">request</span>):    <span class="hljs-string">&quot;&quot;&quot;Create an empty URLconf 404 error response.&quot;&quot;&quot;</span>    <span class="hljs-keyword">with</span> builtin_template_path(<span class="hljs-string">&quot;default_urlconf.html&quot;</span>).<span class="hljs-built_in">open</span>(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fh:        t = DEBUG_ENGINE.from_string(fh.read())    c = Context(        &#123;            <span class="hljs-string">&quot;version&quot;</span>: get_docs_version(),        &#125;    )    <span class="hljs-keyword">return</span> HttpResponse(t.render(c))</code></pre><p>完美的找到了預設面頁在哪裡出現了<br>再根據上面原始碼中找到關鍵字default_urlconf.html再下去找，可以在django.views這個資料夾中的templates裡面找到一些django預設的html檔案</p><p><img src="/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905qH1s2d9wDg.png"></p><p>到這邊任務就結束了，當中一定會有很多疑問那就留到之後的日子慢慢研究吧！</p><p>至於你問為什麼要找預設頁面呢？<br>我只能回答＂阿我就突然一個好奇，怕是沒找到晚上會睡不好～＂</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day02. Hello World !</title>
      <link href="/2023-09-17Day02.Hello%20World%EF%BC%81/"/>
      <url>/2023-09-17Day02.Hello%20World%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h3 id="首先先來做一個簡單到不能再簡單的Hello-World！網站吧！"><a href="#首先先來做一個簡單到不能再簡單的Hello-World！網站吧！" class="headerlink" title="首先先來做一個簡單到不能再簡單的Hello World！網站吧！"></a>首先先來做一個簡單到不能再簡單的Hello World！網站吧！</h3><p>（開發環境、IDE等等的這邊就不多做說明，網路上應該可以看到各式各樣的教學～）</p><ol><li>打開CLI(command line interface)</li><li>新建資料夾 mkdir &lt;dir name&gt;</li><li>cd 進去剛剛建的資料夾</li><li>輸入django-admin startproject &lt;project name&gt; 這邊我取名 iron_man001</li><li>cd &lt;project name&gt; iron_man001</li><li>啟動Django python manage.py runserver</li></ol><p>此時你會看到像下圖的資訊<br><img src="/images/2023-09-17Day02.HelloWorld%EF%BC%81/20162905QwxPeRORs3.png"></p><p>這時ctrl按著滑鼠去點<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>會看到Django的預設畫面<br><img src="/images/2023-09-17Day02.HelloWorld%EF%BC%81/20162905f3eDut79ll.png"></p><p>這樣就完成了啟動一個Django囉～<br>接下來寫一個Hello World！的頁面～<br>（自由的python，以下範例是極簡化，以最少步驟做到Hello World！實際開發千萬不能這麼做唷～）<br>現在你應該會看到資料夾裡面有這些東西<br><img src="/images/2023-09-17Day02.HelloWorld%EF%BC%81/20162905t7GlEX7Xn4.png"></p><ol><li>到iron_man001 (iron_man001裡面的)</li><li>開啟urls.py</li><li>修改</li></ol><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> pathurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),]</code></pre><p>把他改成這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, hello), ]</code></pre><p>最後再下python manage.py runserver<br>打開<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>就可以看到Hello World！囉！！<br><img src="/images/2023-09-17Day02.HelloWorld%EF%BC%81/201629057h1l654346.png"></p><p>稍微說明一下，我們建立了一個function hello，之後讓path(‘’)空路徑去讀取該function。<br>而function hello只有簡單的回傳HttpResponse物件裡面包”Hello World！”字串<br>之後會再詳細說明他們之間是怎麼運行的～</p><hr><p>這時我就好奇了，阿剛剛的初始頁面呢？跑哪去了？<br>明天就來稍微研究研究吧！</p>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day01. 前言 - 初衷</title>
      <link href="/2023-09-16Day01.%E5%89%8D%E8%A8%80-%E5%88%9D%E8%A1%B7/"/>
      <url>/2023-09-16Day01.%E5%89%8D%E8%A8%80-%E5%88%9D%E8%A1%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://ithelp.ithome.com.tw/users/20162905/ironman/6646">iThome 15th鐵人賽</a><br>為什麼選擇Django當這次的主題研究對象、又是要還什麼債呢？</p><p>話要從頭開始說，我是日文系畢業很想去日本工作，在大三的時候老師無心的一句話讓我開始對程式語言產生了興趣！在那之後跌跌撞撞了一年多，才去報名相關的程式課程，而第一個入門的語言當然就是Python囉～</p><p>時間又過了一年，我也很勉強的踏進了這個行業（半隻腳），在工作中大概了解整個程序猿的生活，也在水球軟體學院中展開了我在公司裡看不到的軟體世界，這時我想我才真正的被程式給吸引著，原來寫code可以那麼流暢、那麼自然～（扯遠了 XD）</p><p>總之呢，我目前工作的這一年來都是使用Python Django這個web framework進行全端的工作，但卻從來沒有好好的正視過Django和web之間的愛恨情仇（？，就只永遠停留在使用階段，但我現在的心態已經從反正會動就好了轉換成我好想知道他為什麼會這樣動，於是決定藉由鐵人賽的機會好好的重新學學Django並了解他到底內部是怎麼運作的！</p><h1 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h1><p>以下主題是我列出來的，我目前想到的內容，在未來的日子中可能會出現可能不會出現～</p><ul><li>Django startproject</li><li>Django startapp</li><li>Django setting</li><li>Django createsuperuser &#x2F; admin</li><li>Django MTV</li><li>Django model &#x2F; migrate</li><li>Django ORM</li><li>Django View &#x2F; FBV &#x2F; CBV</li><li>Django form</li><li>Django inspectdb</li><li>Django middleware</li><li>Django security</li><li>Django template</li><li>Django 全端 &#x2F; 前後稍微分離</li><li>Django test</li><li>Django mailserver</li><li>Django web socket</li><li>Django cache &#x2F; redis</li><li>Django paginator</li><li>Django 排程 &#x2F; crontab &#x2F; celery</li><li>Django OAuth</li><li>Django nginx uwsgi docker deploy</li></ul><p>不一定會照順序也不一定會全都有，甚至是出現上面沒出現的都有可能會突然冒出～</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><blockquote><p>在大量輸入的同時！也要好好的練習輸出！學習效率將會大幅提升！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 15th鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 15th鐵人賽 </tag>
            
            <tag> source code </tag>
            
            <tag> web framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django x Javascript 不同寫法part2. 更新State的方式進行JS渲染</title>
      <link href="/2023-08-27Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%20%20%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/"/>
      <url>/2023-08-27Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%20%20%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-08-27DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/0_Yd6S5EqUbIdDYODn.webp"><br><em>image <a href="https://unsplash.com/photos/a-macbook-with-lines-of-code-on-its-screen-on-a-busy-desk-m_HRfLhgABo">source</a></em></p><p>上次的文章中是我以前常用的寫法，而今天要說的是我前陣子看到這篇文章發現的新大陸</p><h3 id="week-21-前端框架-先別急著學-React-HackMD"><a href="#week-21-前端框架-先別急著學-React-HackMD" class="headerlink" title="[week 21] 前端框架 - 先別急著學 React - HackMD"></a><a href="https://hackmd.io/@Heidi-Liu/note-fe302-review?source=post_page-----4e0621202043--------------------------------">[week 21] 前端框架 - 先別急著學 React - HackMD</a></h3><p>我覺得挺有趣的就試著把上次那版改成這種方式下去實作！</p><p>Django的程式碼跟上週一樣所以今天不會有python的code，就請參考上篇文章！！</p><p>那這次我是使用axios跟fetch大同小異，只是需要而外安裝（引入）也有使用到一些JQuery，話不多說先上code吧～</p><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.7.0.js&quot;</span> integrity=<span class="hljs-string">&quot;sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="hljs-comment">//....</span><span class="hljs-keyword">let</span> state = &#123;    <span class="hljs-attr">todos</span>: []&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;            response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                state = &#123;                    <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                        <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,                        <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,                        <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span>                    &#125;]                &#125;            &#125;)            <span class="hljs-title function_">updateState</span>(state)        &#125;)    &#125;<span class="hljs-comment">// 更新 state</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;    state = newState;    <span class="hljs-title function_">render</span>()&#125;<span class="hljs-comment">// state =&gt; UI</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 先把畫面清空</span>    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(    <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>    state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)    );&#125;<span class="hljs-comment">// Todo component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span><span class="hljs-string">        &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Span(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// Span component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span>&#125;<span class="hljs-comment">// Button component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// 新增 todo</span>$(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();    <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;    $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>,         &#123;            <span class="hljs-string">&quot;title&quot;</span>: content        &#125;,        &#123;            <span class="hljs-attr">headers</span>: &#123;             <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,            &#125;,        &#125;    )    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-comment">// 更新 state</span>        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                <span class="hljs-attr">id</span>: todo_id,                <span class="hljs-attr">content</span>: title,                <span class="hljs-attr">isDone</span>: complete            &#125;]        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 刪除 todo</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 未完成 &lt;-&gt; 已完成</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;                <span class="hljs-keyword">return</span> &#123;                ...todo,                <span class="hljs-attr">isDone</span>: complete                &#125;            &#125;)        &#125;)    &#125;)&#125;)</code></pre><p>跟上次相比是不是很不一樣，我自己覺得這樣子的寫法更加的直觀和易讀易懂！</p><p>那我們一樣拆開來看，首先我們要生成Todo的component</p><pre><code class="hljs javascript"><span class="hljs-comment">// Todo component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span><span class="hljs-string">        &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Span(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// Span component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span>&#125;<span class="hljs-comment">// Button component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span><span class="hljs-string">    `</span>&#125;</code></pre><p>我的Todo component裡面還包括了一個Span component和兩個Button component那他們會依據帶進去的參數而有不同的樣式</p><p>接著再到get_all_list()</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> state = &#123;    <span class="hljs-attr">todos</span>: []&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;            response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                state = &#123;                    <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                        <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,                        <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,                        <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span>                    &#125;]                &#125;            &#125;)            <span class="hljs-title function_">updateState</span>(state)        &#125;)    &#125;<span class="hljs-comment">// 更新 state</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;    state = newState;    <span class="hljs-title function_">render</span>()&#125;<span class="hljs-comment">// state =&gt; UI</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 先把畫面清空</span>    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(    <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>    state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)    )&#125;</code></pre><p>一開始的狀態先給一個空array，在get_all_list()用axios去打api拿取現在所有的Todo datas，拿到datas後在一個一個把他們塞進去todos array裡面，最後再交由updateState去把現在的state更新掉然後render，render()的工作很簡單會先把現在html上所有的todos元素清空，然後在一筆一筆塞進去～</p><p>再來我們來看看新增</p><pre><code class="hljs javascript"><span class="hljs-comment">// 新增 todo</span>$(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();    <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;    $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>,         &#123;            <span class="hljs-string">&quot;title&quot;</span>: content        &#125;,        &#123;            <span class="hljs-attr">headers</span>: &#123;               <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,            &#125;,        &#125;    )    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-comment">// 更新 state</span>        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                <span class="hljs-attr">id</span>: todo_id,                <span class="hljs-attr">content</span>: title,                <span class="hljs-attr">isDone</span>: complete            &#125;]        &#125;)    &#125;)&#125;)</code></pre><p>很簡單的去判斷button有沒有沒click，然後取input的值丟axios，那response會回傳該todo的data，就把他updateState一次就OK了！</p><p>接下來的修改和刪除也是同樣的概念，打api後response丟給updateState就完事啦～</p><pre><code class="hljs javascript"><span class="hljs-comment">// 刪除 todo</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 未完成 &lt;-&gt; 已完成</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;                <span class="hljs-keyword">return</span> &#123;                ...todo,                <span class="hljs-attr">isDone</span>: complete                &#125;            &#125;)        &#125;)    &#125;)&#125;)</code></pre><p>刪除就是把存在state裡的todo id移除掉，而修改則是把該todo id抓出來改變他的isDone屬性。</p><p>至此就大功告成啦，對Javascript不熟悉的我經過這個練習大概可以知道state component的概念！下次可能就是直接用react改寫看看囉！</p><p>軟體和程式的世界真的很有趣，可以用不同的做法達到相同的目的，而且瞬息萬變，可能明天又能有新的東西可以學習，想想就興奮呢！！</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 學習 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django x Javascript 不同寫法part1.使用Django原生template</title>
      <link href="/2023-08-20Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/"/>
      <url>/2023-08-20Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-08-20DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/0_MmikwY_ANgH8Xj99.webp"><br><em>image <a href="https://unsplash.com/photos/black-flat-screen-computer-monitor-SyvsTmuuZyM">source</a></em></p><p>前陣子看到了這個</p><h3 id="Youtube影片"><a href="#Youtube影片" class="headerlink" title="Youtube影片"></a><a href="https://www.youtube.com/watch?v=3vfum74ggHE&list=PLrgX5bzJJljqMbq7msQX4nzTtV3kqZOST&ab_channel=PatrickLoeber">Youtube影片</a></h3><p>決定花了一點時間去研究練習Django網站的各種寫法，其中包括原生template、fetch、axios、react，後面其實都在寫Javascript居多，Python改成API後就沒事了XD。</p><p>照著影片把最基本的Django template版本先做出來大概會長這樣</p><pre><code class="hljs python"><span class="hljs-comment"># view.py</span>...<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo_list&quot;</span>: todos&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)</code></pre><p>首頁＋增刪修，且任何動作都直接導回index做重新查詢</p><pre><code class="hljs html">// base.html...<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/add&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>            &#123;% csrf_token %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        &#123;% for todo in todo_list %&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui segment&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui big header&quot;</span>&gt;</span>&#123;&#123; todo.id &#125;&#125; | &#123;&#123; todo.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>            &#123;% if todo.complete == False %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui gray label&quot;</span>&gt;</span>Not Complete<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            &#123;% else %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui green label&quot;</span>&gt;</span>Completed<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            &#123;% endif %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/update/&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui red button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/delete/&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        &#123;% endfor %&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>很簡單且基礎的Jinja2模板，但使用上面的程式碼寫出來的網站不管做什麼事都會重新整理一遍（導回index），現在ajax已經是基本要求了所以開改！</p><p>首先先把Django改成API形式吧！這邊就沒用restful framework直接回json</p><pre><code class="hljs python"><span class="hljs-comment"># view.py</span>...<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">api</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-built_in">list</span>(todos.values())&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    body = request.body.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    body = json.loads(body)    title = body.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete, <span class="hljs-string">&quot;todo_title&quot;</span>: todo.title&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id&#125;)</code></pre><p>再來就是改base.html</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;get_all_list()&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">add()</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = form_sumbit</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">form_sumbit</span>(<span class="hljs-params">e</span>)&#123;</span><span class="language-javascript">                the_event = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span></span><span class="language-javascript">                code = the_event.<span class="hljs-property">keyCode</span> || the_event.<span class="hljs-property">which</span> || the_event.<span class="hljs-property">charCode</span></span><span class="language-javascript">                <span class="hljs-keyword">if</span> (code == <span class="hljs-number">13</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-title function_">add</span>()</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><span class="language-javascript">                &#125;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/&quot;</span>)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJosn</span>)&#123;</span><span class="language-javascript">                    data = myJosn[<span class="hljs-string">&quot;data&quot;</span>]</span><span class="language-javascript">                    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                        html = <span class="hljs-string">&quot;&quot;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27; | &#x27;</span>+todo.<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span></span><span class="language-javascript">                        <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">complete</span>)&#123;</span><span class="language-javascript">                            html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui green label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Completed&lt;/span&gt;&#x27;</span></span><span class="language-javascript">                        &#125;</span><span class="language-javascript">                        <span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">                            html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span></span><span class="language-javascript">                        &#125;</span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span></span><span class="language-javascript">                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                title = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#title&quot;</span>).<span class="hljs-property">value</span></span><span class="language-javascript">                data = &#123;</span><span class="language-javascript">                    <span class="hljs-string">&quot;title&quot;</span>: title</span><span class="language-javascript">                &#125;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>, &#123;</span><span class="language-javascript">                    <span class="hljs-attr">headers</span>: &#123; </span><span class="language-javascript">                        <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,</span><span class="language-javascript">                        <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/4.0 MDN Example&quot;</span>,</span><span class="language-javascript">                        <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>, </span><span class="language-javascript">                    &#125;,</span><span class="language-javascript">                    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>, </span><span class="language-javascript">                    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>)&#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = myJson[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    title = myJson[<span class="hljs-string">&quot;todo_title&quot;</span>]</span><span class="language-javascript">                    html = <span class="hljs-string">&quot;&quot;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo_id+<span class="hljs-string">&#x27; | &#x27;</span>+title+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span></span><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">update_</span>(<span class="hljs-params">todo_id</span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+todo_id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>) &#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = myJson[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    ctodo_id = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#todo&quot;</span>+todo_id)</span><span class="language-javascript">                    <span class="hljs-keyword">if</span> (complete)&#123;</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;gray&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;green&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Completed&quot;</span></span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                    <span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;green&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;gray&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Not Complete&quot;</span></span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">delete_</span>(<span class="hljs-params">todo_id</span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+todo_id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>) &#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    this_node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all_todo&quot;</span>+id)</span><span class="language-javascript">                    this_node.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(this_node)</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>WOW變超多的，我們一個一個拆開來看吧</p><p>首先先來看看get_all_list做了什麼</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/&quot;</span>)    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()    &#125;)    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJosn</span>)&#123;        data = myJosn[<span class="hljs-string">&quot;data&quot;</span>]        data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;            html = <span class="hljs-string">&quot;&quot;</span>            html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span>            html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27; | &#x27;</span>+todo.<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span>            <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">complete</span>)&#123;                html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui green label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Completed&lt;/span&gt;&#x27;</span>            &#125;            <span class="hljs-keyword">else</span>&#123;                html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span>            &#125;            html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span>            html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html        &#125;);    &#125;)&#125;</code></pre><p>fetch把過去後回來的response要先過一層json才能使用，而這個就是把原先\</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 學習 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line-Bot串接Line-Notify實現跨群組轉播訊息～</title>
      <link href="/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/"/>
      <url>/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/0_f8lsWRDjU_jcsc7-.webp"></p><p>我對自己提了一個需求，我需要把一個Line群組的訊息轉發到另一個Line群組，大概要做一個月，就覺得每天這樣手動傳太麻煩了，於是乎我決定做一個Line-Bot來幫我處理這件事吧。</p><h2 id="首先先研究了Line-Bot要怎麼接收訊息於是google"><a href="#首先先研究了Line-Bot要怎麼接收訊息於是google" class="headerlink" title="首先先研究了Line-Bot要怎麼接收訊息於是google"></a>首先先研究了Line-Bot要怎麼接收訊息於是google</h2><h2 id="LINE-BOT-教學-Python"><a href="#LINE-BOT-教學-Python" class="headerlink" title="LINE BOT 教學 ( Python )"></a><a href="https://steam.oxxostudio.tw/category/python/example/line-bot.html?source=post_page-----c0acfed7d9f6--------------------------------">LINE BOT 教學 ( Python )</a></h2><p>這篇大致上有完整的基礎教學，開始抄功課吧！！</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> config<span class="hljs-keyword">from</span> linebot <span class="hljs-keyword">import</span> LineBotApi, WebhookHandler<span class="hljs-keyword">from</span> linebot.exceptions <span class="hljs-keyword">import</span> InvalidSignatureError<span class="hljs-keyword">from</span> linebot.models <span class="hljs-keyword">import</span> MessageEvent, TextMessage, TextSendMessageapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):    body = request.get_data(as_text=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        json_data = json.loads(body)  <span class="hljs-comment"># json 格式化訊息內容</span>        access_token = config.CHANNEL_ACCESS_TOKEN        secret = config.CHANNEL_SECRET        line_bot_api = LineBotApi(access_token)  <span class="hljs-comment"># 確認 token 是否正確</span>        handler = WebhookHandler(secret)  <span class="hljs-comment"># 確認 secret 是否正確</span>        signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]  <span class="hljs-comment"># 加入回傳的 headers</span>        handler.handle(body, signature)  <span class="hljs-comment"># 綁定訊息回傳的相關資訊</span>        token = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;replyToken&#x27;</span>]  <span class="hljs-comment"># 取得回傳訊息的 Token</span>        message_type = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]  <span class="hljs-comment"># 取得 LINe 收到的訊息類型</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;text&#x27;</span>:            msg = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;text&#x27;</span>]  <span class="hljs-comment"># 取得 LINE 收到的文字訊息</span>            line_bot_api.reply_message(tk,TextSendMessage(msg)) <span class="hljs-comment"># 這邊會回覆傳進來的訊息</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;image&#x27;</span>:            msg_id = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]            message_content = line_bot_api.get_message_content(msg_id)  <span class="hljs-comment"># Line的圖片要透過ID去找</span>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fd:                fd.write(message_content.content)  <span class="hljs-comment"># 這邊把圖片存下來</span>    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(body)  <span class="hljs-comment"># 如果發生錯誤，印出收到的內容</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span></code></pre><p>這邊只是簡單的測試Line-Bot能不能順利地接受文字和圖片，程式碼的部分上面是這樣，在來要去Line Developer設定機器人取得上面兩個參數：</p><ul><li>Channel_Access_Token</li><li>Channel_Secret</li></ul><p>首先先進入</p><h2 id="LINE-Developers"><a href="#LINE-Developers" class="headerlink" title="LINE Developers"></a><a href="https://developers.line.biz/zh-hant/?source=post_page-----c0acfed7d9f6--------------------------------">LINE Developers</a></h2><p>然後去點先new channel<br>再點選Messaging API</p><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_nilYbCP_aFa5cnxSXFXk0g.webp"></p><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_ianpFH1X4dVDa3khk4FQFA.webp"></p><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_mr4Zb9T8PSH7d9yqoIk7vg.webp"></p><p>把該填的資料填一填就會獲得一個機器人囉～<br>而在機器人的Basic Setting中可以找到Channel Secret<br>然後在Messaging API 可以加機器人好友以及找到Channel Access Token</p><p>完成上述的步驟把那兩個參數加上去後就完成了啦（（還早還早<br>上面那些步驟弄完了，還差一台Server去把我的機器人部署上去並且要給一個https的網址丟給Line-Bot的Webhook這樣才算完成～</p><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_1StBjniv5ErlIExt9SbVCg.webp"></p><p>然後我就想去找個免費的平台用！低成本製作能不花錢則不花錢！<br>於是我找到了fly.io</p><h2 id="fly-io"><a href="#fly-io" class="headerlink" title="fly.io"></a><a href="https://fly.io/?source=post_page-----c0acfed7d9f6--------------------------------">fly.io</a></h2><p>fly.io有提供一些免費的空間，詳細就請自行觀看免費方案。<br>由於我是寫Python所以用google搜尋 fly io python找到了</p><h2 id="Run-a-Python-App"><a href="#Run-a-Python-App" class="headerlink" title="Run a Python App"></a><a href="https://fly.io/docs/languages-and-frameworks/python/?source=post_page-----c0acfed7d9f6--------------------------------">Run a Python App</a></h2><p>趕緊拿來改寫，改寫完後在使用fly.io部署的步驟就完成啦！！<br>fly.io在使用前記得要安裝唷～<br>然後照著上面的步驟使用：</p><ul><li>flyctl launch</li><li>flyctl deploy</li><li>更新則使用 flyctl deploy — update-only</li></ul><p>基本上上述就可以完成一個只會回覆訊息的Line-Bot機器人囉！！</p><p>然而我的需求不只是要一個只會回覆訊息的機器人<br>（誰會需要這樣的機器人XD）<br>我還需要讓這個機器人幫我轉傳訊息！<br>於是找到了Line-Notify～</p><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/0_BM2LYZ-jhhPamJ9N.webp"></p><p>Line-Notify，其實簡單的說就是打Line的API就可能傳訊息！<br>以Python來說就是打requests請求，上code</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_message</span>(<span class="hljs-params">msg</span>):    token = config.TOKEN    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: msg&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data)</code></pre><p>而token怎麼來去Line-Notify登錄一個服務吧</p><h2 id="LINE-Notify"><a href="#LINE-Notify" class="headerlink" title="LINE Notify"></a><a href="https://notify-bot.line.me/zh_TW/?source=post_page-----c0acfed7d9f6--------------------------------">LINE Notify</a></h2><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_EQbNadwe3tYiSw9im1VB6A.webp"></p><p>那下面那個Callback URL當然就是填入Line-Bot的Webhook也就是你個Server的所在處囉～</p><p>登錄完服務就來註冊權杖囉～</p><p><img src="/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_Pbti7K4tgWXxSurP8zqzBg.webp"></p><p>權杖註冊就會給你一個Token，把這個Token丟到剛剛的程式碼中就能傳了！</p><p>完整的程式碼如下：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> config<span class="hljs-keyword">from</span> linebot <span class="hljs-keyword">import</span> LineBotApi, WebhookHandler<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> linebot.exceptions <span class="hljs-keyword">import</span> InvalidSignatureErrorapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):    body = request.get_data(as_text=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        json_data = json.loads(body)  <span class="hljs-comment"># json 格式化訊息內容</span>        access_token = config.CHANNEL_ACCESS_TOKEN        secret = config.CHANNEL_SECRET        line_bot_api = LineBotApi(access_token)  <span class="hljs-comment"># 確認 token 是否正確</span>        handler = WebhookHandler(secret)  <span class="hljs-comment"># 確認 secret 是否正確</span>        signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]  <span class="hljs-comment"># 加入回傳的 headers</span>        handler.handle(body, signature)  <span class="hljs-comment"># 綁定訊息回傳的相關資訊</span>        token = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;replyToken&#x27;</span>]  <span class="hljs-comment"># 取得回傳訊息的 Token</span>        message_type = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]  <span class="hljs-comment"># 取得 LINe 收到的訊息類型</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;text&#x27;</span>:            msg = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;text&#x27;</span>]  <span class="hljs-comment"># 取得 LINE 收到的文字訊息</span>            line_notify_message(msg)        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;image&#x27;</span>:            msg_id = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]            message_content = line_bot_api.get_message_content(msg_id)            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fd:  <span class="hljs-comment"># /workspace/&#123;msg_id&#125;.jpg</span>                fd.write(message_content.content)            line_notify_image(msg_id)    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(body)  <span class="hljs-comment"># 如果發生錯誤，印出收到的內容</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_message</span>(<span class="hljs-params">msg</span>):    token = config.TOKEN    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: msg&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data)<span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_image</span>(<span class="hljs-params">msg_id</span>):    token = config.TOKEN    <span class="hljs-comment"># 要發送的訊息</span>    message = <span class="hljs-string">&#x27;這是用 Python 發送的訊息與圖片&#x27;</span>    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: message&#125;    <span class="hljs-comment"># 要傳送的圖片檔案</span>    image = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;/workspace/<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)    files = &#123;<span class="hljs-string">&#x27;imageFile&#x27;</span>: image&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data, files=files)</code></pre><p>因為是簡單的服務，程式碼方面我就沒那麼多要求了～請大家多見諒～</p><p>以上就是今天的簡單Line-Bot串Line-Notify介紹以及實作～</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> 學習 </tag>
            
            <tag> Line Bot </tag>
            
            <tag> Line Notify </tag>
            
            <tag> fly.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【閱讀心得】原子習慣</title>
      <link href="/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/"/>
      <url>/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/1_fxhtD2eXKMQt6FMBp-1zlg.webp"></p><h2 id="契機"><a href="#契機" class="headerlink" title="契機"></a>契機</h2><p>有不少人推薦了這本書，而我大概聽了友人分享兩三個月直到最近才買來看，而之所以會突然想看是因為，2023&#x2F;06~07這幾個禮拜一直在思考著自己追求的是什麼，想要的又是什麼，有沒有具體的路徑，或是明確的目標。而在迷惘的過程中就想到了“原子習慣”，於是興沖沖的趕緊去買來，並快速地看過一遍，從中其實發現了好幾個自己身處過的情境是符合書中的章節，而書中又整理出一個完整的脈絡。</p><h2 id="習慣"><a href="#習慣" class="headerlink" title="習慣"></a>習慣</h2><p>人類，從小就開始會產生很多習慣，好習慣、壞習慣、下意識的習慣、刻意培養的習慣。而我們就是活在習慣之中。</p><p>小時後回家第一件事是打開電腦上線打遊戲，這也是一個習慣，我出門一定要帶雨傘，這也是一個習慣，我刷牙會從左邊開始刷，這也是一個習慣。</p><p>習慣只是讓大腦進入一個節能模式，因為大腦是懶惰的，能節能下來的能量正是我們應該好好利用的，用在學習、用在上班、用在解決問題、用在認識新朋友，而當沒有好好的利用這些能量，就如同前面所說的大腦是懶惰的，人也是懶惰的，這些能量就白白的浪費掉了。</p><p>而當你有想要培養新的“好習慣”，大腦又會開始發懶，去執行你既有的習慣，而非探索未知領域，在初期可能可以靠著意志力去支撐，但又能維持多久呢？</p><p>此時你可能會開始嘗試很多做法，又或是乾脆遵循著大腦的習慣，而“原子習慣”這本書呢，就提供了一套實際有用且可以運行方法，讓你該變習慣過上你想要的生活。</p><h2 id="複利"><a href="#複利" class="headerlink" title="複利"></a>複利</h2><p>可能會比較有機會在股票市場上面聽到這個詞，但書中有提到讓習慣變成“複利”，這個概念讓我產生非常多的想法，並且只要持續就能產生更多價值。</p><p>從小地方開始慢慢培養起自己的習慣，時間久了，累積起來的將會成為自信的來源。</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>書中提到了許多我嘗試過但失敗的原因以及應該要如何改善，看完對自己以前一直模糊不清的感受有著更明確的方法以及信念，包括：</p><ul><li>“身份認同”的改變</li><li>明確的“講出來”會驅使你行動</li><li>建立習慣的四大步驟</li><li>移除習慣的四大反步驟</li></ul><p>都明明白白的列在了書上，而“你”需要做的事，就是拿起書中提到的方法以及重點，然後一步一步的實現，Just do it！相信就會改變！</p>]]></content>
      
      
      <categories>
          
          <category> 讀書心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 閱讀 </tag>
            
            <tag> 原子習慣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半年來個自我檢視（反省）～</title>
      <link href="/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/"/>
      <url>/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/0_coDlzsKO8kICe-9e.webp"><br><em>image <a href="https://unsplash.com/photos/a-calendar-with-red-push-buttons-pinned-to-it-bwOAixLG0uc">source</a></em></p><p>昨天2023&#x2F;7&#x2F;1是我轉職成工程師的一週年紀念日，工作後才知道工程師不只是單單的會寫程式就好，還需要有溝通的能力、架構的規劃能力、以及自我學習的能力，更何況我現在還是一個程式都沒有寫得很好的程度。</p><p>剛開始工作的時候覺得公司給的任務好像也沒什麼困難的，就沒有多想的工作工作做了半年到2022年底，當時的我覺得過去半年好像沒什麼長進感受不到自己真的有成為工程師，而在2023年初加入<a href="https://www.youtube.com/@waterball-software-academy">水球軟體學院</a>認識了各式各樣的工程師才發覺自己離“工程師”這個角色的距離還有一大段，而我前半年學到的充其量只能當作一個“會寫程式的普通人”，也有聽到別人分享『<strong>達克效應</strong>』原來我正在站愚昧的山頂，視野範圍擴大後才發現會寫程式這件事的範圍作用只在自己的公司。</p><p><img src="/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/1_80Jkmo-O2V6w98nQzYDGjw.webp"><br><em>image <a href="https://georgech3.medium.com/%E6%84%9A%E6%98%A7%E4%B9%8B%E5%B7%94-%E7%B5%95%E6%9C%9B%E4%B9%8B%E8%B0%B7-%E9%81%94%E5%85%8B%E6%95%88%E6%87%89-dk-effect-%E7%9A%84%E7%BE%8E%E9%BA%97%E9%8C%AF%E8%AA%A4-%E5%B0%8D%E7%84%A1%E7%9F%A5%E7%9A%84%E7%84%A1%E6%B3%95%E8%AA%8D%E7%9F%A5-a05b95ccb8a0">source</a></em></p><p>而當時我覺得把自己的時間全部投入水球軟體學院這一個地方，我想在這邊獲得的目標有：</p><ol><li>學會&#x2F;學習怎麼寫程式</li><li>了解除了程式還需要什麼</li><li>確認自己之前的知識是否正確</li><li>找到提升薪水的最短路徑</li><li>認識更多人累積人脈</li></ol><p>這應該是年初剛加進來一、兩個禮拜的目標，而相對應的解法依序為：</p><ol><li>報名<a href="https://waterballsa.tw/design-pattern">水球的軟體精通之旅</a></li><li>多看看學院裡的人都在聊什麼</li><li>參與大家的話題或活動</li><li>目前尚未找到（瓶頸中）</li><li>主動分享自己的故事&#x2F;想法，take之前要先give</li></ol><p>不得不說這半年的收穫確實是很豐富的，有時候我會試著回朔自己的記憶，如果回朔的時間特別久就代表我在那段時期是有在往前進的，反之則停留或倒退。</p><hr><p>到現在這個時間點，我整理整理自己感受的困擾&#x2F;壓抑&#x2F;force：</p><ol><li>我的惰性</li><li>時間管理</li><li>找不到我想要的工作</li><li>缺乏明確的道路</li></ol><p>目前想到相對應的解決法依序為：</p><ol><li>建立自我獎勵機制，讓自己不要想太多做就對了</li><li>多列一些短期目標，並結合獎勵機制創造回饋感</li><li>履歷邊投邊修，結合上面短期目標做一些自己想要的作品</li><li>總之先把 <a href="https://roadmap.sh/python">python&#x2F;backend roadmap</a><br>往上看自己就是一個不夠自律的人，且隨著工作覺得越來越無聊，要想辦法拉回當初寫程式的初衷，做出新奇有趣的東西，且無意間的幫助到一些人。</li></ol><p>所以，我要在這邊列下我下半年要達成的目標：</p><ol><li>找到一份自己喜歡的工作</li><li>水球的課程如期完成</li><li>做出一個拉麵地圖的網站</li><li>日文的複習以及英文的學習</li><li>文章輸出練習</li><li>言語&#x2F;文字轉換程式的速度及完整度</li></ol><p>大概以上，這篇文章最重要的一個目的就是在我迷惘之時，時時刻刻的提醒我要達成夢想就必須往前，哪怕不小心繞了個彎路也要把上面這些達成。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 自我檢視 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> 人生 </tag>
            
            <tag> 自我檢視 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【學習筆記】Django和Flask的練習</title>
      <link href="/2023-06-14%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/"/>
      <url>/2023-06-14%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-06-14django_flask_practice/Django-vs-Flask-1.jpg"><br><em>image <a href="https://www.turing.com/blog/django-vs-flask-which-framework-to-choose/">django-vs-flask-which-framework-to-choose</a></em></p><p>最近在練習 <a href="https://www.djangoproject.com/">Django</a> 和 <a href="https://flask.palletsprojects.com/en/latest/">Flask</a> 的restful相關套件實作方法，來對比一下兩者使用的相關套件等。</p><h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>django要實作restful API有超集的套件是 <a href="https://www.django-rest-framework.org/">django rest framework</a> 跟著官方的tutorial下去實作能大概理解如何快速使用該框架，練習使用到的相關套件：</p><ul><li><a href="https://www.django-rest-framework.org/">django-rest-framework</a>：restful的框架包含serializer序列化器</li><li><a href="https://drf-spectacular.readthedocs.io/en/latest/">drf-spectacular</a>：swagger相關套件</li><li><a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/">django-rest-framework-simplejwt</a>：JWT套件</li></ul><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>flask則是要自己一個一個疊樂高、拼拼圖的那種感覺，各式各樣的flask-OOO套件互相搭配組合，我自己練習用的大概有：</p><ul><li><a href="https://flask-restful.readthedocs.io/en/latest/">flask-restful</a>：resuful的框架</li><li><a href="https://flask-sqlalchemy.palletsprojects.com/en/latest/">flask-sqlalchemy</a>：ORM</li><li><a href="https://flask-migrate.readthedocs.io/en/latest/">flask-migrate</a>：資料庫版控</li><li><a href="https://flask-marshmallow.readthedocs.io/en/latest/">flask-marshmallow</a>：序列化器</li></ul><h2 id="練習django"><a href="#練習django" class="headerlink" title="練習django"></a>練習django</h2><p>練習django的過程中會發現view的寫法會有以下幾種：</p><ul><li>GenericAPIView</li><li>APIView</li><li>ViewSets</li></ul><p>三者的差異目前還沒有太熟悉，還需要加強研究！<br>這篇文章寫得挺詳細的<br><a href="https://zhuanlan.zhihu.com/p/72527077">https://zhuanlan.zhihu.com/p/72527077</a></p><h3 id="django-rest-framework"><a href="#django-rest-framework" class="headerlink" title="django rest framework"></a>django rest framework</h3><p>而且django rest framework由於都已經幫你把很多地方都封裝起來，要進行客製化會需要花一點時間去看source code，相對來說如果只是一般的CRUD使用ViewSets能節省不少寫code的時間！！</p><hr><h2 id="練習flask"><a href="#練習flask" class="headerlink" title="練習flask"></a>練習flask</h2><p>flask倒是看著官方文件和一些實作範例就能很順利開啟一個專案，只不過過程中會有一點問題，在尚未使用flask-migrate時，資料表model.py在create table的時候網路上的範例會教使用python shell去import model的db在執行db.create_all()這邊會報錯現在寫法會要求要使用with app.app.context()才有辦法去執行，這邊還待研究，不過照著官方的文件做就絕對沒問題的！</p><hr><h2 id="做個總結"><a href="#做個總結" class="headerlink" title="做個總結"></a>做個總結</h2><p>目前還需要更深入了解的：</p><ol><li>django 三種view的差異性以及客製化要如何改寫(override function)</li><li>django rest framework中的serializer的實作原理以及如何客製化</li><li>flask 中的專案資料夾層級要怎麼規劃及設計</li><li>flask 尚未完成簡單的CRUD範例</li><li>flask 中app.context是什麼，目前看到很多翻譯寫『應用上下文』？</li></ol><p>在現職中沒有機會碰到這些框架及套件的我，只能下班加緊腳步學習了，增加自己的競爭力，希望下份專案或工作中能活用自己所學的一切！！</p><hr><h1 id="每天進步1-，一年竟能成長37倍！"><a href="#每天進步1-，一年竟能成長37倍！" class="headerlink" title="每天進步1%，一年竟能成長37倍！"></a><a href="https://www.storm.mg/lifestyle/3360705?page=1">每天進步1%，一年竟能成長37倍！</a></h1>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【學習筆記】Python Magic Method 02：__repr__、__str__、__format__、__bytes__</title>
      <link href="/2023-05-21%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part2/"/>
      <url>/2023-05-21%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part2/</url>
      
        <content type="html"><![CDATA[<p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>藉由學習Magic Method能深度的了解Python，也讓我在寫code的時候能有不同的想法和選擇最近在水球軟體學院之軟體設計精通之旅上的一個作業『大老二』中就有部分使用Magic Method讓我的code寫起來舒適許多，課程相關的體驗和想法有機會再來寫篇文章。那我們就進入主題吧！</p><hr><h3 id="object-repr-self"><a href="#object-repr-self" class="headerlink" title="object.__repr__(self)"></a>object.__repr__(self)</h3><ul><li>representation</li><li>Called by the repr() built-in function to compute the “official” string representation of an object.</li></ul><h3 id="object-str-self"><a href="#object-str-self" class="headerlink" title="object.__str__(self)"></a>object.__str__(self)</h3><ul><li>string</li><li>Called by str(object) and the built-in functions format() and print() to compute the “informal” or nicely printable string representation of an object.</li></ul><p>以上兩個就一起講，他們兩個非常地相似，看官方文件重點捕捉__repr__被標註為正式，而__str__被標註為非正式，至於什麼是正式與非正式呢，有在部分文章中看到__repr__是寫給機器看而__str__是寫給人看這樣的說法。</p><ul><li>__repr__呼叫方式repr()或直接輸入該物件</li><li>__str__呼叫方式有print() format() str()</li><li>參考文章：<a href="https://ithelp.ithome.com.tw/articles/10194593">https://ithelp.ithome.com.tw/articles/10194593</a></li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name:<span class="hljs-subst">&#123;self.name&#125;</span>, age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，年齡：<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 而當直接在console中輸入p</span><span class="hljs-comment"># 會跳出：姓名：John，年齡：25</span></code></pre><ul><li>如今天只有使用 __str__，則repr()會顯示該物件的記憶體位置。<br>當今天只有使用 __repr__，則呼叫 __str__ 也會顯示 __repr__ 內容。<br>以下範例：</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name:<span class="hljs-subst">&#123;self.name&#125;</span>, age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># &lt;__main__.Person object at 0x100e91fd0&gt;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，年齡：<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 姓名：John，年齡：25</span></code></pre><hr><h3 id="object-format-self-format-spec"><a href="#object-format-self-format-spec" class="headerlink" title="object.__format__(self, format_spec)"></a>object.__format__(self, format_spec)</h3><ul><li>Called by the format() built-in function, and by extension, evaluation of formatted string literals and the str.format() method, to produce a “formatted” string representation of an object.</li><li>__format__呼叫用format()，可以客製化format後回傳的值</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicFormat</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__format__</span>(<span class="hljs-params">self, format_spec</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;我的名字是：<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>f = MagicFormat(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My name is :<span class="hljs-subst">&#123;f.name&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(f))<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;f&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s&quot;</span> % f)<span class="hljs-comment"># output</span><span class="hljs-comment"># My name is :John  這個單純只是摳該物件的屬性</span><span class="hljs-comment"># 我的名字是：John</span><span class="hljs-comment"># 我的名字是：John</span><span class="hljs-comment"># &lt;__main__.MagicFormat object at 0x100a79fd0&gt;</span></code></pre><ul><li><p>最後一個之所以沒有辦法套用format是因為%s表示string而我上面的class並沒有定義__str__或__repr__所以印出來的會是他的記憶體位置。</p></li><li><p>下面會是比較特殊的用法，看了看覺得滿有趣的。</p></li><li><p>參考文章<a href="https://www.ctyun.cn/zhishi/p-172413">https://www.ctyun.cn/zhishi/p-172413</a></p></li></ul><pre><code class="hljs python">data_dict = &#123;    <span class="hljs-string">&#x27;ymd&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.year&#125;:&#123;0.month&#125;:&#123;0.day&#125;&#x27;</span>,    <span class="hljs-string">&#x27;dmy&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.day&#125;/&#123;0.month&#125;/&#123;0.year&#125;&#x27;</span>,    <span class="hljs-string">&#x27;mdy&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.month&#125;-&#123;0.day&#125;-&#123;0.year&#125;&#x27;</span>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyText</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, year, month, day</span>):        self.year = year        self.month = month        self.day = day    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__format__</span>(<span class="hljs-params">self, format_spec</span>):        fmt = data_dict[format_spec]        <span class="hljs-keyword">return</span> fmt.<span class="hljs-built_in">format</span>(self)d1 = MyText(<span class="hljs-number">2019</span>, <span class="hljs-number">9</span>, <span class="hljs-number">17</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:ymd&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:dmy&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:mdy&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-comment"># output</span><span class="hljs-comment"># 2019:9:17</span><span class="hljs-comment"># 17/9/2019</span><span class="hljs-comment"># 9-17-2019</span></code></pre><ul><li><p>而這邊為什麼要寫0呢，我花了一點時間去理解到底為什麼是0，找到了這篇文章，文章裡面有表示format(index0, index1)而我return fmt.format(self)只有一個參數，所以會去讀到第一個值類似[0]。</p></li><li><p>參考文章：<a href="https://bobbyhadz.com/blog/python-indexerror-replacement-index-1-out-of-range">https://bobbyhadz.com/blog/python-indexerror-replacement-index-1-out-of-range</a></p></li></ul><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;&#125;</span> <span class="hljs-subst">&#123;&#125;</span>&quot;</span>.<span class="hljs-built_in">format</span>(index0, index1)) <span class="hljs-comment"># 字串那邊的&#123;&#125;會根據索引對應到後面format()定義的參數</span></code></pre><ul><li>而format其實還有很多特殊的功能，之後有機會在寫篇文章吧～</li></ul><hr><h3 id="object-bytes-self"><a href="#object-bytes-self" class="headerlink" title="object.__bytes__(self)"></a>object.__bytes__(self)</h3><ul><li>Called by bytes to compute a byte-string representation of an object. This should return a bytes object.</li><li>簡單的一句話，呼叫用bytes()，__bytes__必須回傳bytes物件</li><li>實際使用情境目前還沒有想法</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bytes__</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;here is bytes&#x27;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(p))<span class="hljs-comment"># output</span><span class="hljs-comment"># b&#x27;here is bytes&#x27;</span></code></pre><p>目前是真的不清楚什麼時候會使用到他，跟 __del__ 一樣呢。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> magic method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【學習筆記】Python Magic Method 01：__new__、__init__、__del__。</title>
      <link href="/2023-05-15%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/"/>
      <url>/2023-05-15%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/</url>
      
        <content type="html"><![CDATA[<hr><p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭雙底線結尾，我們常見要定義class屬性時使用的__init__也是Magic Method～，然後我會看Python的document然後一個一個去了解Magic Method到底在做什麼以及怎麼使用。</p><hr><h3 id="object-new-cls-…"><a href="#object-new-cls-…" class="headerlink" title="object.__new__(cls[, …])"></a>object.__new__(cls[, …])</h3><ul><li><p>new</p></li><li><p>Called to create a new instance of class cls. __new__() is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument.</p></li><li><p>__new__ 會在__init__ 之前執行， 其主要功能是實例__init__所指定的屬性。 如果__new__沒有return cls 則__new__不會被調用。 <br>以下是範例：</p><pre><code class="hljs python"><span class="hljs-comment"># new會在init前執行</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicNew</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is new&quot;</span>)        instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> instance    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is init&quot;</span>)        self.name = namec = MagicNew(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># here is new</span><span class="hljs-comment"># here is init</span></code></pre></li><li><p>以下是使用情境為設計模式之單例模式： <br>參考網址：<a href="https://zhuanlan.zhihu.com/p/35943253">https://zhuanlan.zhihu.com/p/35943253</a></p></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 單例模式，該物件存在就不會在new一個新的出來</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:    _instance = <span class="hljs-literal">None</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            cls._instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> cls._instances1 = Singleton()s2 = Singleton()<span class="hljs-built_in">print</span>(s1)<span class="hljs-built_in">print</span>(s2)<span class="hljs-comment"># output:</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># 注意這邊的記憶體位置 s1 s2 會是同一個物件</span></code></pre><hr><h3 id="object-init-self-…"><a href="#object-init-self-…" class="headerlink" title="object.__init__(self[, …])"></a>object.__init__(self[, …])</h3><ul><li>initialization</li><li>Called after the instance has been created (by __new__()), but before it is returned to the caller. The arguments are those passed to the class constructor expression.</li><li>__new__() to create it, and __init__() to customize it<br>__init__就是大家常見的定義該物件屬性的方式了。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 在new出物件時可以透過init來指定該物件所擁有的屬性</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicInit</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span>, say_something: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;I am default&quot;</span></span>):        self.name = name        self.age = age        self.say_something = say_somethingp1 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)p2 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;change the default&quot;</span>)<span class="hljs-built_in">print</span>(p1.name, p1.age, p1.say_something)<span class="hljs-built_in">print</span>(p2.name, p2.age, p2.say_something)<span class="hljs-comment"># output:</span><span class="hljs-comment"># John 25 I am default</span><span class="hljs-comment"># John 25 change the default</span></code></pre><ul><li>不過據我所知好像有滿多奇妙的操作可以在 __init__ 完成，畢竟new出一個物件的時候執行完 __new__ 就會執行 __init__，根據不同的使用情境或許能有不同的操作物件。（待學習….）</li></ul><hr><h3 id="object-del-self"><a href="#object-del-self" class="headerlink" title="object.__del__(self)"></a>object.__del__(self)</h3><ul><li>Called when the instance is about to be destroyed.</li><li>__del__當該物件被消除時會call到這個magic method </li><li>根據官方文件表示：<ul><li>del x doesn’t directly call x.__del__() - the former decrements the reference count for x by one, and the latter is only called when x’s reference count reaches zero.</li><li>del &lt;物件&gt;時並不會直接去call __del__()而會先去扣他所關聯的計算，而物件的new出來初始reference count值為1，隨著使用(指定變數為該物件時)會+1，而del &lt;物件&gt;時該數會-1，直到該物件的reference count為0時才會去call __del__()。 （下面使用sys.getrefcount(&lt;物件&gt;)也算使用唷）<br>參考文章：<a href="https://www.796t.com/content/1542840125.html">https://www.796t.com/content/1542840125.html</a></li></ul></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-keyword">del</span> p<span class="hljs-built_in">print</span>(p)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 刪除了</span><span class="hljs-comment"># Traceback (most recent call last):</span><span class="hljs-comment"># NameError: name &#x27;p&#x27; is not defined</span></code></pre><ul><li>一開始先new出一個物件出來後直接 del &lt;物件&gt;該物件就不會存在程式所以就會觸發__del__()。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 當今天使用該物件不只一次時</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)<span class="hljs-comment"># sys.getrefcount() 可以取得reference count</span>p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(sys.getrefcount(p))p1 = p<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-keyword">del</span> p1<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待兩秒鐘&quot;</span>)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 3</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 等待兩秒鐘後</span><span class="hljs-comment"># 刪除了</span></code></pre><ul><li>而當今天讓多個物件去使用這個class則會顯示如上圖，而在整個程式結束後才會觸發 __del__()。<br>目前還不清楚什麼情況下會有機會去使用。（待學習….）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> magic method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【抱怨】並不能解決問題！！</title>
      <link href="/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/"/>
      <url>/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/0_MCz9mw3Nb8072FP9.webp"><br><em>image <a href="https://www.businessweekly.com.tw/careers/blog/23638">source</a></em></p><p>大家是否對生活中有許多不滿，或是很常聽到同事朋友在抱怨什麼什麼事情而當下覺得別在抱怨了聽了都煩了，但自己碰到同樣的狀況時，也會不會不小心成為了一個愛抱怨的人呢？</p><p>最近在水球軟體學院看到大家討論主管職，也在網路上看到一些文章，再結合自己實際遇到的情況，想要好好的整理整理並找出一個我認為相對合宜的作法～</p><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>我先來稍微講講我在工作中遇到的問題。<br>我目前在一家ＯＯ公司就職，而這是我第一份的軟體工作，我很感謝主管給我機會讓沒有經驗的我加入公司並學習軟體的基本知識，而我進來公司幾個禮拜後發現，這邊的資訊部有著非常獨特的分工及步驟，大家都是各自開發自己負責的系統，並在有需要資訊交流的時候在撰寫API供同事使用，我也沒有多想畢竟是第一份，所以很快就接受了這樣的模式。</p><p>直到最近慢慢接觸不同的工程師也聽到不同的工作環境又看了很多不同的文章分享軟體工程的知識，而我很快就進入了『<strong>比較</strong>』這個過程，再加上公司專案的一些狀況，然後就開始有些不滿及抱怨。</p><p>比較是正常的，人都會想要成長想要到自己理想的地方，但比較也有分健康跟不健康的之後再討論。</p><p>而不滿及抱怨也都是很正常的事，世界上只有極少數的東西是完美的，而大部分事情是為追求完美而妥協。</p><p>所以最近我開始反思自己：</p><ul><li>是不是抱怨過頭了？</li><li>是不是對主管有了一些不好的偏見？</li><li>是不是對太過於自我為中心了？</li><li>是不是自己的行為舉止已經影響到了同事或朋友？</li><li>是不是自己不適合這裡？</li><li>是不是自己能力不夠？</li><li>是不是一直重複的以上壞的迴圈而break不出來？</li></ul><p>這些是我對我自己的反省，以及我應該要怎麼樣調整自己的心態，引導自己break壞的迴圈導入好的迴圈呢？</p><h2 id="水球軟體學院和一些文章"><a href="#水球軟體學院和一些文章" class="headerlink" title="水球軟體學院和一些文章"></a>水球軟體學院和一些文章</h2><p>在這邊看到大家在討論主管這件事也自己看了一些文章做的心得，千萬不要對主管抱持著這兩種狀態：</p><p>一. 把主管當作神</p><pre><code>當作是神無腦的跟著主管，這或許是不錯的主意，但這樣自己真的會進步嗎？更何況主管也是人，也不一定每次都是對的，而無腦跟著主管而不疑，最終造成專案進步延遲又或是直接收掉還是自己被懷疑能力，到最後都不是一個好結果。</code></pre><p>二、把主管當作鬼</p><pre><code>當作是鬼，見到主管就覺得恐怖，不想面對不想溝通不想聽到主管任何的要求，那不是請主管離職就是自己離職，想也知道是後者，最後損失最大的也是自己，而也留下了一個社會／企業對自己不好的印象，沒人可以保證在這邊發生這樣的事情不會影響到自己後來的職涯發展。</code></pre><p>我們再回頭想想，主管既然能有這個職位，那必然有他的能力（不管哪方面），那身為底下的員工是不是也該給一定的尊重呢（前提是主管有尊重你），<strong>尊重和溝通</strong>會是好的迴圈之起點。</p><h2 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h2><p>這邊我把自己的心態調整成這樣：</p><ol><li>先嘗試跟主管溝通看看到底哪裡出了問題</li><li>主管改變不了或拒絕溝通那只好改變自己，讓自己在工作時舒服一點</li><li>盡可能的反思自己的言行舉止，不要有太多負面情緒</li><li>主管沒有盡責那不是我們能控制的，至少我們控制自己做個好下屬／員工</li><li>討論事情千萬不要帶任何情緒，盡可能客觀，收起一切偏見，做到論事別論人</li><li>工作就是要開心，積極正面的態度也能影響到周圍的人</li><li>環境不好真的嘗試了也改變不了，那何不試試改變自己</li><li>以上真的沒辦法達成，那就再回來反省調整，讓自己變成更好的人</li></ol><p>目前我在工作的心態上希望能調整成這樣的狀態，或許會有人說改變不了自己就改變環境／公司，但<strong>我覺得心態對了到哪都不是問題，心態錯了到哪都還是會產生問題</strong>。</p><p>而本文的最後在回顧到主題，<strong>抱怨</strong>其實是可以的，適當的抒發情緒會使心靈更加健康，但抱怨不能解決問題，抱怨完後還是要對現況的問題點進行分析，找出可以改善的地方進行調整，至少下次遇到同樣的情境狀況時，自己也能有更多的選項避免掉最不開心的結尾。</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><h3 id="五分鐘的抱怨"><a href="#五分鐘的抱怨" class="headerlink" title="五分鐘的抱怨"></a>五分鐘的抱怨</h3><p><img src="/images/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/0_tE6BzOdq9DILj38g.webp"><br><em>image <a href="https://www.freepik.com/vectors/five-minutes">source</a></em></p><p>當遇到不滿的事情是，抱怨是不能解決問題的，五分鐘抱怨後收起自己的情緒，反思反省自己在這件事當中學習到什麼，而下次遇到類似的問題又能怎麼改進，而成為更好的人，讓自己的邁向正的循環。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django網頁開發設計，新進展！</title>
      <link href="/2023-04-23Django%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC%E8%A8%AD%E8%A8%88%EF%BC%8C%E6%96%B0%E9%80%B2%E5%B1%95%EF%BC%81/"/>
      <url>/2023-04-23Django%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC%E8%A8%AD%E8%A8%88%EF%BC%8C%E6%96%B0%E9%80%B2%E5%B1%95%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-04-23Django%E9%96%8B%E7%99%BC%E6%96%B0%E9%80%B2%E5%B1%95/0__po9b2MR2fXklzUT.gif"><br><em>image <a href="https://memes.tw/gif-post?maker=16">memes.tw</a></em></p><p>延續前幾篇的想法下，又多冒出了一些新的點子！<br>而最新的點子好像才有辦法解決掉我一開始的煩惱。</p><hr><p>一開始的目標是我要我的view是乾淨的、舒服的，於是我把一些相關的判斷或對資料庫的處理額外拉了類別出來，就前幾篇來說會是Member類別有login這個方法，然而這樣我的view裡面依舊有一些基本的判斷，例如：判斷request的method、拿取前端拋回來的資料⋯⋯依舊會讓我的view乘載過多的資訊，導致頁面一多看起來就亂亂的，於是參考了 <a href="https://discord.com/invite/waterballsa">水球軟體學院</a> 社群夥伴的想法，我終於打造出一版我目前滿意的寫法，大致順序如下：</p><ul><li>把原本view裡面的資訊包成一個Service類別</li><li>在Service類別中處理原來會跟Member類別的行為</li><li>大功告成</li></ul><pre><code class="hljs python"><span class="hljs-comment">#views.py</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> LoginService(request)</code></pre><p>這樣變得非常的乾淨呢！！再來只要把LoginService做好～</p><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginService</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request</span>):    self.request = request  <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;GET&quot;</span>:      ctx = &#123;&#125;      <span class="hljs-keyword">return</span> render(self.request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;POST&quot;</span>:      data = &#123;&#125;      會員帳號 = self.request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      會員密碼 = self.request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      member = 會員()      <span class="hljs-keyword">if</span> member.login(會員帳號, 會員密碼):        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確！！&quot;</span>      <span class="hljs-keyword">else</span>:        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！帳號密碼有誤～&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre><p>完美！！這樣就可以很完美的把我的view變乾淨。</p><hr><p>但今天歹擠謀假甘單（事情沒有那麼簡單），我的網站不只有member這個角色，還有store這個角色呢～照這樣看來我不就又要開一個view又要開一個LoginService呢？？（當然view要開因為不同頁面），於是我突發奇想蹦出了這個作法：</p><p>直接把store類別 &#x2F; 物件直接當作參數丟進去！！</p><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> LoginService(request, Store()).login()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> LoginService(request, Member()).login()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginService</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request, user</span>):    self.request = request    self.user = user    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;GET&quot;</span>:      ctx = &#123;&#125;      <span class="hljs-keyword">return</span> render(self.request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;POST&quot;</span>:      data = &#123;&#125;      會員帳號 = self.request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      會員密碼 = self.request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      <span class="hljs-comment">#這裡就直接修改掉！！</span>      <span class="hljs-keyword">if</span> self.user.login(會員帳號, 會員密碼):        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確！！&quot;</span>      <span class="hljs-keyword">else</span>:        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！帳號密碼有誤～&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre><p>可喜可賀！！這樣我的LoginService就可以同時給member和store使用了，假設未來又多了新的角色我也可以直接使用LoginService（除非他今天登入不用帳號密碼了），於是乎我就這樣開心的繼續寫著程式～～</p><hr><p>心得：很感謝社群的夥伴願意分享想法，不然我自己一個人要想出這些東西可能還要花上好一段時間，我也相信我這個一定不是最佳解答，但至少以現在來說我可以繼續開心的寫程式，而不會有一個疙瘩黏在那邊，如果你有更好的想法也歡迎一起交流交流～～</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想法不斷，選擇困難</title>
      <link href="/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/"/>
      <url>/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/0__xXSZf9Ve9CJFFkm.webp"><br><em>image <a href="https://www.ttnmedia.com/%E6%8C%89%E4%B8%8B%E6%9A%AB%E5%81%9C%E9%88%95-%E9%96%8B%E5%A7%8B%E6%80%9D%E8%80%83/">source</a></em></p><p>本日開發延續之前的想法，發現越想越多，越想越難下手～這可能也是選擇障礙的一種！</p><hr><p>今天我試著把許多地方改變了許多，來看看before after吧。</p><h2 id="原本的做法"><a href="#原本的做法" class="headerlink" title="原本的做法"></a>原本的做法</h2><ul><li>目前會員登入的流程都是在view裡面，包括檢查是否已經是會員，檢查密碼是不是正確的，再送Json給前端看這個人到底有沒有登入成功。寫起來大概會長這樣。<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">會員登入頁面</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:    ctx = &#123;&#125;    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:    data = &#123;&#125;    會員帳號 = request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    會員密碼 = request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    會員_query_set = 會員資料表.objects.<span class="hljs-built_in">filter</span>(會員帳號欄位=會員帳號)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>(會員_query_set) == []:      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！你還沒有註冊！&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)    <span class="hljs-keyword">if</span> check_password(會員_query_set.會員密碼, 會員密碼):      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確通過&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)    <span class="hljs-keyword">else</span>:      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！密碼錯誤&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre>現在看可能有些人已經受不了了，什麼哩哩叩叩的東西都摻雜在一起！？</li></ul><h2 id="改版後的做法"><a href="#改版後的做法" class="headerlink" title="改版後的做法"></a>改版後的做法</h2><ul><li>改版後大概會像是把所有東西都打包起來，把view清乾淨。</li></ul><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">會員登入頁面</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:    ctx = &#123;&#125;    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:    data = &#123;&#125;    會員帳號 = request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    會員密碼 = request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    member = 會員()    <span class="hljs-keyword">if</span> member.login(會員帳號, 會員密碼):      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確！！&quot;</span>    <span class="hljs-keyword">else</span>:      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！帳號密碼有誤～&quot;</span>    <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre><p>這樣子感覺起來好像好一點了，至少變的比較好讀了。</p><hr><p>於是呢，我就改改改，之前幾乎都沒有包成物件的地方都調整了許多，也盡量找出符合他們的method，類似：member.login(), member.register(), member.create_case()等等等…..，盡量找出是屬於這個物件的行為，也剛好之前有試著做OOA，所以大部分都只是抓漏，把以前程式碼符合行為的地方抓出來包，包著包著view就越來越輕便了，可喜可賀，可口可樂。</p><p>不過，後面又有衍生的問題產生了，我每一個物件的方法隨著我抓漏的過程中越來越多，然而我目前也都沒有使用到繼承也還沒有感覺到可以使用的點，讓我有點不明白這樣的方面究竟是對的還是錯的呢？？</p><p>最後希望明天的我可以幫現在的我解決這些問題！！</p><hr><p>其實還有一個地方也滿讓我兩難的，就是member.login()這個做法是好的嗎？還是其實會需要有一個Service物件來讓member可以登入呢？</p><p>問了ChatGPT給我的回應是(由於那個對話被我刪掉了只能憑印象)：</p><h2 id="以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。"><a href="#以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。" class="headerlink" title="以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。"></a>以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。</h2><p>但我還是懷疑了他，真的是這樣嗎！？</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探店家會員網站設計</title>
      <link href="/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/"/>
      <url>/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/0_E4O1EYZpyOn2aYbt.jpg"><br><em>image <a href="https://unsplash.com/photos/gray-and-blue-open-signage-c9FQyqIECds">unsplash</a></em></p><p>大家好我是小智，我是一個轉職者，目前剛轉職差不多半年多一點，這篇主要是拿來紀錄我最近在開發上的疑問和設計中的疑問，希望未來的我可以來幫我解答！！</p><hr><h3 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h3><p>目前我正在開發一個購物網站，有會員也有店家，以下是我的順序。</p><ol><li>我先設計了資料庫的table，我的資料庫會員跟店家的表格是完全分開的。</li><li>我建立了Django專案初始化，並把前面的table加入到Django的model中。</li><li>我就直接使用Django的MTV開發，所有的邏輯都集中在app的view裡面，然後就這樣開發到了最近。</li></ol><hr><h3 id="先整理"><a href="#先整理" class="headerlink" title="先整理"></a>先整理</h3><p>最近一直很煩躁，我的view越來越龐大，每當有需求變動時要改一個地方就要花很多時間找在哪裡，搞的我非常痛苦，就在此時，我決定我要整理我的程式碼！！以下是我的順序。</p><ol><li>首先我先試著對我的網站做OOA把所有物件之間的關係畫出來，同時梳理現在對網站的需求。</li><li>把上面所有物件都先開立出來，並試著更動現有的程式碼。</li><li>然後把view裡面所有的網頁(function)拆開，目前是有分步驟和分頁面。</li></ol><hr><h3 id="第二次整理"><a href="#第二次整理" class="headerlink" title="第二次整理"></a>第二次整理</h3><p>然後我又想到我的view裡面也摻雜了一堆的DjangoORM我就想著我能不能也把他們拆出來，於是又出來了另一個版本。</p><ol><li>我把view中的ORM全都拆掉，並建立專屬ORM的物件群。</li><li>然後把剛剛OOA所建立的物件中列幾個方法，有讀取資料庫時(通常是New的時候)就透過ORM物件去讀取資料庫並拋回view。</li></ol><hr><h3 id="最後總結"><a href="#最後總結" class="headerlink" title="最後總結"></a>最後總結</h3><p>完成這版後，基本上我的程式已經拆的很細了，流程大概會變成這樣，以一個店家要登入為例。</p><ol><li>店家到我的網站登入頁面打完帳密案下登入ajax POST。</li><li>這個request會打到我的server。</li><li>server中間nginx略過。</li><li>來到Django裡面之後根據路由由urls.py去分配。</li><li>urls.py分配到指定的view.py。</li><li>view.py裡面有個login的function他在流到POST method。</li><li>到POST method後會先去讀取Store(id)物件。</li><li>Store(id)會去讀取StoreORM(id&#x3D;id)會確認存不存在。</li><li>存在之後再比對密碼的正確性。</li><li>之後回傳結果Json在丟給前端ajax處理。</li></ol><hr><p>目前改成這樣是有比較開心了，不過還是有一些些的違和感，感覺好像還是有一些地方有問題，想了想覺得就先這樣吧，之後如果違和感大到忍受不住再來跑一次上述的流程或是查一些資料看看有沒有辦法優化吧～～</p><h2 id="結論就是：交給未來的我"><a href="#結論就是：交給未來的我" class="headerlink" title="結論就是：交給未來的我"></a>結論就是：交給未來的我</h2><p>最後寫完的心得：大概就是好像還是需要圖片支援，純文字的話感覺有點乏味，等有空的時候再來補吧～～</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git CICD with Docker</title>
      <link href="/2023-03-18Git_CICD_with_Docker/"/>
      <url>/2023-03-18Git_CICD_with_Docker/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2023-03-18Git_CICD_with_Docker/1_bZP17SmwRZihfAYDr5KBFg.webp"><br><em>image <a href="https://1000logos.net/docker-logo/">docker-logo</a></em></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>這個主題是在水球軟體學院中舉辦的Docker共學會最終回的成果發表文章，本人我也是第一次寫文章，主要目的應該會著重在自己的一個紀錄，內容如果不是那麼正確還請多多包容和指點以下正篇。</p><hr><h1 id="正篇："><a href="#正篇：" class="headerlink" title="正篇："></a>正篇：</h1><p>Docker是一個容器化服務，他可以在一台電腦中切出好幾個環境分別執行不同的任務。</p><p>這邊會進行一個簡單的web server然後執行Github actions 或 Gitlab CICD達成自動化測試以及自動化部署。</p><p>稍後將會介紹到的項目有以下幾樣：</p><ul><li><p>Dockerfile</p></li><li><p>docker-compose.yml</p></li><li><p>github&#x2F;workflows 中的yml檔</p></li></ul><hr><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>最基本的要架設一個網站會需要的服務為web server和database。</p><p>那們我將會以Python Django串接Nginx做為web server那database是使用Django預設的sqlite簡單演示。</p><h3 id="資料夾階層會長這樣"><a href="#資料夾階層會長這樣" class="headerlink" title="資料夾階層會長這樣"></a>資料夾階層會長這樣</h3><pre><code class="hljs bash">+根目錄|+-+nginx/|      ||      +--Dockerfile|      +--docker-nginx-web.conf|      +--nginx.conf+-+web/|     ||     +--Dockerfile|     +--requirements.txt|     +-+app/以下略|+--docker-compose.yml</code></pre><h3 id="這是Django也就是web裡面的Dockerfile"><a href="#這是Django也就是web裡面的Dockerfile" class="headerlink" title="這是Django也就是web裡面的Dockerfile"></a>這是Django也就是web裡面的Dockerfile</h3><pre><code class="hljs bash">FROM python:3.8.5LABEL maintainer=<span class="hljs-string">&quot;xxxx@gmail.com&quot;</span>WORKDIR /webCOPY . /web/RUN pip install --upgrade pip RUN pip install -r requirements.txtWORKDIR /web/appVOLUME /webEXPOSE 8001</code></pre><h3 id="再來是nginx裡面的Dockerfile"><a href="#再來是nginx裡面的Dockerfile" class="headerlink" title="再來是nginx裡面的Dockerfile"></a>再來是nginx裡面的Dockerfile</h3><pre><code class="hljs bash">FROM nginx:latestLABEL maintainer=<span class="hljs-string">&quot;xxxx@gmail.com&quot;</span>COPY nginx.conf /etc/nginx/nginx.confCOPY docker-nginx-web.conf /etc/nginx/sites-available/RUN <span class="hljs-built_in">mkdir</span> -p /etc/nginx/sites-enabled/ &amp;&amp; \    <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/docker-nginx-web.conf /etc/nginx/sites-enabled/CMD [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</code></pre><h3 id="然後是根目錄下的docker-compose-yml"><a href="#然後是根目錄下的docker-compose-yml" class="headerlink" title="然後是根目錄下的docker-compose.yml"></a>然後是根目錄下的docker-compose.yml</h3><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3.8&#x27;</span>services:        app_web:                build: ./web                container_name: app_web                restart: always                <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;uwsgi --ini uwsgi.ini&quot;</span>]                volumes:                        - web_data:/web/app                ports:                        - <span class="hljs-string">&quot;8001:8001&quot;</span>                environment:                        - PYTHONUNBUFFERED=TURE        app_nginx:                build: ./nginx                container_name: app_nginx                restart: always                volumes:                        - web_data:/web/app                ports:                        - <span class="hljs-string">&quot;80:80&quot;</span>                depends_on:                        - app_webvolumes:        web_data:</code></pre><p>那我們這邊docker-compose.yml裡面的build會去找尋web和nginx目錄下的Dockerfile並根據Dockerfile的內容去啟動container。</p><p>這邊下指令</p><pre><code class="hljs bash">docker-compose up --build -d</code></pre><p>其實就會直接把兩個container建立起來了。</p><hr><h2 id="Github-actions"><a href="#Github-actions" class="headerlink" title="Github actions"></a>Github actions</h2><p>然後就可以開始寫Github actions的yml檔囉！</p><h3 id="我們到Github的頁面點選Actions"><a href="#我們到Github的頁面點選Actions" class="headerlink" title="我們到Github的頁面點選Actions"></a>我們到Github的頁面點選Actions</h3><p><img src="/images/2023-03-18Git_CICD_with_Docker/1_NEBsJwswssn2VffDuNyVSg.webp"></p><h3 id="點選下方的Configure就會先幫你建立一個預設的yml"><a href="#點選下方的Configure就會先幫你建立一個預設的yml" class="headerlink" title="點選下方的Configure就會先幫你建立一個預設的yml"></a>點選下方的Configure就會先幫你建立一個預設的yml</h3><p><img src="/images/2023-03-18Git_CICD_with_Docker/1_eT-ez4_d77qUFV54NycBig.webp"></p><p>這邊就可以開始編輯自己的yml檔，但是Github上也有很多已經編輯好的yml檔會出現在Configure下方可以選用。</p><p><img src="/images/2023-03-18Git_CICD_with_Docker/1_Zk9WR4svGoxlIuGd59R8gw.webp"></p><p>那這邊我就先用預設的yml來編輯</p><p>那預設的yml呢它上面會有很詳細的註解說明每一個指令的功用，這邊只截取我需要的部分把它改寫成這樣</p><pre><code class="hljs bash">name: Django CIon:  push:    branches: [ <span class="hljs-string">&quot;main&quot;</span> ]  pull_request:    branches: [ <span class="hljs-string">&quot;main&quot;</span> ]<span class="hljs-built_in">jobs</span>:  build:    runs-on: ubuntu-latest    strategy:      max-parallel: 4      matrix:        python-version: [3.8]    steps:    - uses: actions/checkout@v3    - name: Set up Python <span class="hljs-variable">$&#123;&#123; matrix.python-version &#125;</span>&#125;      uses: actions/setup-python@v3      with:        python-version: <span class="hljs-variable">$&#123;&#123; matrix.python-version &#125;</span>&#125;    - name: Install Dependencies      run: |        python -m pip install --upgrade pip        pip install -r web/requirements.txt    - name: Run Tests      run: |        python  web/app/manage.py <span class="hljs-built_in">test</span></code></pre><p>這邊是當你對這個repositories有push或是pull_request的時候就會觸發job的程序，上面那邊有$NaN是我們可以對他執行多個版本的測試，這邊我只有跑一個python 3.8，那我們看到最後一行，這個就只是在跑Django的測試內容。</p><h3 id="接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分"><a href="#接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分" class="headerlink" title="接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分"></a>接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分</h3><pre><code class="hljs bash">name: Django CD<span class="hljs-comment"># 只有在 CI 的 workflow 完成時才會執行此 workflow</span><span class="hljs-comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run</span>on:  workflow_run:    workflows: [ Django CI ]    types:      - completed<span class="hljs-built_in">jobs</span>:  deploy:    runs-on: ubuntu-latest    <span class="hljs-comment"># 注意前面 workflow_run 的 completed 意思是「完成」，不論執行結果成功或是失敗都算是「完成」</span>    <span class="hljs-comment"># 但是一般來說測試如果失敗就應該暫停部屬至正式環境</span>    <span class="hljs-comment"># 因此這裡加上一個 if 判斷，只有 CI 成功才會執行此 workflow</span>    <span class="hljs-comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run</span>    <span class="hljs-keyword">if</span>: <span class="hljs-variable">$&#123;&#123; github.event.workflow_run.conclusion == &#x27;success&#x27; &#125;</span>&#125;        steps:      <span class="hljs-comment"># 使用 appleboy/ssh-action@master 這個 action 遠端連線至正式環境</span>      <span class="hljs-comment"># https://github.com/appleboy/ssh-action</span>      - name: Deployment        uses: appleboy/ssh-action@master        with:          host: <span class="hljs-variable">$&#123;&#123; secrets.HOST &#125;</span>&#125;          key: <span class="hljs-variable">$&#123;&#123; secrets.TOKEN &#125;</span>&#125;          username: ec2-user          <span class="hljs-comment"># 執行部屬的指令</span>          <span class="hljs-comment">#docker rmi -f $(docker images -q  -f dangling=true)</span>          <span class="hljs-comment">#docker volume rm $(docker volume ls -q -f dangling=true)</span>          script: |             <span class="hljs-built_in">whoami</span>                    sudo yum -y install docker            sudo yum -y install git             sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(<span class="hljs-built_in">uname</span> -s)-$(<span class="hljs-built_in">uname</span> -m) -o /usr/local/bin/docker-compose            sudo <span class="hljs-built_in">chmod</span> 777 /usr/local/bin/docker-compose            docker-compose version            <span class="hljs-built_in">cd</span> ~            sudo <span class="hljs-built_in">rm</span> -fr *            sudo git <span class="hljs-built_in">clone</span> https://github.com/xxx/testCICD.git            <span class="hljs-built_in">cd</span> testCICD            sudo systemctl restart docker            sudo <span class="hljs-built_in">chmod</span> 777 /var/run/docker.sock            docker-compose down            docker rmi -f $(docker images -q  -f dangling=<span class="hljs-literal">true</span>)            docker volume <span class="hljs-built_in">rm</span> $(docker volume <span class="hljs-built_in">ls</span> -q -f dangling=<span class="hljs-literal">true</span>)            docker-compose up --build -d</code></pre><p>這邊我是參考了appleboy的ssh-action，這樣就可以透過ssh的方式連接到你的機器裡做上面所寫好的script了，那上面有兩個地方應該會有問題就是host跟key那兩個變數的新增位置在Settings</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p><img src="/images/2023-03-18Git_CICD_with_Docker/1_8Wz_y3La0uRxRcdfkytSvA.webp"></p><h3 id="Secrets-and-variables"><a href="#Secrets-and-variables" class="headerlink" title="Secrets and variables"></a>Secrets and variables</h3><p>裡面的Security點開Secrets and variables中的Actions</p><p><img src="/images/2023-03-18Git_CICD_with_Docker/1_PC6h-Bnv3I5Ow5j0U4NbRQ.webp"></p><p>你會看到</p><p><img src="/images/2023-03-18Git_CICD_with_Docker/1_y0993aLDo40RPOChDZMQkw.webp"></p><p>這邊就可以管理你在Github actions中的任何密鑰以及變數。</p><p>這邊這個CICD最終會部署到我在AWS EC2中架設的一個小機器裡面，裡頭還有很多細節也有很多我還沒搞清楚的地方，之後有機會在拆分主題來一一探討。</p><hr><p>最後，我是一個轉職的工程師，目前剛轉滿半年多一點，還在努力學習中，如果有任何問題或建議都可以私訊我<a href="mailto:&#109;&#x32;&#51;&#53;&#54;&#56;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#109;&#x32;&#51;&#53;&#54;&#56;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a>，我也常在 <a href="https://discord.gg/waterballsa">水球軟體學院</a> 活動，歡迎大家一起加入這個大社群一起學習一起進步！！</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github actions </tag>
            
            <tag> docker </tag>
            
            <tag> 水球軟體學院 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
