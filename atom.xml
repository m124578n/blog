<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shun Chih&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-15T06:41:03.376Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Shun Chih</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【學習筆記】Django和Flask的練習</title>
    <link href="http://example.com/2023/06/14/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/"/>
    <id>http://example.com/2023/06/14/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/</id>
    <published>2023-06-14T12:00:00.000Z</published>
    <updated>2023-12-15T06:41:03.376Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/django_flask_practice/Django-vs-Flask-1.jpg"><br><em>From <a href="https://www.turing.com/blog/django-vs-flask-which-framework-to-choose/">django-vs-flask-which-framework-to-choose</a></em></p><p>最近在練習 <a href="https://www.djangoproject.com/">Django</a> 和 <a href="https://flask.palletsprojects.com/en/latest/">Flask</a> 的restful相關套件實作方法，來對比一下兩者使用的相關套件等。</p><h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>django要實作restful API有超集的套件是 <a href="https://www.django-rest-framework.org/">django rest framework</a> 跟著官方的tutorial下去實作能大概理解如何快速使用該框架，練習使用到的相關套件：</p><ul><li><a href="https://www.django-rest-framework.org/">django-rest-framework</a>：restful的框架包含serializer序列化器</li><li><a href="https://drf-spectacular.readthedocs.io/en/latest/">drf-spectacular</a>：swagger相關套件</li><li><a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/">django-rest-framework-simplejwt</a>：JWT套件</li></ul><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>flask則是要自己一個一個疊樂高、拼拼圖的那種感覺，各式各樣的flask-OOO套件互相搭配組合，我自己練習用的大概有：</p><ul><li><a href="https://flask-restful.readthedocs.io/en/latest/">flask-restful</a>：resuful的框架</li><li><a href="https://flask-sqlalchemy.palletsprojects.com/en/latest/">flask-sqlalchemy</a>：ORM</li><li><a href="https://flask-migrate.readthedocs.io/en/latest/">flask-migrate</a>：資料庫版控</li><li><a href="https://flask-marshmallow.readthedocs.io/en/latest/">flask-marshmallow</a>：序列化器</li></ul><h2 id="練習django"><a href="#練習django" class="headerlink" title="練習django"></a>練習django</h2><p>練習django的過程中會發現view的寫法會有以下幾種：</p><ul><li>GenericAPIView</li><li>APIView</li><li>ViewSets</li></ul><p>三者的差異目前還沒有太熟悉，還需要加強研究！<br>這篇文章寫得挺詳細的<br><a href="https://zhuanlan.zhihu.com/p/72527077">https://zhuanlan.zhihu.com/p/72527077</a></p><h3 id="django-rest-framework"><a href="#django-rest-framework" class="headerlink" title="django rest framework"></a>django rest framework</h3><p>而且django rest framework由於都已經幫你把很多地方都封裝起來，要進行客製化會需要花一點時間去看source code，相對來說如果只是一般的CRUD使用ViewSets能節省不少寫code的時間！！</p><hr><h2 id="練習flask"><a href="#練習flask" class="headerlink" title="練習flask"></a>練習flask</h2><p>flask倒是看著官方文件和一些實作範例就能很順利開啟一個專案，只不過過程中會有一點問題，在尚未使用flask-migrate時，資料表model.py在create table的時候網路上的範例會教使用python shell去import model的db在執行db.create_all()這邊會報錯現在寫法會要求要使用with app.app.context()才有辦法去執行，這邊還待研究，不過照著官方的文件做就絕對沒問題的！</p><hr><h2 id="做個總結"><a href="#做個總結" class="headerlink" title="做個總結"></a>做個總結</h2><p>目前還需要更深入了解的：</p><ol><li>django 三種view的差異性以及客製化要如何改寫(override function)</li><li>django rest framework中的serializer的實作原理以及如何客製化</li><li>flask 中的專案資料夾層級要怎麼規劃及設計</li><li>flask 尚未完成簡單的CRUD範例</li><li>flask 中app.context是什麼，目前看到很多翻譯寫『應用上下文』？</li></ol><p>在現職中沒有機會碰到這些框架及套件的我，只能下班加緊腳步學習了，增加自己的競爭力，希望下份專案或工作中能活用自己所學的一切！！</p><hr><h1 id="每天進步1-，一年竟能成長37倍！"><a href="#每天進步1-，一年竟能成長37倍！" class="headerlink" title="每天進步1%，一年竟能成長37倍！"></a><a href="https://www.storm.mg/lifestyle/3360705?page=1">每天進步1%，一年竟能成長37倍！</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/django_flask_practice/Django-vs-Flask-1.jpg&quot;&gt;&lt;br&gt;&lt;em&gt;From &lt;a href=&quot;https://www.turing.com/blog/django-vs-flask-whi</summary>
      
    
    
    
    <category term="學習" scheme="http://example.com/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="http://example.com/tags/django/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】Python Magic Method 02：__repr__、__str__、__format__、__bytes__</title>
    <link href="http://example.com/2023/05/21/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part2/"/>
    <id>http://example.com/2023/05/21/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part2/</id>
    <published>2023-05-21T12:00:00.000Z</published>
    <updated>2023-12-15T06:26:48.120Z</updated>
    
    <content type="html"><![CDATA[<p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>藉由學習Magic Method能深度的了解Python，也讓我在寫code的時候能有不同的想法和選擇最近在水球軟體學院之軟體設計精通之旅上的一個作業『大老二』中就有部分使用Magic Method讓我的code寫起來舒適許多，課程相關的體驗和想法有機會再來寫篇文章。那我們就進入主題吧！</p><hr><h3 id="object-repr-self"><a href="#object-repr-self" class="headerlink" title="object.__repr__(self)"></a>object.__repr__(self)</h3><ul><li>representation</li><li>Called by the repr() built-in function to compute the “official” string representation of an object.</li></ul><h3 id="object-str-self"><a href="#object-str-self" class="headerlink" title="object.__str__(self)"></a>object.__str__(self)</h3><ul><li>string</li><li>Called by str(object) and the built-in functions format() and print() to compute the “informal” or nicely printable string representation of an object.</li></ul><p>以上兩個就一起講，他們兩個非常地相似，看官方文件重點捕捉__repr__被標註為正式，而__str__被標註為非正式，至於什麼是正式與非正式呢，有在部分文章中看到__repr__是寫給機器看而__str__是寫給人看這樣的說法。</p><ul><li>__repr__呼叫方式repr()或直接輸入該物件</li><li>__str__呼叫方式有print() format() str()</li><li>參考文章：<a href="https://ithelp.ithome.com.tw/articles/10194593">https://ithelp.ithome.com.tw/articles/10194593</a></li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name:<span class="hljs-subst">&#123;self.name&#125;</span>, age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，年齡：<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 而當直接在console中輸入p</span><span class="hljs-comment"># 會跳出：姓名：John，年齡：25</span></code></pre><ul><li>如今天只有使用 __str__，則repr()會顯示該物件的記憶體位置。<br>當今天只有使用 __repr__，則呼叫 __str__ 也會顯示 __repr__ 內容。<br>以下範例：</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name:<span class="hljs-subst">&#123;self.name&#125;</span>, age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># &lt;__main__.Person object at 0x100e91fd0&gt;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，年齡：<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 姓名：John，年齡：25</span></code></pre><hr><h3 id="object-format-self-format-spec"><a href="#object-format-self-format-spec" class="headerlink" title="object.__format__(self, format_spec)"></a>object.__format__(self, format_spec)</h3><ul><li>Called by the format() built-in function, and by extension, evaluation of formatted string literals and the str.format() method, to produce a “formatted” string representation of an object.</li><li>__format__呼叫用format()，可以客製化format後回傳的值</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicFormat</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__format__</span>(<span class="hljs-params">self, format_spec</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;我的名字是：<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>f = MagicFormat(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My name is :<span class="hljs-subst">&#123;f.name&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(f))<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;f&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s&quot;</span> % f)<span class="hljs-comment"># output</span><span class="hljs-comment"># My name is :John  這個單純只是摳該物件的屬性</span><span class="hljs-comment"># 我的名字是：John</span><span class="hljs-comment"># 我的名字是：John</span><span class="hljs-comment"># &lt;__main__.MagicFormat object at 0x100a79fd0&gt;</span></code></pre><ul><li><p>最後一個之所以沒有辦法套用format是因為%s表示string而我上面的class並沒有定義__str__或__repr__所以印出來的會是他的記憶體位置。</p></li><li><p>下面會是比較特殊的用法，看了看覺得滿有趣的。</p></li><li><p>參考文章<a href="https://www.ctyun.cn/zhishi/p-172413">https://www.ctyun.cn/zhishi/p-172413</a></p></li></ul><pre><code class="hljs python">data_dict = &#123;    <span class="hljs-string">&#x27;ymd&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.year&#125;:&#123;0.month&#125;:&#123;0.day&#125;&#x27;</span>,    <span class="hljs-string">&#x27;dmy&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.day&#125;/&#123;0.month&#125;/&#123;0.year&#125;&#x27;</span>,    <span class="hljs-string">&#x27;mdy&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.month&#125;-&#123;0.day&#125;-&#123;0.year&#125;&#x27;</span>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyText</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, year, month, day</span>):        self.year = year        self.month = month        self.day = day    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__format__</span>(<span class="hljs-params">self, format_spec</span>):        fmt = data_dict[format_spec]        <span class="hljs-keyword">return</span> fmt.<span class="hljs-built_in">format</span>(self)d1 = MyText(<span class="hljs-number">2019</span>, <span class="hljs-number">9</span>, <span class="hljs-number">17</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:ymd&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:dmy&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:mdy&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-comment"># output</span><span class="hljs-comment"># 2019:9:17</span><span class="hljs-comment"># 17/9/2019</span><span class="hljs-comment"># 9-17-2019</span></code></pre><ul><li><p>而這邊為什麼要寫0呢，我花了一點時間去理解到底為什麼是0，找到了這篇文章，文章裡面有表示format(index0, index1)而我return fmt.format(self)只有一個參數，所以會去讀到第一個值類似[0]。</p></li><li><p>參考文章：<a href="https://bobbyhadz.com/blog/python-indexerror-replacement-index-1-out-of-range">https://bobbyhadz.com/blog/python-indexerror-replacement-index-1-out-of-range</a></p></li></ul><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;&#125;</span> <span class="hljs-subst">&#123;&#125;</span>&quot;</span>.<span class="hljs-built_in">format</span>(index0, index1)) <span class="hljs-comment"># 字串那邊的&#123;&#125;會根據索引對應到後面format()定義的參數</span></code></pre><ul><li>而format其實還有很多特殊的功能，之後有機會在寫篇文章吧～</li></ul><hr><h3 id="object-bytes-self"><a href="#object-bytes-self" class="headerlink" title="object.__bytes__(self)"></a>object.__bytes__(self)</h3><ul><li>Called by bytes to compute a byte-string representation of an object. This should return a bytes object.</li><li>簡單的一句話，呼叫用bytes()，__bytes__必須回傳bytes物件</li><li>實際使用情境目前還沒有想法</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bytes__</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;here is bytes&#x27;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(p))<span class="hljs-comment"># output</span><span class="hljs-comment"># b&#x27;here is bytes&#x27;</span></code></pre><p>目前是真的不清楚什麼時候會使用到他，跟 __del__ 一樣呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。&lt;/p&gt;
&lt;p&gt;藉由學習Magic Method能深度的了解Python，也讓我在寫code的時候能有不同的想法和選擇最近在水球軟體學院之</summary>
      
    
    
    
    <category term="學習" scheme="http://example.com/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="magic method" scheme="http://example.com/tags/magic-method/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】Python Magic Method 01：__new__、__init__、__del__。</title>
    <link href="http://example.com/2023/05/15/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/"/>
    <id>http://example.com/2023/05/15/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/</id>
    <published>2023-05-15T12:00:00.000Z</published>
    <updated>2023-12-15T06:26:31.971Z</updated>
    
    <content type="html"><![CDATA[<hr><p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭雙底線結尾，我們常見要定義class屬性時使用的__init__也是Magic Method～，然後我會看Python的document然後一個一個去了解Magic Method到底在做什麼以及怎麼使用。</p><hr><h3 id="object-new-cls-…"><a href="#object-new-cls-…" class="headerlink" title="object.__new__(cls[, …])"></a>object.__new__(cls[, …])</h3><ul><li><p>new</p></li><li><p>Called to create a new instance of class cls. __new__() is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument.</p></li><li><p>__new__ 會在__init__ 之前執行， 其主要功能是實例__init__所指定的屬性。 如果__new__沒有return cls 則__new__不會被調用。 <br>以下是範例：</p><pre><code class="hljs python"><span class="hljs-comment"># new會在init前執行</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicNew</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is new&quot;</span>)        instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> instance    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is init&quot;</span>)        self.name = namec = MagicNew(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># here is new</span><span class="hljs-comment"># here is init</span></code></pre></li><li><p>以下是使用情境為設計模式之單例模式： <br>參考網址：<a href="https://zhuanlan.zhihu.com/p/35943253">https://zhuanlan.zhihu.com/p/35943253</a></p></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 單例模式，該物件存在就不會在new一個新的出來</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:    _instance = <span class="hljs-literal">None</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            cls._instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> cls._instances1 = Singleton()s2 = Singleton()<span class="hljs-built_in">print</span>(s1)<span class="hljs-built_in">print</span>(s2)<span class="hljs-comment"># output:</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># 注意這邊的記憶體位置 s1 s2 會是同一個物件</span></code></pre><hr><h3 id="object-init-self-…"><a href="#object-init-self-…" class="headerlink" title="object.__init__(self[, …])"></a>object.__init__(self[, …])</h3><ul><li>initialization</li><li>Called after the instance has been created (by __new__()), but before it is returned to the caller. The arguments are those passed to the class constructor expression.</li><li>__new__() to create it, and __init__() to customize it<br>__init__就是大家常見的定義該物件屬性的方式了。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 在new出物件時可以透過init來指定該物件所擁有的屬性</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicInit</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span>, say_something: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;I am default&quot;</span></span>):        self.name = name        self.age = age        self.say_something = say_somethingp1 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)p2 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;change the default&quot;</span>)<span class="hljs-built_in">print</span>(p1.name, p1.age, p1.say_something)<span class="hljs-built_in">print</span>(p2.name, p2.age, p2.say_something)<span class="hljs-comment"># output:</span><span class="hljs-comment"># John 25 I am default</span><span class="hljs-comment"># John 25 change the default</span></code></pre><ul><li>不過據我所知好像有滿多奇妙的操作可以在 __init__ 完成，畢竟new出一個物件的時候執行完 __new__ 就會執行 __init__，根據不同的使用情境或許能有不同的操作物件。（待學習….）</li></ul><hr><h3 id="object-del-self"><a href="#object-del-self" class="headerlink" title="object.__del__(self)"></a>object.__del__(self)</h3><ul><li>Called when the instance is about to be destroyed.</li><li>__del__當該物件被消除時會call到這個magic method </li><li>根據官方文件表示：<ul><li>del x doesn’t directly call x.__del__() - the former decrements the reference count for x by one, and the latter is only called when x’s reference count reaches zero.</li><li>del &lt;物件&gt;時並不會直接去call __del__()而會先去扣他所關聯的計算，而物件的new出來初始reference count值為1，隨著使用(指定變數為該物件時)會+1，而del &lt;物件&gt;時該數會-1，直到該物件的reference count為0時才會去call __del__()。 （下面使用sys.getrefcount(&lt;物件&gt;)也算使用唷）<br>參考文章：<a href="https://www.796t.com/content/1542840125.html">https://www.796t.com/content/1542840125.html</a></li></ul></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-keyword">del</span> p<span class="hljs-built_in">print</span>(p)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 刪除了</span><span class="hljs-comment"># Traceback (most recent call last):</span><span class="hljs-comment"># NameError: name &#x27;p&#x27; is not defined</span></code></pre><ul><li>一開始先new出一個物件出來後直接 del &lt;物件&gt;該物件就不會存在程式所以就會觸發__del__()。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 當今天使用該物件不只一次時</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)<span class="hljs-comment"># sys.getrefcount() 可以取得reference count</span>p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(sys.getrefcount(p))p1 = p<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-keyword">del</span> p1<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待兩秒鐘&quot;</span>)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 3</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 等待兩秒鐘後</span><span class="hljs-comment"># 刪除了</span></code></pre><ul><li>而當今天讓多個物件去使用這個class則會顯示如上圖，而在整個程式結束後才會觸發 __del__()。<br>目前還不清楚什麼情況下會有機會去使用。（待學習….）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。&lt;/p&gt;
&lt;p&gt;Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭</summary>
      
    
    
    
    <category term="學習" scheme="http://example.com/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="magic method" scheme="http://example.com/tags/magic-method/"/>
    
  </entry>
  
  <entry>
    <title>初探店家會員網站設計</title>
    <link href="http://example.com/2023/04/12/%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/"/>
    <id>http://example.com/2023/04/12/%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/</id>
    <published>2023-04-12T12:00:00.000Z</published>
    <updated>2023-12-15T07:03:35.157Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/0_E4O1EYZpyOn2aYbt.jpg"><br><em>From <a href="https://unsplash.com/photos/gray-and-blue-open-signage-c9FQyqIECds">unsplash</a></em></p><p>大家好我是小智，我是一個轉職者，目前剛轉職差不多半年多一點，這篇主要是拿來紀錄我最近在開發上的疑問和設計中的疑問，希望未來的我可以來幫我解答！！</p><hr><h3 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h3><p>目前我正在開發一個購物網站，有會員也有店家，以下是我的順序。</p><ol><li>我先設計了資料庫的table，我的資料庫會員跟店家的表格是完全分開的。</li><li>我建立了Django專案初始化，並把前面的table加入到Django的model中。</li><li>我就直接使用Django的MTV開發，所有的邏輯都集中在app的view裡面，然後就這樣開發到了最近。</li></ol><hr><h3 id="先整理"><a href="#先整理" class="headerlink" title="先整理"></a>先整理</h3><p>最近一直很煩躁，我的view越來越龐大，每當有需求變動時要改一個地方就要花很多時間找在哪裡，搞的我非常痛苦，就在此時，我決定我要整理我的程式碼！！以下是我的順序。</p><ol><li>首先我先試著對我的網站做OOA把所有物件之間的關係畫出來，同時梳理現在對網站的需求。</li><li>把上面所有物件都先開立出來，並試著更動現有的程式碼。</li><li>然後把view裡面所有的網頁(function)拆開，目前是有分步驟和分頁面。</li></ol><hr><h3 id="第二次整理"><a href="#第二次整理" class="headerlink" title="第二次整理"></a>第二次整理</h3><p>然後我又想到我的view裡面也摻雜了一堆的DjangoORM我就想著我能不能也把他們拆出來，於是又出來了另一個版本。</p><ol><li>我把view中的ORM全都拆掉，並建立專屬ORM的物件群。</li><li>然後把剛剛OOA所建立的物件中列幾個方法，有讀取資料庫時(通常是New的時候)就透過ORM物件去讀取資料庫並拋回view。</li></ol><hr><h3 id="最後總結"><a href="#最後總結" class="headerlink" title="最後總結"></a>最後總結</h3><p>完成這版後，基本上我的程式已經拆的很細了，流程大概會變成這樣，以一個店家要登入為例。</p><ol><li>店家到我的網站登入頁面打完帳密案下登入ajax POST。</li><li>這個request會打到我的server。</li><li>server中間nginx略過。</li><li>來到Django裡面之後根據路由由urls.py去分配。</li><li>urls.py分配到指定的view.py。</li><li>view.py裡面有個login的function他在流到POST method。</li><li>到POST method後會先去讀取Store(id)物件。</li><li>Store(id)會去讀取StoreORM(id&#x3D;id)會確認存不存在。</li><li>存在之後再比對密碼的正確性。</li><li>之後回傳結果Json在丟給前端ajax處理。</li></ol><hr><p>目前改成這樣是有比較開心了，不過還是有一些些的違和感，感覺好像還是有一些地方有問題，想了想覺得就先這樣吧，之後如果違和感大到忍受不住再來跑一次上述的流程或是查一些資料看看有沒有辦法優化吧～～</p><h2 id="結論就是：交給未來的我"><a href="#結論就是：交給未來的我" class="headerlink" title="結論就是：交給未來的我"></a>結論就是：交給未來的我</h2><p>最後寫完的心得：大概就是好像還是需要圖片支援，純文字的話感覺有點乏味，等有空的時候再來補吧～～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/0_E4O1EYZpyOn2aYbt.jpg&quot;</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="django" scheme="http://example.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Git CICD with Docker</title>
    <link href="http://example.com/2023/03/18/Git_CICD_with_Docker/"/>
    <id>http://example.com/2023/03/18/Git_CICD_with_Docker/</id>
    <published>2023-03-18T12:00:00.000Z</published>
    <updated>2023-12-15T07:20:39.289Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/Git_CICD_with_Docker/1_bZP17SmwRZihfAYDr5KBFg.webp"><br><em>From <a href="https://1000logos.net/docker-logo/">docker-logo</a></em></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>這個主題是在水球軟體學院中舉辦的Docker共學會最終回的成果發表文章，本人我也是第一次寫文章，主要目的應該會著重在自己的一個紀錄，內容如果不是那麼正確還請多多包容和指點以下正篇。</p><hr><h1 id="正篇："><a href="#正篇：" class="headerlink" title="正篇："></a>正篇：</h1><p>Docker是一個容器化服務，他可以在一台電腦中切出好幾個環境分別執行不同的任務。</p><p>這邊會進行一個簡單的web server然後執行Github actions 或 Gitlab CICD達成自動化測試以及自動化部署。</p><p>稍後將會介紹到的項目有以下幾樣：</p><ul><li><p>Dockerfile</p></li><li><p>docker-compose.yml</p></li><li><p>github&#x2F;workflows 中的yml檔</p></li></ul><hr><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>最基本的要架設一個網站會需要的服務為web server和database。</p><p>那們我將會以Python Django串接Nginx做為web server那database是使用Django預設的sqlite簡單演示。</p><h3 id="資料夾階層會長這樣"><a href="#資料夾階層會長這樣" class="headerlink" title="資料夾階層會長這樣"></a>資料夾階層會長這樣</h3><pre><code class="hljs bash">+根目錄|+-+nginx/|      ||      +--Dockerfile|      +--docker-nginx-web.conf|      +--nginx.conf+-+web/|     ||     +--Dockerfile|     +--requirements.txt|     +-+app/以下略|+--docker-compose.yml</code></pre><h3 id="這是Django也就是web裡面的Dockerfile"><a href="#這是Django也就是web裡面的Dockerfile" class="headerlink" title="這是Django也就是web裡面的Dockerfile"></a>這是Django也就是web裡面的Dockerfile</h3><pre><code class="hljs bash">FROM python:3.8.5LABEL maintainer=<span class="hljs-string">&quot;xxxx@gmail.com&quot;</span>WORKDIR /webCOPY . /web/RUN pip install --upgrade pip RUN pip install -r requirements.txtWORKDIR /web/appVOLUME /webEXPOSE 8001</code></pre><h3 id="再來是nginx裡面的Dockerfile"><a href="#再來是nginx裡面的Dockerfile" class="headerlink" title="再來是nginx裡面的Dockerfile"></a>再來是nginx裡面的Dockerfile</h3><pre><code class="hljs bash">FROM nginx:latestLABEL maintainer=<span class="hljs-string">&quot;xxxx@gmail.com&quot;</span>COPY nginx.conf /etc/nginx/nginx.confCOPY docker-nginx-web.conf /etc/nginx/sites-available/RUN <span class="hljs-built_in">mkdir</span> -p /etc/nginx/sites-enabled/ &amp;&amp; \    <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/docker-nginx-web.conf /etc/nginx/sites-enabled/CMD [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</code></pre><h3 id="然後是根目錄下的docker-compose-yml"><a href="#然後是根目錄下的docker-compose-yml" class="headerlink" title="然後是根目錄下的docker-compose.yml"></a>然後是根目錄下的docker-compose.yml</h3><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3.8&#x27;</span>services:        app_web:                build: ./web                container_name: app_web                restart: always                <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;uwsgi --ini uwsgi.ini&quot;</span>]                volumes:                        - web_data:/web/app                ports:                        - <span class="hljs-string">&quot;8001:8001&quot;</span>                environment:                        - PYTHONUNBUFFERED=TURE        app_nginx:                build: ./nginx                container_name: app_nginx                restart: always                volumes:                        - web_data:/web/app                ports:                        - <span class="hljs-string">&quot;80:80&quot;</span>                depends_on:                        - app_webvolumes:        web_data:</code></pre><p>那我們這邊docker-compose.yml裡面的build會去找尋web和nginx目錄下的Dockerfile並根據Dockerfile的內容去啟動container。</p><p>這邊下指令</p><pre><code class="hljs bash">docker-compose up --build -d</code></pre><p>其實就會直接把兩個container建立起來了。</p><hr><h2 id="Github-actions"><a href="#Github-actions" class="headerlink" title="Github actions"></a>Github actions</h2><p>然後就可以開始寫Github actions的yml檔囉！</p><h3 id="我們到Github的頁面點選Actions"><a href="#我們到Github的頁面點選Actions" class="headerlink" title="我們到Github的頁面點選Actions"></a>我們到Github的頁面點選Actions</h3><p><img src="/blog/images/Git_CICD_with_Docker/1_NEBsJwswssn2VffDuNyVSg.webp"></p><h3 id="點選下方的Configure就會先幫你建立一個預設的yml"><a href="#點選下方的Configure就會先幫你建立一個預設的yml" class="headerlink" title="點選下方的Configure就會先幫你建立一個預設的yml"></a>點選下方的Configure就會先幫你建立一個預設的yml</h3><p><img src="/blog/images/Git_CICD_with_Docker/1_eT-ez4_d77qUFV54NycBig.webp"></p><p>這邊就可以開始編輯自己的yml檔，但是Github上也有很多已經編輯好的yml檔會出現在Configure下方可以選用。</p><p><img src="/blog/images/Git_CICD_with_Docker/1_Zk9WR4svGoxlIuGd59R8gw.webp"></p><p>那這邊我就先用預設的yml來編輯</p><p>那預設的yml呢它上面會有很詳細的註解說明每一個指令的功用，這邊只截取我需要的部分把它改寫成這樣</p><pre><code class="hljs bash">name: Django CIon:  push:    branches: [ <span class="hljs-string">&quot;main&quot;</span> ]  pull_request:    branches: [ <span class="hljs-string">&quot;main&quot;</span> ]<span class="hljs-built_in">jobs</span>:  build:    runs-on: ubuntu-latest    strategy:      max-parallel: 4      matrix:        python-version: [3.8]    steps:    - uses: actions/checkout@v3    - name: Set up Python <span class="hljs-variable">$&#123;&#123; matrix.python-version &#125;</span>&#125;      uses: actions/setup-python@v3      with:        python-version: <span class="hljs-variable">$&#123;&#123; matrix.python-version &#125;</span>&#125;    - name: Install Dependencies      run: |        python -m pip install --upgrade pip        pip install -r web/requirements.txt    - name: Run Tests      run: |        python  web/app/manage.py <span class="hljs-built_in">test</span></code></pre><p>這邊是當你對這個repositories有push或是pull_request的時候就會觸發job的程序，上面那邊有$NaN是我們可以對他執行多個版本的測試，這邊我只有跑一個python 3.8，那我們看到最後一行，這個就只是在跑Django的測試內容。</p><h3 id="接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分"><a href="#接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分" class="headerlink" title="接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分"></a>接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分</h3><pre><code class="hljs bash">name: Django CD<span class="hljs-comment"># 只有在 CI 的 workflow 完成時才會執行此 workflow</span><span class="hljs-comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run</span>on:  workflow_run:    workflows: [ Django CI ]    types:      - completed<span class="hljs-built_in">jobs</span>:  deploy:    runs-on: ubuntu-latest    <span class="hljs-comment"># 注意前面 workflow_run 的 completed 意思是「完成」，不論執行結果成功或是失敗都算是「完成」</span>    <span class="hljs-comment"># 但是一般來說測試如果失敗就應該暫停部屬至正式環境</span>    <span class="hljs-comment"># 因此這裡加上一個 if 判斷，只有 CI 成功才會執行此 workflow</span>    <span class="hljs-comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run</span>    <span class="hljs-keyword">if</span>: <span class="hljs-variable">$&#123;&#123; github.event.workflow_run.conclusion == &#x27;success&#x27; &#125;</span>&#125;        steps:      <span class="hljs-comment"># 使用 appleboy/ssh-action@master 這個 action 遠端連線至正式環境</span>      <span class="hljs-comment"># https://github.com/appleboy/ssh-action</span>      - name: Deployment        uses: appleboy/ssh-action@master        with:          host: <span class="hljs-variable">$&#123;&#123; secrets.HOST &#125;</span>&#125;          key: <span class="hljs-variable">$&#123;&#123; secrets.TOKEN &#125;</span>&#125;          username: ec2-user          <span class="hljs-comment"># 執行部屬的指令</span>          <span class="hljs-comment">#docker rmi -f $(docker images -q  -f dangling=true)</span>          <span class="hljs-comment">#docker volume rm $(docker volume ls -q -f dangling=true)</span>          script: |             <span class="hljs-built_in">whoami</span>                    sudo yum -y install docker            sudo yum -y install git             sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(<span class="hljs-built_in">uname</span> -s)-$(<span class="hljs-built_in">uname</span> -m) -o /usr/local/bin/docker-compose            sudo <span class="hljs-built_in">chmod</span> 777 /usr/local/bin/docker-compose            docker-compose version            <span class="hljs-built_in">cd</span> ~            sudo <span class="hljs-built_in">rm</span> -fr *            sudo git <span class="hljs-built_in">clone</span> https://github.com/xxx/testCICD.git            <span class="hljs-built_in">cd</span> testCICD            sudo systemctl restart docker            sudo <span class="hljs-built_in">chmod</span> 777 /var/run/docker.sock            docker-compose down            docker rmi -f $(docker images -q  -f dangling=<span class="hljs-literal">true</span>)            docker volume <span class="hljs-built_in">rm</span> $(docker volume <span class="hljs-built_in">ls</span> -q -f dangling=<span class="hljs-literal">true</span>)            docker-compose up --build -d</code></pre><p>這邊我是參考了appleboy的ssh-action，這樣就可以透過ssh的方式連接到你的機器裡做上面所寫好的script了，那上面有兩個地方應該會有問題就是host跟key那兩個變數的新增位置在Settings</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p><img src="/blog/images/Git_CICD_with_Docker/1_8Wz_y3La0uRxRcdfkytSvA.webp"></p><h3 id="Secrets-and-variables"><a href="#Secrets-and-variables" class="headerlink" title="Secrets and variables"></a>Secrets and variables</h3><p>裡面的Security點開Secrets and variables中的Actions</p><p><img src="/blog/images/Git_CICD_with_Docker/1_PC6h-Bnv3I5Ow5j0U4NbRQ.webp"></p><p>你會看到</p><p><img src="/blog/images/Git_CICD_with_Docker/1_y0993aLDo40RPOChDZMQkw.webp"></p><p>這邊就可以管理你在Github actions中的任何密鑰以及變數。</p><p>這邊這個CICD最終會部署到我在AWS EC2中架設的一個小機器裡面，裡頭還有很多細節也有很多我還沒搞清楚的地方，之後有機會在拆分主題來一一探討。</p><hr><p>最後，我是一個轉職的工程師，目前剛轉滿半年多一點，還在努力學習中，如果有任何問題或建議都可以私訊我<a href="mailto:&#109;&#x32;&#x33;&#53;&#54;&#56;&#x6e;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#109;&#x32;&#x33;&#53;&#54;&#56;&#x6e;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>，我也常在 <a href="https://discord.gg/waterballsa">水球軟體學院</a> 活動，歡迎大家一起加入這個大社群一起學習一起進步！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/Git_CICD_with_Docker/1_bZP17SmwRZihfAYDr5KBFg.webp&quot;&gt;&lt;br&gt;&lt;em&gt;From &lt;a href=&quot;https://1000logos.net/docker-logo/&quot;&gt;dock</summary>
      
    
    
    
    <category term="學習" scheme="http://example.com/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="github actions" scheme="http://example.com/tags/github-actions/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="水球軟體學院" scheme="http://example.com/tags/%E6%B0%B4%E7%90%83%E8%BB%9F%E9%AB%94%E5%AD%B8%E9%99%A2/"/>
    
  </entry>
  
</feed>
