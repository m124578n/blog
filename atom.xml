<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shun Chih&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-15T04:46:44.069Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Shun Chih</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【學習筆記】Python Magic Method 01：__new__、__init__、__del__。</title>
    <link href="http://example.com/2023/05/15/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/"/>
    <id>http://example.com/2023/05/15/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/</id>
    <published>2023-05-15T12:00:00.000Z</published>
    <updated>2023-12-15T04:46:44.069Z</updated>
    
    <content type="html"><![CDATA[<hr><p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭雙底線結尾，我們常見要定義class屬性時使用的__init__也是Magic Method～，然後我會看Python的document然後一個一個去了解Magic Method到底在做什麼以及怎麼使用。</p><hr><h3 id="object-new-cls-…"><a href="#object-new-cls-…" class="headerlink" title="object.__new__(cls[, …])"></a>object.__new__(cls[, …])</h3><ul><li><p>new</p></li><li><p>Called to create a new instance of class cls. __new__() is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument.</p></li><li><p>__new__ 會在__init__ 之前執行， 其主要功能是實例__init__所指定的屬性。 如果__new__沒有return cls 則__new__不會被調用。 <br>以下是範例：</p><pre><code class="hljs python"><span class="hljs-comment"># new會在init前執行</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicNew</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is new&quot;</span>)        instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> instance    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is init&quot;</span>)        self.name = namec = MagicNew(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># here is new</span><span class="hljs-comment"># here is init</span></code></pre></li><li><p>以下是使用情境為設計模式之單例模式： <br>參考網址：<a href="https://zhuanlan.zhihu.com/p/35943253">https://zhuanlan.zhihu.com/p/35943253</a></p></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 單例模式，該物件存在就不會在new一個新的出來</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:    _instance = <span class="hljs-literal">None</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            cls._instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> cls._instances1 = Singleton()s2 = Singleton()<span class="hljs-built_in">print</span>(s1)<span class="hljs-built_in">print</span>(s2)<span class="hljs-comment"># output:</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># 注意這邊的記憶體位置 s1 s2 會是同一個物件</span></code></pre><hr><h3 id="object-init-self-…"><a href="#object-init-self-…" class="headerlink" title="object.__init__(self[, …])"></a>object.__init__(self[, …])</h3><ul><li>initialization</li><li>Called after the instance has been created (by __new__()), but before it is returned to the caller. The arguments are those passed to the class constructor expression.</li><li>__new__() to create it, and __init__() to customize it<br>__init__就是大家常見的定義該物件屬性的方式了。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 在new出物件時可以透過init來指定該物件所擁有的屬性</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicInit</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span>, say_something: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;I am default&quot;</span></span>):        self.name = name        self.age = age        self.say_something = say_somethingp1 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)p2 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;change the default&quot;</span>)<span class="hljs-built_in">print</span>(p1.name, p1.age, p1.say_something)<span class="hljs-built_in">print</span>(p2.name, p2.age, p2.say_something)<span class="hljs-comment"># output:</span><span class="hljs-comment"># John 25 I am default</span><span class="hljs-comment"># John 25 change the default</span></code></pre><ul><li>不過據我所知好像有滿多奇妙的操作可以在 __init__ 完成，畢竟new出一個物件的時候執行完 __new__ 就會執行 __init__，根據不同的使用情境或許能有不同的操作物件。（待學習….）</li></ul><hr><h3 id="object-del-self"><a href="#object-del-self" class="headerlink" title="object.__del__(self)"></a>object.__del__(self)</h3><ul><li>Called when the instance is about to be destroyed.</li><li>__del__當該物件被消除時會call到這個magic method </li><li>根據官方文件表示：<ul><li>del x doesn’t directly call x.__del__() - the former decrements the reference count for x by one, and the latter is only called when x’s reference count reaches zero.</li><li>del &lt;物件&gt;時並不會直接去call __del__()而會先去扣他所關聯的計算，而物件的new出來初始reference count值為1，隨著使用(指定變數為該物件時)會+1，而del &lt;物件&gt;時該數會-1，直到該物件的reference count為0時才會去call __del__()。 （下面使用sys.getrefcount(&lt;物件&gt;)也算使用唷）<br>參考文章：<a href="https://www.796t.com/content/1542840125.html">https://www.796t.com/content/1542840125.html</a></li></ul></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-keyword">del</span> p<span class="hljs-built_in">print</span>(p)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 刪除了</span><span class="hljs-comment"># Traceback (most recent call last):</span><span class="hljs-comment"># NameError: name &#x27;p&#x27; is not defined</span></code></pre><ul><li>一開始先new出一個物件出來後直接 del &lt;物件&gt;該物件就不會存在程式所以就會觸發__del__()。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 當今天使用該物件不只一次時</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)<span class="hljs-comment"># sys.getrefcount() 可以取得reference count</span>p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(sys.getrefcount(p))p1 = p<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-keyword">del</span> p1<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待兩秒鐘&quot;</span>)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 3</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 等待兩秒鐘後</span><span class="hljs-comment"># 刪除了</span></code></pre><ul><li>而當今天讓多個物件去使用這個class則會顯示如上圖，而在整個程式結束後才會觸發 __del__()。<br>目前還不清楚什麼情況下會有機會去使用。（待學習….）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。&lt;/p&gt;
&lt;p&gt;Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭</summary>
      
    
    
    
    
    <category term="學習" scheme="http://example.com/tags/%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
</feed>
