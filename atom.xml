<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shun Chih&#39;s blog</title>
  
  
  <link href="https://m124578n.github.io/atom.xml" rel="self"/>
  
  <link href="https://m124578n.github.io/"/>
  <updated>2023-12-20T06:09:41.981Z</updated>
  <id>https://m124578n.github.io/</id>
  
  <author>
    <name>Shun Chih</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>稻荷，清水，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-03T05:00:00.000Z</published>
    <updated>2023-12-20T06:09:41.981Z</updated>
    
    <content type="html"><![CDATA[<p>我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！</p><h2 id="日本之第七天"><a href="#日本之第七天" class="headerlink" title="日本之第七天"></a>日本之第七天</h2><p>第一站是伏見稻荷神社，一早就搭火車過來，人還超級多的！光是走出車站就花了一些時間呢～這邊也是我此趟日本行最期待的景點之一！京都的空氣真的是有夠新鮮有夠好聞的，在那邊鼻子都不太會過敏呢～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_IS2l1v3yP_dFkwoKQlVNbw.webp"><br><em>我好胖XD</em></p><p>接著就往裡面走著！！開始看到一大堆鳥居，剛好朋友幫我科普了一下這些鳥居是怎麼來的～原來只要有固定的捐錢就能蓋自己的鳥居，然後鳥居就會保佑公司可以發大財～鳥居的後面都會有什麼公司在什麼時間點蓋起來的～未來有機會我也想要蓋一個自己的鳥居呢，哈哈</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eR2pNhdqLPo6LY74XgYqEA.webp"></p><p>接著大概還在路口處不遠的地方，我們看到了一條小小的道路，其他地方人都超多的但就是這條久久才有人往上爬，於是乎在好奇心的驅使下踏上了一條有點硬的道路XD</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LIX6n5oe1To2QHHMl8REqg.webp"></p><p>這條路走進去真的超級漂亮的，而且真的都沒什麼人～竹林再加上早上的晨曦眼睛大滿足後，再吸一口山林間的空氣，真的是非常舒適，也讓我開始喜歡爬山與大自然接觸的感覺～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_R83jG9L-W5XuUejP3V6-UA.webp"></p><p>因為我們走的是不尋常的路，應該是啦不然怎麼那麼少人XD，路途中還看到了一些貓咪和住宅，住在深山裡面感覺應該挺不方便的～途中有一位澳洲人，因為我太累了在中間休息時，想說搭話一下練習我的破英文XD，現在只記得他是澳洲人而已哈哈，稍微尬聊一下，他就接著往上爬了，沒錯我還在休息XD，他跟我們說山頂見囉～see you later～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_isARRMpks4YMXNqOAxH7bA.webp"></p><p>說實在的有些地方真的有夠陡的，雖然說身體好像變輕鬆了，但依舊是拖著在大阪走了五六天的身體來爬山XD，脫離小路之後就開始看的人群了～接著往上爬到山頂的那一刻那個瞬間那個moment，真的是身心舒暢很有成就感，也愛上了爬山的那種感覺～而且今天的天氣真的超好，山上既不熱又不冷，還吹著徐徐的微風，是個超級適合爬山的天氣！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_0TRF5K0ijImxvHieMOVd5g.webp"></p><p>之後我們就開始往下走，此時也接近中午的時間，肚子也開始餓了～大概再往下走一點的地方，看到有在賣吃的就直接進去吃了～吃了鍋燒烏龍麵，不知道為什麼這碗烏龍麵格外的美味！吃完出來後看到了一覽京都的美景～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tBJHPEj95XAk9BBwksMhEQ.webp"></p><p>稻荷山下次來要走走正規的路上去看看～感覺有一些地方是沒有繞道的～</p><p>爬完山後大概是下午的時間，接著準備前往清水寺，但坐火車過去好像有點麻煩，於是我們決定做計程車過去，原本以為會很貴，一直有個既定印象說日本計程車超級貴，但其實實際上搭起來三個人分不會有貴的感覺，重點是很舒服哈哈哈，一上車司機的口音有點重，我多聽了幾次才了解他想要說什麼～大概是說清水寺載上去的話，那邊塞車很嚴重會影響他的工作，所以要我們決定是在商店街下車呢？還是去一條秘徑走路五分鐘過去～當下我覺得很酷所以就跟他說五分鐘的那條！於是乎就被載到山上啦！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Z1-nAinf-MawkGeWW6s85Q.webp"></p><p>滿炫的！第一次來清水寺竟然不是從正門進去XD，果然走沒多久就看到清水寺本寺啦！可以看到這麼遠的地方看也可以看到上面一大堆人～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9NBWhR0N08p6WI8ubkisCg.webp"></p><p>有點可惜的是，十一月初去的依舊是綠油油的一大片～下次希望可以看到紅通通的楓葉，我想那場面一定很壯觀！在這邊看著夕陽也是一個很優的體驗～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LJZifWRIITNoElzAxCka9w.webp"></p><p>接著晚餐去吃了一間很特別的拉麵店，他是一個set的那種，有餐前酒，前菜，主食，甜點～整體來說不錯吃但依舊沒有打敗辰拉麵，不過他店的包廂超級有日劇的感覺的XD，很像是來談生意的那種～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-mOQJVRuXsUyzlNIIpTsOw.webp"></p><p>接著前往錦市場裡面的天滿宮～路上經過了八坂神社，然後走進去花見小路看看，路上還真的看到藝伎，親眼見到的衝擊力頗大的！錦市場逛完後想說去一間居酒屋看看（雖然我不喝酒～）然後吃吃鳥串燒，結果幾乎人都滿滿的～最後找到一間我覺得很好吃的串燒！不過好像太好吃了我完全沒拍照XD，吃完串燒後我們決定沿著鴨川回區住宿的地方，</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_PDZohp3l5L24pLzajrOZ6Q.webp"></p><p>很舒服的一個地方～如果跟女朋友來晚上在這邊散散步聊聊天肯定非常的浪漫XD可惜我是單身狗QQ，下次來一定要跟女友來！</p><hr><h2 id="日本之第八天"><a href="#日本之第八天" class="headerlink" title="日本之第八天"></a>日本之第八天</h2><p>今天的天氣預報說會下雨，果然也在下雨，所以我們本日行程都排在市內居多～第一站前往鐵道博物館～這邊其實超出我的期待不少，有好多可以互動的東西，也有好多可以細部的看看火車內部構造的裝置，甚至可以去按按那些平常不太能按的緊急按鈕XD</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_WHfZjGFEpckp6RUe70q4UA.webp"></p><p>還可以玩玩怎麼樣駕駛火車～頂樓還可以直接看到京都車站的火車進出站的樣子！不得不說日本火車的班次好像有點多XD</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_FpiTgAXDpYVTMTti6wlqwQ.webp"></p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_saqmsjzytS_DkwUpWHfchw.webp"></p><p>最後發現好像有個特別的蒸汽火車可以搭過來，只不過票賣完了XD，可惜了～那個蒸汽火車真的很壯觀！鳴笛的時候可以感受到大地都在震動！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_m7k6CeWGis_Fp_YTrEGUWg.webp"></p><p>之後我們前往錦市場，昨天只有去天滿宮其他地方都沒什麼逛而且時間也晚了大部分都收攤了～再次前往錦市場好好的看看有什麼可以吃～然後就看到我想吃的店！這個蝦子我真的超級喜歡的！那個緊實又飽滿的蝦肉，簡單的鹽調味，可以吃出蝦子本身的鮮甜和彈牙的口感，真的是太讚了！！！！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_E46GYJm9mKBkCxijGOpsqQ.webp"></p><p>之後就是逛街的行程啦，不得不說錦市場真的頗大的，而且有滿多滿特別的店～錦市場逛完後我們就前往京都塔啦～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-ggyH9SLIaoRJQWm2rcD4w.webp"></p><p>京都塔上面是挺壯觀的，不過不怎麼適合拍著，怎麼拍都紅紅或藍藍的XD，接著吃個拉麵就準備回旅館休息了～走路回家會經過東本願寺，晚上看也是很有威嚴的一個寺廟！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_nd1JOLZPxtcCEhBtwk8ERg.webp"></p><p>這個時候我在神社和寺廟中已經買了很多御守和抽了很多籤XD，而這個也變成我的興趣的感覺了，隔天也是去了很多的神社和寺廟，可以說是每個地方都買了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！&lt;/p&gt;
&lt;h2 id=&quot;日本之第七天&quot;&gt;&lt;a href=&quot;#日本之第七天&quot; class=&quot;headerlink&quot; title=&quot;日本之第七天&quot;&gt;&lt;/a&gt;日本之第七天&lt;/h2&gt;</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>日記みたいなもの</title>
    <link href="https://m124578n.github.io/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/"/>
    <id>https://m124578n.github.io/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/</id>
    <published>2023-12-03T02:00:00.000Z</published>
    <updated>2023-12-18T07:11:56.213Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp"></p><p>最近はいろいろな事を試しています、よりいい状態とか、いい健康とか、自分が理想的な人になるために、たくさんのことを慣れるような、習慣をつけるようなことを努力しています。何でこういう考えが生み出すのか、それは主な原因はやはり付き合うの相手が欲しいからだ！その相手が見つかる前には、僕は自分が付き合いたい人にならないければならない！そこで、三つの点を考えました！</p><p>その一、運動</p><p>いい健康、いい体、いい体力、いいスタイル、というとそれほ運動ですね、運動の習慣をつけると定期的に身体の中の悪い、汚いなどな必要がないものを排除ができる、それで夜が眠れやすいし、起きた後もだるさもないし、体力も上がるし、全部いい事ばかり、やらない理由はとこにもないのだ！</p><p>その二、飲食</p><p>現代人は栄養バランスがとても悪いと気がする、特に自分のこと、以前は週に二、三回、それ以上かも、いっぱいの揚げ物とか加工製品を食べていた、それは絶対太るだろう、だから今は、なるべく野菜とかきのことか原型な食べ物を食べるつもり〜</p><p>その三、人</p><p>やば、人と人の接触が多いれば多いほどがいいのだ、理想的な相手が会うためにはたくさんの人に話す、知り合うのが、見つかりやすいと思っているのだ、それに人と話すのも奥が深い学問だ、話題とか、返事とかのも練習が必要だと思っている！</p><p>最後は自分がいい人になるように頑張ろう！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp&quot;&gt;</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="japanese" scheme="https://m124578n.github.io/tags/japanese/"/>
    
  </entry>
  
  <entry>
    <title>歷史，城堡，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-02T04:00:00.000Z</published>
    <updated>2023-12-18T07:10:19.595Z</updated>
    
    <content type="html"><![CDATA[<p>到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD</p><h2 id="日本之第四天"><a href="#日本之第四天" class="headerlink" title="日本之第四天"></a>日本之第四天</h2><p>早上起來搭地鐵前往大阪城！只要知道搭到哪一站就好了，其餘跟著外國人走準沒錯XD，大家的目的地都是大阪城～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4bq1chfZAhAi-iov83Dj-Q.webp"><br><em>一出車站就能看見的～</em></p><p>一走進去大阪城的區域，可以很明顯地感覺到整體的氛圍都不一樣了，都市中有一個那麼大又廣的區域，然後大量的自然融合在歷史的建築中，我超喜歡這種雰囲気的！</p><p>接著往前走一點就可以看到在最外圍的護城河，我第一眼真的是被震驚到，那滂薄重大莊嚴的感覺（明明只是在最外圍XD，不過這照片真的真的沒辦法傳達到現場感受到的那種強大又壯觀的氣勢，下次來大阪我肯定會再來一次把周圍沒逛到的仔細的繞過一遍！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_xTZWNWimlBst8gkXf6Xhwg.webp"><br><em>可以看到天氣不是很好ＱＱ</em></p><p>走進去！！我自己很喜歡拍這種由地上往前看的照片，我也不知道為什麼XD</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VVXKAemCObjS6iZxDs-v4g.webp"></p><p>走進去會經過兩扇超大的門，想想如果以前打仗要突破這些城門想必是非常不容易的事情！接著再繼續走會看到一些建築物，然後是神社！有點後悔沒有去看看這個神社～之後在京都的時候真的是愛上了神社，好喜歡裡面的御守！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Wtd9FeCA9lW0CcCgLSV0Nw.webp"></p><p>再來是內圈的護城河，護城河有兩圈！！可以從橋的這個門看到大阪城本城啦！！！整個氣勢都不一樣跟周圍的建築物比起來很明顯的感覺出來一種高貴奢華感～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_DT1BP9jsDFw5BYyBiHR2xQ.webp"></p><p>我當時有一個想法，我是敵人跑到這邊我也已經累了XD，這邊離一開始那邊其實有一點距離了～</p><p>接著當然是大阪城本城啦！！！當下看到真的是非常的壯觀，不只城堡本體，就連下面那些地基的石頭的覺得很驚豔，古時候到底是怎麼把這樣壯觀龐大的城堡給建立起來的～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_wwUbkicoHr-7F_ab21sQNw.webp"></p><p>進去裡面有很多樓層，頂樓可以感受到彷彿城主在觀看自己的領地那種感覺，不過周圍的景觀綠色出去一點就是現代的高樓大廈了～以前的話估計不可能有比大阪城還高的建築物吧！</p><p>依序往下走可以看到大阪城的歷史，和一些日本的歷史人物的一生，我自己是對日本歷史不太熟悉啦，不過裡面講故事的方式我覺得非常的特別！懂日文的話非常推薦進去看看，還有些樓層會有一些歷史的古物，武士刀、當時的書卷、裝備等等的，還有大阪城的更早以前的縮小版模型，我好喜歡看那些模型！！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_P_Ymz8t6Qr3ISAOF_9JoDA.webp"></p><p>接著呢本來打算去做環湖的船，但沒事先做功課，好多人呀！，要等大概兩個小時，而且中間開始飄雨了，就沒有搭船了～又留下了一個遺憾呢～</p><p>最後一張跟大阪城說再見的照片～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eCPXSn02oUMjafCswj9xAw.webp"></p><p>我真的好喜歡這樣的歷史建築（特別是日本的）～</p><p>接著搭地鐵前往下一站今昔館～時間已到中午先吃個飯吧！到天神橋筋，本來想吃的拉麵店沒開，只好在商店街找一間囉！</p><p>好吃的醬油拉麵！！但心目中的第一名（辰拉麵）沒有被更新掉就是了</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_MOWZtOkLBNYHA40ySEJ3Dg.webp"></p><p>接著前往今昔館～今昔館裡面有以前的歷史建築，像是他們的商店還是住宅等等的，還有我最喜歡的縮小模型！！裡面也是拍了很多照逛了個過癮，只不過身體開始覺得累了，肯定是因為外面在下雨！！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Xc925K98toPQg8uRAgcF8A.webp"></p><p>之後前往梅田逛街，雖然天氣不好，但在大阪走路依然感覺很舒服～不愧是日本之行人的天堂！！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H-Iqq5qD0gSYEpBYBn6xvQ.webp"></p><p>就這樣結束了，充滿歷史文化最後轉變到現在都市的一天～</p><hr><h2 id="日本之第五天"><a href="#日本之第五天" class="headerlink" title="日本之第五天"></a>日本之第五天</h2><p>這天很短，因為我覺得該讓身體休息一下準備京都的神社之旅！！所以早上在天下茶屋附近繞了一圈，看看這邊居民的生活，也看看大阪比較外圍的景色～悠閒的走在路上，漫無目的的看看日本的房子也是不錯的體驗！中間還路過一間看起來很像新開的超市～買了唐揚雞，摁～我果然喜歡這種軟軟的唐揚雞，這跟我之前大學在高雄的一間唐揚雞很像，我非常喜歡！！雖然吃完之後又跑去全家買了全家炸雞XD，依舊忘了拍照哈哈哈</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_TNy6Q2kS9Pnxu7sriRBvkg.webp"></p><p>接著就回住宿的地方睡了個午覺，後面覺得其實這樣中間差一天輕鬆的休息也不錯呢～(明明就是體力太差了XD，回去之後要好好鍛練了～)</p><hr><h2 id="日本之第六天"><a href="#日本之第六天" class="headerlink" title="日本之第六天"></a>日本之第六天</h2><p>今天是前往京都的日子，不過在那之前我們決定去大阪車站逛一下街～這邊的現代化都市感就特別的重了，雖然第四天有來過一次，不過下雨跟晴天的感覺差挺多的～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_1YCZGv5DY8kKPqpfiI-BHQ.webp"></p><p>又去逛了寶可夢中心、JUMP、卡普空等等的周邊～我真的好喜歡百變怪！！想要蒐集百變怪的周邊了～要不是只有I14的手機殼，不然我就買了手機殼回家再買I15（Ｘ</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VAQzRZ_MzA_z1HAP7_XXOQ.webp"><br><em>你看！他在對你笑耶！！</em></p><p>接著中午去吃了一間吃到飽，螃蟹就算了，吃到飽種類不多，整體都挺好吃的，最令我驚豔的是炒青菜！！好久沒吃到炒青菜了而且還超好吃，吃了好幾盤呢～而且我還怕自己吃太飽想睡覺哈哈，因為下午還有其他地方要逛，吃太飽也不會想走路只想躺平～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Y-0dexAlFhMNhJyzya_ctw.webp"><br><em>好吃！只不過爐烤豬排有點失望ＱＱ跟我想的不一樣～</em></p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_KmOZmndV_0GSDfDtD4DpvQ.webp"></p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_D1veRzeIf2s0c_09dDPnCg.webp"></p><p>日本真的是怎麼拍都好看，每次回顧都覺得照片拍太少了～這夕陽也是挺好看的！！</p><p>接著就前往京都了～搭個火車人好多，大概40分鐘就到了京都～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_esjxHxlcy0RF1AcF8Rns4w.webp"></p><p>旅程過了一半了，突然覺得時間漸漸的加速了～好希望再來十天XD</p><p>不過京都的路走起來就沒有大阪舒服～人行道有些整修的痕跡～</p><p>晚餐吃やよい軒定食就是好吃！白飯就是讚！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_jmBvsIWgIxnlGaevXe6Uig.webp"></p><p>如果台灣有像這樣的定食且價格合理的話我肯定吃爆！還有個前提是白飯要跟日本的一樣好吃XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD&lt;/p&gt;
&lt;h2 id=&quot;日本之第四天&quot;&gt;&lt;a href=&quot;#日本之第四天&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="osaka" scheme="https://m124578n.github.io/tags/osaka/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>首次，出國，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-02T02:00:00.000Z</published>
    <updated>2023-12-18T06:49:08.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="わくわく"><a href="#わくわく" class="headerlink" title="わくわく"></a>わくわく</h2><p>從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的嗎（X</p><p>走在日本的街道，聽著周圍都是日文的環境，大口吸著新鮮的空氣，品嚐最道地的日本拉麵，就在今年2023&#x2F;11終於實現了我做了25年的夢！<br>至今回來了兩個禮拜還是意猶未盡，甚至想直接住在那邊了XD</p><p>久久沒寫文章了，自從上次參加完ithome的鐵人賽後就沒再寫過了～連續三十天真的是有夠硬，好佩服那些每天都能輸出的前輩！好了回歸正題，今天就來好好的回顧我在日本十天的自由行～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eKQh7KF3N-dGvma2bUxYYw.webp"><br><em>桃園機場，人生首次離開台灣！</em></p><p>在去日本的前兩個禮拜，我突然重感冒！喉嚨痛到不行外加腳趾甲溝炎，我真的是非常擔心我真的能去日本嗎，機票都買了住宿都訂好了，甚至是行程都大致排好了，我期待了三四個月就要這樣泡湯了嗎！！！</p><p>而且看了好幾位醫生和醫院喉嚨疼痛感依舊讓我晚上都沒睡好，隔天起床沒精神就算了還很痛，我只好向公司一直請假，請了整整一個禮拜～基本上都躺在家裡完全不想動！</p><p>但就這樣過了一個禮拜後，奇蹟似的突然痊癒了，這時離去日本已經剩下5、6天，感謝我的身體和意志力讓我可以康復～雖然因為感冒的關係體力貌似消耗的極大，導致剛到日本的前幾天其實都累累的，但我那興奮的又悸動的心情好像讓我腎上腺素爆發，基本上精神都是超過200%的！撐起來！</p><hr><h2 id="日本之第一天"><a href="#日本之第一天" class="headerlink" title="日本之第一天"></a>日本之第一天</h2><p>到了住宿的地方，放完行李（我只有帶一個小背包，其餘都打算直接在日本買，哈哈哈）就走朋友走在晚上八點的日本街道，思考著要吃什麼來開啟這趟日本之旅呢！就這樣走到了一間看起來非常日式餐館的店，少少的幾個座位都是靠著吧台，老闆就在面前調理，看著既熟悉又陌生的日文菜單，跟老闆注文了拉麵跟焼きめし，原本以為不會太大份，結果來了個大的，吃到非常飽哈哈，就這樣聽著旁邊熟客跟老闆的互動，吃完了來日本的第一餐，有種既熟悉又陌生的味道，但真的很感動！</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_b6Mr-Z-9FDMKhaSLZVRfzw.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_ct864Ox3blu_Auq-opSeyQ.webp"></p><p>吃飽後，跑到了附近的超市購買了一些生活用品和明天的早餐，我買了一個梅子飯糰，接著呢！走到我非常期待的便利商店，全家！沒錯！我要吃全家炸雞了ファミチキ，我只能說超級無敵好吃，以前都聽著大家說好吃好吃，一直很好奇到底有多好吃，結果真的出乎意料的好吃，光是看著聞著那眼淚都快從嘴角流出來了XD，不過太快吃完忘記拍照了～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_2NFkPqtcCSxKh35yGz5Q6A.webp"><br><em>只有拍全家，食物已消失XD</em></p><p>就這樣踏入日本的第一天結束了，實際上只有在外面走2、3個小時而已吧，期待明天的行程！！</p><hr><h2 id="日本之第二天"><a href="#日本之第二天" class="headerlink" title="日本之第二天"></a>日本之第二天</h2><p>前進黑門市場！本來以為會吃很多東西，但可能昨天那個晚餐吃太飽了，再加上早上吃了一個飯糰（梅子飯糰也是有夠好吃），有挺多想試試看的食物但就吃一點而已，稍微可惜了一些些，不過有吃到和牛串，感想是我果然不喜歡吃牛XD，不過如果有和牛燒肉或牛排我應該還是會想嘗試看看，畢竟先試了再說～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HdajNFINc3kXtr5HXuMAhg.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HvvNNBPW8xA83KXdd8n12Q.webp"></p><p>逛完黑門市場後就一路走到道頓崛，不得不說日本真的非常的行人友善，走起來特別的舒服，街景也特別的優美柔和且整體的融合感看了就是舒暢，說到道頓崛，我就是個觀光客肯定要來看グリコ，到這邊的時候其實還算早，就一大堆人好恐怖！</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_bzrwVPPCSMG_kR_IjKVUZQ.webp"></p><p>在這邊逛了唐吉，拍了好多張照片，午餐吃了炸豬排，日本的白飯真的是非常的好吃，來了兩天我真的可以為了吃白飯搬到日本去XD，不過我們這次行程真的都只有排大地標，其餘真的是很隨性，都是到了現場才決定要做什麼要逛什麼～有種到處探索的感覺我很喜歡～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9pexDXd1RLMvAm0AEKFhHA.webp"></p><p>吃完豬排後，前往下個地方～下個地方是朋友說他喜歡的明星剛好來大阪辦活動，於是我們就決定去看看，中間路過了アメリカ村是一個滿特別的地方，整體的氛圍感不像在日本但又有日式的感覺，一如往常的人依舊非常多XD，還有一台特別的車播放著音樂在這周邊徘徊</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_GNjDlD9nnup759VZnh0MBQ.webp"></p><p>之後走到了一處比較像住宅區的地方，有一個大公園裡面很多家長帶著小孩子在玩耍～而我們的目的地就在這個公園的旁邊～這邊我都忘記拍照了，太可惜了QQ</p><p>走著走著很快地就來到晚上了，真的是繞了很多地方，可是我沒有習慣觀光客模式，都一直忘記拍照，太可惡了！！在前往難波車站的路上看到了一台大牛（我也想要一台XD）然後還有一棟很漂亮的建築，雖然我到現在還不知道他是什麼XD</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_gFs5P9ifQ6zYC6UqovR0IA.webp"></p><p>晚餐呢就在住處附近吃了美式的家庭餐廳，我自己是覺得還不錯，特別是漢堡排很好吃！不過這樣吃下來，發覺日本不容易吃到熟的蔬菜，都是生菜居多～這兩天已經感覺到蔬菜含量不足了XD</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4nYzzhAPqnPcBE2hiPdoMQ.webp"></p><p>就這樣結束了第二天在日本的旅遊～晚上回到家，買了一些貼腳的，希望明天可以再繼續走一整天XD，已經幾年沒運動的我，旅遊的前幾天身體一直在跟我哭訴的感覺，哈哈，只不過都被我這興奮的感覺和意志力給壓過去了，晚上還是得好好照顧一下他們，多貼幾片，明天還要靠你們呢！</p><hr><h2 id="日本之第三天"><a href="#日本之第三天" class="headerlink" title="日本之第三天"></a>日本之第三天</h2><p>一早就跑去日本橋，逛逛動漫的周邊等等的，不過我好像已經過了這個年紀了，我是沒有特別有興趣，只是覺得看看還行，不過要買的話很容易被現實層面的自己給制止，畢竟買了也沒地方放呀！</p><p>但中午是我滿期待的女僕咖啡廳，從來沒踏入過女僕咖啡廳，一直很想體驗看看那種感覺會尷尬的氛圍XD，沒錯學日文也是為了好好的跟女僕聊天（X</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_EP8DZnfMBc8k8mVg5W1H6Q.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_iGeFKg0o1Cg_wzOKJRbQYw.webp"></p><p>整體的感覺我還滿喜歡的，而且有種對自己的日文認可的那種感覺，可以好好的跟女僕聊聊天，可能也是我第一次用日文跟日本人聊天吧！只能說好險再來之前有跟朋友辦每個禮拜一次的日文讀書會，練習說說日文，不然我畢業後到現在完全沒用過真的是都快忘記怎麼講了～下次來日本旅遊，肯定會想再來看看的！</p><p>日本橋逛了很多間店，只不過我都偏走馬看花，又忘記開啟觀光客模式瘋狂拍照了，殘念！</p><p>接著就前往了心齋橋，那邊有寶可夢中心和吉卜力等等的店面，這邊真的挺好逛了，有好多相關的周邊，但本來打算要吃敘敘苑，沒訂位又不餓就沒吃了，小缺憾～不過心齋橋的人也是爆多，可以看到韓國，台灣，和日本其他地方來的觀光客，歐美反而比較少在這邊看到，不過這樣的商店街真的挺不錯的，最後來看看大龍貓和不要吃太胖還有無臉男XD</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H0_3Zv26qYbqefTXtY2cVw.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_lVqbpygbXXphhgj-91EnCw.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rOjg2uHcmr3yY3UdM7FujQ.webp"></p><p>繞著繞著就接近晚上了，心齋橋走回難波車站會經過道頓崛又拍了晚上版的XD，人更多了！</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_crIo2zjxvuhmwx9Rmtg_xA.webp"></p><p>第三天大概就這樣結束了，腳又酸又痛的XD趕緊回家多貼幾片！</p><p>日本的前三天，就這樣過完了，基本上都是觀光的地方，啊我就觀光客當然去觀光景點XD，有幾點比較可惜的是沒有去大阪知名的神社逛逛，不過這也是去京都後才有的感想XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;わくわく&quot;&gt;&lt;a href=&quot;#わくわく&quot; class=&quot;headerlink&quot; title=&quot;わくわく&quot;&gt;&lt;/a&gt;わくわく&lt;/h2&gt;&lt;p&gt;從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="osaka" scheme="https://m124578n.github.io/tags/osaka/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
  </entry>
  
  <entry>
    <title>Day10. middleware mixin</title>
    <link href="https://m124578n.github.io/2023-09-25Day10.middlewaremixin/"/>
    <id>https://m124578n.github.io/2023-09-25Day10.middlewaremixin/</id>
    <published>2023-09-25T12:43:33.000Z</published>
    <updated>2023-12-22T04:51:53.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>settings中的middleware真的有人進去看過嗎！？而昨天我們看了request進middleware加工廠，那今天就來看看內部有什麼吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>當然就是先找一個middleware來看看</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/201629054OGICW55s7.png"></p><p>我們就看看第一個middleware吧～<code>django.middleware.security.SecurityMiddleware</code><br>跟著路徑進去，會看到</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/2016290501iFGH0jy8.png"></p><p>其中的<code>MiddlewareMixin</code>就是我們今天的主角啦！！</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905p0BHUxZwa5.png"></p><p>這個就是我們的主角，但還記得昨天的<code>self._middleware_chain</code>是怎麼串的嗎！？回顧一下<br>middleware_chain會是由一個一個inner function去串連起來的</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905cgds48s3kE.png"></p><p>而其中的adapted_handler就是inner function</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905VgWZrC8mlX.png"></p><p>最後串出來的middleware大概會長得像這樣<code>mid4(mid3(mid2(mid1())))</code><br>由此可知，<code>MiddlewareMixin</code>init時給的<code>get_response</code>就是inner function<br>最後<code>_middleware_chain</code>會在get_response function時被呼叫</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905PKGhRbReJP.png"></p><p>而呼叫時會觸發的是<code>inner</code>中的邏輯</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905ha5dVRaxBy.png"></p><p>而其中的<code>get_response(request)</code>會去觸發<code>MiddlewareMixin</code>中的<code>__call__()</code></p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905JjWPgmZ8Li.png"></p><p>那這邊就會一層一層的往裡面去處理request，這樣講解我自己都覺得有點抽象，我們一樣上圖來看看！</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905ne4jv3gVxj.png"></p><p>照目前資訊畫出來會長這樣，當然<code>MiddleMixin</code>其實不只這些官網範例還有其他項，但我們依照目前資訊畫出來的就如上圖，還有其中最重要處理view的邏輯在最裡面那層，也就是在<code>load_middleware()</code>的時候這個部分</p><p><img src="/blog/images/2023-09-25Day10.middlewaremixin/20162905HQeMJIVYht.png"></p><p>其中的<code>self._get_response</code>就是我們明天的主角！！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然現在已經看懂middleware在做什麼事情了，但我卻不太清楚什麼時機點會去用他（客製化）就是了，比較常看到的是第三方套件大概率會有自己寫的middleware去處理request或response，可能是我做過的專案不夠多不夠複雜吧～不過讀懂了之後遇到感覺可以套用的情境時，就是讓自己多了個選擇！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;settings中的middleware真的有人進去看過嗎！？而昨天我們看了request進middleware加工廠，那今天就來看看內部有</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day09. request加工廠&quot;middleware&quot;～</title>
    <link href="https://m124578n.github.io/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/</id>
    <published>2023-09-24T12:13:03.000Z</published>
    <updated>2023-12-22T04:47:08.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上回我們接到了request但跳過了其中處理request的部分，而其中django在處理request的部分呢，就是<strong>middleware</strong>中間件，middleware會把收到的request處理後生成response，而middleware又有好幾個，他們是怎麼串連在一起的呢？具體又是怎麼做的呢？我們待會就來一探究竟～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我們先回到上次抓到middleware的地方！</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905cYL5ROgF7G.png"></p><p>其中會看到<code>response = self._middleware_chain(request)</code>，這個middleware_chain怎麼形成的呢？來去看看～<br>點下去會看到是在<code>BaseHandler</code>中的function <code>load_middleware()</code>（太長了截圖不了，以下是他的原始碼</p><pre><code class="hljs py"><span class="hljs-comment"># BaseHandle</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_middleware</span>(<span class="hljs-params">self, is_async=<span class="hljs-literal">False</span></span>):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Populate middleware lists from settings.MIDDLEWARE.</span><span class="hljs-string"></span><span class="hljs-string">    Must be called after the environment is fixed (see __call__ in subclasses).</span><span class="hljs-string">    &quot;&quot;&quot;</span>    self._view_middleware = []    self._template_response_middleware = []    self._exception_middleware = []    get_response = self._get_response_async <span class="hljs-keyword">if</span> is_async <span class="hljs-keyword">else</span> self._get_response    handler = convert_exception_to_response(get_response)    handler_is_async = is_async    <span class="hljs-keyword">for</span> middleware_path <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(settings.MIDDLEWARE):        middleware = import_string(middleware_path)        middleware_can_sync = <span class="hljs-built_in">getattr</span>(middleware, <span class="hljs-string">&quot;sync_capable&quot;</span>, <span class="hljs-literal">True</span>)        middleware_can_async = <span class="hljs-built_in">getattr</span>(middleware, <span class="hljs-string">&quot;async_capable&quot;</span>, <span class="hljs-literal">False</span>)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> middleware_can_sync <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> middleware_can_async:            <span class="hljs-keyword">raise</span> RuntimeError(                <span class="hljs-string">&quot;Middleware %s must have at least one of &quot;</span>                <span class="hljs-string">&quot;sync_capable/async_capable set to True.&quot;</span> % middleware_path            )        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> handler_is_async <span class="hljs-keyword">and</span> middleware_can_sync:            middleware_is_async = <span class="hljs-literal">False</span>        <span class="hljs-keyword">else</span>:            middleware_is_async = middleware_can_async        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># Adapt handler, if needed.</span>            adapted_handler = self.adapt_method_mode(                middleware_is_async,                handler,                handler_is_async,                debug=settings.DEBUG,                name=<span class="hljs-string">&quot;middleware %s&quot;</span> % middleware_path,            )            mw_instance = middleware(adapted_handler)        <span class="hljs-keyword">except</span> MiddlewareNotUsed <span class="hljs-keyword">as</span> exc:            <span class="hljs-keyword">if</span> settings.DEBUG:                <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(exc):                    logger.debug(<span class="hljs-string">&quot;MiddlewareNotUsed(%r): %s&quot;</span>, middleware_path, exc)                <span class="hljs-keyword">else</span>:                    logger.debug(<span class="hljs-string">&quot;MiddlewareNotUsed: %r&quot;</span>, middleware_path)            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">else</span>:            handler = adapted_handler        <span class="hljs-keyword">if</span> mw_instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">raise</span> ImproperlyConfigured(                <span class="hljs-string">&quot;Middleware factory %s returned None.&quot;</span> % middleware_path            )        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mw_instance, <span class="hljs-string">&quot;process_view&quot;</span>):            self._view_middleware.insert(                <span class="hljs-number">0</span>,                self.adapt_method_mode(is_async, mw_instance.process_view),            )        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mw_instance, <span class="hljs-string">&quot;process_template_response&quot;</span>):            self._template_response_middleware.append(                self.adapt_method_mode(                    is_async, mw_instance.process_template_response                ),            )        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mw_instance, <span class="hljs-string">&quot;process_exception&quot;</span>):            <span class="hljs-comment"># The exception-handling stack is still always synchronous for</span>            <span class="hljs-comment"># now, so adapt that way.</span>            self._exception_middleware.append(                self.adapt_method_mode(<span class="hljs-literal">False</span>, mw_instance.process_exception),            )        handler = convert_exception_to_response(mw_instance)        handler_is_async = middleware_is_async    <span class="hljs-comment"># Adapt the top of the stack, if needed.</span>    handler = self.adapt_method_mode(is_async, handler, handler_is_async)    <span class="hljs-comment"># We only assign to this when initialization is complete as it is used</span>    <span class="hljs-comment"># as a flag for initialization being complete.</span>    self._middleware_chain = handler</code></pre><p>在最後一行可以看到我們的目標<code>self._middleware_chain = handler</code>，在來回推看看這個handler怎麼形成的吧～<br>先把焦點移至上面</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905fmyQIoVCGH.png"></p><p>會看到他把<code>self._get_response</code>丟進去一個function <code>convert_exception_to_response()</code>裡面後指定給變數handler，我們先來看看生成handler的這支function</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905BLQyvP4ich.png"></p><p>這個function其實看function name大概就可以猜測他想做什麼了，而看註解後就更詳細了～<br>我們也可以從程式碼中看到django會去處理sync or async，而預設是sync所以我們就看sync的部分就好了～</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/201629054Mrv0cBfYq.png"></p><p>這個部分是python自己寫decorator的做法，因為我自己也沒什麼客製化寫過decorator所以看的時候花了一些時間去找出程式的流向！這邊可以看到他把傳進來的<code>get_response</code>參數丟到inner裡面後去處理try catch吐出結果response，然而這些都會在實際那個<code>self._middleware_chain</code>被call的時候才會觸發，這邊會拋出inner這個function出去到外面那個handler，說得有點抽象，畫個圖來看看～</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905tQ48Tkm4K3.png"></p><p>應該還算清楚XD<br>那現在我們知道了handler會是一個inner function包含了處理request的邏輯，那我們繼續往下看那個for迴圈</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/201629052fVLA1lhg8.png"></p><p>可以看到他會去跑一遍<code>settings.MIDDLEWARE</code>也就是這個，而且是反轉的（這邊之後再講）</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905UV7Ni3j8on.png"></p><p>把該middleware import進來後，會把原先的handler由<code>self.adapt_method_mode()</code>去check並轉換sync or async，最後再把他丟進去前面import進來的middleware -&gt; <code>mw_instance = middleware(handler)</code><br>之後的過程處理一些middleware中的function（這邊我們也之後再說）</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905Xz8b5iiNmn.png"></p><p>最後來到這裡，for loop的尾巴</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905TzoR5VcdA4.png"></p><p>又再把剛剛的import middleware丟給<code>handler = convert_exception_to_response(mw_instance)</code>，那我們前面已經知道這個handler是一個inner function了，就這樣把for loop跑完後指定給<code>self._middleware_chain</code></p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905xInxBlC2VP.png"></p><p>最後再來畫一張圖看看～</p><p><img src="/blog/images/2023-09-24Day09.request%E5%8A%A0%E5%B7%A5%E5%BB%A0middleware%EF%BD%9E/20162905J5di0aoFJb.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我們今天看了middleware_chain生成的過程，但跳過了兩個重要的地方</p><ul><li><code>self._get_response</code></li><li><code>Middleware</code>這個class本身</li></ul><p>這兩個過明後天再來看看吧！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上回我們接到了request但跳過了其中處理request的部分，而其中django在處理request的部分呢，就是&lt;strong&gt;mid</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day08. Request來了 ！ 我接！</title>
    <link href="https://m124578n.github.io/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/</id>
    <published>2023-09-23T12:01:55.000Z</published>
    <updated>2023-12-22T04:41:01.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家有沒有聽過這個面試題目，『當你的瀏覽器輸入網址後會發生什麼事情？』，據說工程師的每個階段都可以想想看怎麼回答這個問題，而每個階段思考的廣度和深度都會不太一樣，聽起來都有點像心理測驗了～那今天就是要來看看我的Django runserver後，我打開瀏覽器到我們指定的url位置後究竟會發生什麼事情呢？他又是怎麼徜徉Django的呢？今天就來挖挖看吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>究竟怎麼去接request的呢？是透過<code>wsgiref</code>這個python的lib，我們在runserver那邊也有提到過，位置在這邊<code>django.core.servers.basehttp.py</code>中的<code>run</code></p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905wYWwYUzPRi.png"></p><p>這邊是我們在runserver的最後面真的啟動server的部分，而當中的</p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905rCfO7uIMCj.png"></p><p><code>set_app()</code>就是去指定我們要接收request的地方～那個這handler怎麼來的，在往前回朔一下到<code>django.core.management.commands.runserver.py</code>中的<code>inner_run</code></p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905nORFoeMeH6.png"></p><p>其中的<code>self.get_handler()</code>就是我們handler的來源，跟著這支function往前進最後就會看到一切的源頭handler就是<code>WSGIHnadler()</code></p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905oKdiQInJlA.png"></p><p>而request進來django的時候就會去呼叫這個handler，所以我們可以看看<code>__call__</code>這個magic method<br>我們先來看看這兩個最重要的</p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905Kwkw2JGEAy.png"></p><p>夾帶environ也就是真正request送進來的資訊去new出一個<code>WSGIRequest()</code><br>之後再把request包進<code>get_response()</code>裡面就會拿到response，看到這邊我已經開始覺得裡面一定發生了我無法想像的過程 XD<br><code>WSGIRequest</code>就是讓扁平的request資料變成一個物件class的形式活在django中<br>而<code>get_response()</code>做了些什麼呢？往裡面看發現是父類別<code>BaseHandler</code>的function繼承過去的而已</p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905YX1rnXFgpl.png"></p><p>摁～過一個<code>self._middleware_chain()</code>就得到response這麼神奇，這邊我們先當瞎子，<code>self._middleware_chain()</code>先當作沒看到，明天再挖看看～<br>那得到response後下面又做什麼呢？</p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905gRQq9D3cWO.png"></p><p>看起來是收集了<code>status</code>和<code>headers</code>的資訊，然後餵給<code>start_response()</code><br>而這個<code>start_response()</code>是<code>wsgiref</code>的寫法，實際去查了一下發現好像是會去驗證<code>headers</code>如果當中發生了errors就會去改變<code>status</code>的狀態～（這邊實際情況我還在查閱資料中，如果有人知道的話歡迎下方留言！！）</p><p>那到這邊大概就是request進去django在變成response的大致流程囉～依舊來畫個圖</p><p><img src="/blog/images/2023-09-23Day08.Request%E4%BE%86%E4%BA%86%EF%BC%81%E6%88%91%E6%8E%A5%EF%BC%81/20162905Y3MFWBTBCK.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天的重點在request的進來跟出去，而request的加工廠middleware我們就留到明天再來看看吧，不只middleware我們還要找到他是如何去對其我們的<code>urls.py</code>然後把我們自己寫的view function拋出去也要找找～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不知道大家有沒有聽過這個面試題目，『當你的瀏覽器輸入網址後會發生什麼事情？』，據說工程師的每個階段都可以想想看怎麼回答這個問題，而每個階段思</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day07. 正常一點的Django長這樣～</title>
    <link href="https://m124578n.github.io/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/</id>
    <published>2023-09-22T13:53:12.000Z</published>
    <updated>2023-12-22T04:36:05.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾篇我大概把我們一開始有用到的部分都挖了一遍（還有沒說到的部分），那我們可以繼續走下去，先把那個恐怖的Hello World！改成正常一點的吧！接著再看看今天會提到指令的原始碼～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我前面把原先<code>django-admin startproject iron_man001</code>的<code>urls.py</code>改成了這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, hello), ]</code></pre><p>那今天我們先把view也就是hello function移出去吧！<br>先把terminal cd到有<code>manage.py</code>的資料夾，接著輸入<code>python manage.py startapp hello_app</code><br>此時會生成一個hello_app的資料夾，現在我們的資料夾長這樣</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/201629057oRrXh1AbR.png"></p><p>接下來新增<code>urls.py</code>到hello_app資料夾內並在裡面打出</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;&#x27;</span>, views.hello),]</code></pre><p>然後把<code>views.py</code>改成這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)</code></pre><p>接下來呢把iron_man001的<code>urls.py</code>改成這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, includeurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&quot;hello_app.urls&quot;</span>)), ]</code></pre><p>最後把<code>settings.py</code>中的<code>INSTALLED_APPS</code>新增一個</p><pre><code class="hljs python">INSTALLED_APPS = [    <span class="hljs-string">&#x27;hello_app.apps.HelloAppConfig&#x27;</span>, <span class="hljs-comment"># 新增這個</span>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,]</code></pre><p>這樣在runserver就可以看到我們寫的view function hello return 的字串囉～</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905A0aAxBD1bf.png"></p><p>完美～我們終於完成了一個相對正常的Django了 XD</p><p>接下來稍微看一下，<code>django-admin startproject</code>和<code>python manage.py startapp</code>這兩個指令，以及他是怎麼幫我們生成預設的檔案的呢？<br>相信我們對Django怎麼去讀CLI的階段已經很熟悉了，我們直接從commands中的<code>startproject.py</code>看起</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905frSKI6hEUK.png"></p><p>看起來只有指定一些變數然後去跑父類別的handle了<br>我們來看看父類別<code>TemplateCommand</code><br>一開始會去驗證我們給予的project名稱是否合法</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905piCoozE3Lr.png"></p><p>之後中間有些處理參數的過程後，到檔案處理的關卡</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905Dm1W1att1u.png"></p><p>這邊實際去看看他變數的值，就可以看到原來django預設的那些檔案全都放在了這邊<br><code>django.conf</code>中的project_template和app_template<br>接著後面的處理流程就是把他們一個一個寫入我們指定的project’s name的資料夾中</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905AiZ1AdAyuZ.png"></p><p>一個一個寫進去了呢～</p><p>最後大致過程長下圖這樣</p><p><img src="/blog/images/2023-09-22Day07.%E6%AD%A3%E5%B8%B8%E4%B8%80%E9%BB%9E%E7%9A%84Django%E9%95%B7%E9%80%99%E6%A8%A3%EF%BD%9E/20162905uR2aQLnjV2.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天大概看了一下Django產生檔案的過程，我原本一直以為他是寫在程式裡面動態一行一行生成，原來是有現成的檔案去copy，其實細看他也算是動態的寫進去了啦 XD</p><p>那明後天來看看Django接收request的過程吧，我們自己寫的view function到底是怎麼接到request然後return response的呢！？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前幾篇我大概把我們一開始有用到的部分都挖了一遍（還有沒說到的部分），那我們可以繼續走下去，先把那個恐怖的Hello World！改成正常一點</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day06. settings 注入！</title>
    <link href="https://m124578n.github.io/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/</id>
    <published>2023-09-21T15:22:48.000Z</published>
    <updated>2023-12-22T04:22:13.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>稍微補一下前幾篇的坑，這也是很重要的一環，所有Django框架層的設定都會在<code>settings.py</code>裡面，而我們在runserver的邊也有看到他是在什麼時候被import進去的，只不過沒有細講他是怎麼個import法，今天就來挖挖看settings的奧秘吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>先稍微回顧一下，據我的觀察，settings是在我們指令觸發也就是<code>python manage.py XXX</code>會到這邊</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905lTaBOQM7Si.png"></p><p>那這個檔案在import的時候就先把settings給new出來了</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905Xb02ODxjYc.png"></p><p>那什麼時候import的呢，在這邊</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905bBhcP29CA4.png"></p><p>可是他這樣怎麼import，他就只是叫一下那個INSTALLED_APPS的參數而已啊，怎麼就會把所有的<code>settings.py</code>的東西都吃進來呢？接著看<br>我挖<br>進來<code>django.conf.__init__.py</code></p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905OFFc39VKnk.png"></p><p>這邊看到真面目了！<br><code>LazySettings()</code>看起來就是不會new出來的時候就動作<br>接著看</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905QuGH93RJff.png"></p><p>可以從這邊看到其實我們真正的目標是那個<code>Settings(settings_module)</code><br>跳過去看看</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905IzzOgiQbIv.png"></p><p>這邊其實就可以很明顯的看到是在處理<code>settings.py</code>的地方了～<br>到這邊把上面得到的資訊整理一下串起來會變這樣：</p><ol><li><code>settings.INSTALLED_APPS</code></li><li><code>LazySettings()</code></li><li><code>_setup()</code></li><li><code>Settings(settings_module)</code></li></ol><p>以上，這邊會用到python的特性 </p><h3 id="magic-method"><a href="#magic-method" class="headerlink" title="magic method"></a>magic method</h3><p>在python中看到雙底線開頭雙底線結尾的變數或function<code>__&lt;magic method name&gt;__</code>就會是magic method，而其使用方法技巧妙用有很大的發揮空間，在看Django的source code的過程就可以發現大量的被使用中！</p><p>回歸正題，當今天我們呼叫<code>settings.INSTALLED_APPS</code>會觸發這個magic method</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905PLCc6IoCpU.png"></p><p>在這邊我又看到我不曾寫過的code</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/20162905sHIDPfkgRw.png"></p><p>google了一下是python 3.8新功能，叫海象運算符<code>:=</code>，其作用是可以在表達式（expression）中給變數賦值<br>再回來看code就可以發現當今天<code>self._wrapped</code>是空的時候就會去觸發<code>self._setup()</code>也就是說會去import settings啦！<br>以上大致上就是Django如何把<code>settings.py</code>的變數import進來的過程<br>用draw.io稍微畫一下大概如下</p><p><img src="/blog/images/2023-09-21Day06.settings%E6%B3%A8%E5%85%A5%EF%BC%81/201629059UJwc9RVH7.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>source code看了看真的能有不少的收穫，且可以看到很多pythonic的寫法，未來有機會情境對了想到之前看的source code寫法可能就可以更簡單更好看，可喜可賀！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;稍微補一下前幾篇的坑，這也是很重要的一環，所有Django框架層的設定都會在&lt;code&gt;settings.py&lt;/code&gt;裡面，而我們在r</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day05. runserver，怎麼run起來的？真相是！？part.2</title>
    <link href="https://m124578n.github.io/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/"/>
    <id>https://m124578n.github.io/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/</id>
    <published>2023-09-20T14:38:13.000Z</published>
    <updated>2023-12-22T03:58:53.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接續上回，我們終於走到了感覺像真的要把server run起來的地方了！畢竟function名稱都直接叫run了！<br>那今天我們就繼續挖，挖到底看到底會長怎麼樣吧！！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>接續上集的圖，今天會集中在這張圖～</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629056iZD7Q4rHe.png"></p><p>昨天我們到了<code>run()</code>的階段，讓我們來看看～</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905Zvp3tUbsR4.png"></p><p>那這邊會流向使用<code>reloader</code>因為我們<code>python manage.py runserver</code>並沒有要求他不要啟動autoreloader</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905jUSwhKy1TW.png"></p><p>我挖</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905NlHu5hFgub.png"></p><p>這邊會看到幾個重點（路徑為<code>django.utils.autoreload.py</code>）</p><ul><li><code>signal</code></li><li><code>get_reloader()</code></li><li><code>start_django()</code></li></ul><p>我們一個一個看<br><code>signal</code>先來<br>他怎麼來的呢，往上看會發現</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905s20cMGne5f.png"></p><p>是內建函式庫呢，看來直接google比較快～<br><a href="https://docs.python.org/zh-tw/3/library/signal.html">python的官方文件</a><br>簡單的理解大概是當python接收到訊號<code>signal.SIGTERM</code>會去執行後面的<code>lambda</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905l8yEutMyHj.png"></p><p>而<code>lambda</code>中的<code>sys.exit(0)</code>則是讓這支程序退出</p><p>接下來是<br><code>get_reloader()</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905rp2gBzZ1IP.png"></p><p>這邊會看到兩條路<code>WatchmanReloader</code>和<code>StatReloader</code>，兩個都是會去紀錄並關心Django的健康狀況，之後看有沒有機會來說明，今天的重點依舊是<code>runserver</code></p><p>最後是<br><code>start_django()</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905d6jxXe6aNA.png"></p><p>這邊可以看到Django額外開了一個thread是for main_func的，至於thread是什麼呢？可能還會提到process，網路上有很多詳細的資料可以查閱這邊就不獻醜了<br>我們回過頭來看<code>main_func</code>是什麼呢？</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905jUSwhKy1TW.png"></p><p>哦～是在進去<code>autoreload</code>之前的<code>runserver</code>裡面的function啊～<br>那這個<code>self.inner_run</code>做了哪些事情呢？<br>我們直接來看重點！</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629059Mtp7dLi6K.png"></p><p>這邊兩個重點</p><ul><li><code>get_handler()</code></li><li><code>run()</code></li></ul><p>首先<br><code>get_handler()</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629050kLwRZ9ypz.png"></p><p>再挖</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905cdwTOrHyMF.png"></p><p>這邊我們可以看到他會去拿我們<code>startproject</code>後生出來的<code>wsgi.py</code><br>我挖<code>wsgi.py</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629050iwhce5Wnd.png"></p><p>我再挖<code>get_wsgi_application()</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629058X9IUoDKS2.png"></p><p>這邊可以看到<code>django.setup()</code>然後<code>return WSGIHandler()</code>，這兩個坑之後會補起來的！<br>至此我們可以知道<code>get_handler()</code>會<code>return WSGIHandler()</code></p><p>接下來換<br><code>run()</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/201629052JQP8Ccpxi.png"></p><p>關鍵字來</p><ul><li>WSGIServer</li><li>WSGIRequestHandler</li><li>set_app()</li><li>serve_forever()</li></ul><p><code>WSGIServer</code>和<code>WSGIRequestHandler</code></p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905IezZtR1oNn.png"></p><p>這邊我們看關鍵字<code>simple_server</code>就好了（<code>WSGIRequestHandler</code>也是去繼承<code>simple_server</code>的類別）</p><p><img src="/blog/images/2023-09-20Day05.runserver%EF%BC%8C%E6%80%8E%E9%BA%BCrun%E8%B5%B7%E4%BE%86%E7%9A%84%EF%BC%9F%E7%9C%9F%E7%9B%B8%E6%98%AF%EF%BC%81%EF%BC%9Fpart.2/20162905xnARHcAcO8.png"></p><p>摁～<code>wsgiref</code>也是個python的內建函式庫<br>上<a href="https://docs.python.org/zh-tw/3/library/wsgiref.html">官方文件</a>可以看到有提供簡單的起一個server的範例<br>而<code>wsgiref</code>的範例中就可以看到<code>set_app()</code>和<code>serve_forever()</code>的身影～</p><p>至此大概的流程就走到這邊，而<code>python manage.py runserver</code>最後就是由<code>wsgiref</code>啟動的！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實當中還是有很多地方可以去深探，但我這邊就是講一個菜鳥看源碼的感覺，可以看到平常使用的<code>python manage.py runserver</code>到底做了多少事情，可以說越挖越深，但挖的越深我越開心呀！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接續上回，我們終於走到了感覺像真的要把server run起來的地方了！畢竟function名稱都直接叫run了！&lt;br&gt;那今天我們就繼續挖</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day04. 所以說runserver，阿server怎麼run的！？part.1</title>
    <link href="https://m124578n.github.io/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/"/>
    <id>https://m124578n.github.io/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/</id>
    <published>2023-09-19T14:25:45.000Z</published>
    <updated>2023-12-22T03:48:50.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在探索Django的項目，我想首當其衝的肯定是<code>python manage.py runserver</code>了吧！！runserver肯定是在開發Django最常用到的指令了，每次輸入完後就看他跑一些東西，然後呢～</p><p>然後server就run起來了，Django背後到底做了什麼？一行指令就讓server跑起來這是什麼黑魔法！</p><p>今天就來探索探索runserver背後的運行過程吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>開門見山的說，直接上圖</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905kmKhwiUOYZ.png"></p><p>摁～這畫質有夠差（Ｘ<br>讓我把圖拆成兩份來看</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905ZuGRjzZ1vn.png"></p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905dFdF7XK018.png"></p><p>清楚多了！<br>不過可以很明顯地看到他肯定做了很多事，而且我還沒列出全部上圖只是大部分我自己覺得重要的過程而已！！其他可能有點重要的部分我們之後再來深究！</p><p>接下來我會一個步驟一個步驟的走我是怎麼把這張圖畫出來的！<br>首先呢當然就是從指令下手<code>python manage.py runserver</code>，其中的manage.py不知道大家有沒有點進去看過，當中就是我們第一個探勘地點～<br>manage.py長這樣</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-string">&quot;&quot;&quot;Django&#x27;s command-line utility for administrative tasks.&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-string">&quot;&quot;&quot;Run administrative tasks.&quot;&quot;&quot;</span>    os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;iron_man001.settings&#x27;</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">from</span> django.core.management <span class="hljs-keyword">import</span> execute_from_command_line    <span class="hljs-keyword">except</span> ImportError <span class="hljs-keyword">as</span> exc:        <span class="hljs-keyword">raise</span> ImportError(            <span class="hljs-string">&quot;Couldn&#x27;t import Django. Are you sure it&#x27;s installed and &quot;</span>            <span class="hljs-string">&quot;available on your PYTHONPATH environment variable? Did you &quot;</span>            <span class="hljs-string">&quot;forget to activate a virtual environment?&quot;</span>        ) <span class="hljs-keyword">from</span> exc    execute_from_command_line(sys.argv)    <span class="hljs-comment"># 這邊的sys.argv = [manage.py, runserver]</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><p>挺短的也挺好懂的，基本上看變數和function名稱就可以大概知道在做什麼事情了～<br>那我們繼續跟著<code>execute_from_command_line(sys.argv)</code>看下去<br>以下位置在 <code>django.core.management.__init__ 裡面</code></p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905W1U3aOkf69.png"></p><p>new 出一個 <code>ManagementUtility()</code>然後<code>execute()</code>他，來看看<code>execute()</code>在做什麼～</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/201629057JOkCtmKKk.png"></p><p><code>CommandParser()</code>是去繼承python lib的<code>argparse.ArgumentParser()</code><br>（python argparse是一個專門處理CLI command的內建函式庫，有興趣的可以到官網看著文件手刻玩看看～）<br>再繼續往下挖</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905akQItKdoIE.png"></p><p>這邊<code>settings.INSTALLED_APPS</code>其實就會去import settings了，這邊先挖個坑，繼續往下</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905nO3YwDbQN0.png"></p><p>這邊註解寫的很詳細，不管怎樣都會先啟動autoreloading dev server，因為我們的command class還沒被讀到，command class！看來所有的command都會是class呢～<br>再繼續挖</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905BL10ij9xSU.png"></p><p><code>fetch_command()</code>後<code>run_from_argv()</code>這兩個function好像又要做一堆事情了<br>先看看<code>fetch_command()</code>會return什麼<br>最一開始會<code>get_commands()</code>而此function會把django所有相關的資料夾中有commands字眼的都抓進來</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/201629058R5abyS0Oq.png"></p><p>接下來</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905PaDryxPYbt.png"></p><p>照上圖所示，把該command的class import進來<br>到這邊<code>fetch_command()</code>就告一段落了～</p><hr><p>那runserver會import哪個command class呢？而<code>run_from_argv()</code>又在哪呢？<br>這一個<code>django.contrib.staticfiles.management.commands.runserver</code><br>我挖</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905LqtgFDO6a7.png"></p><p>他會去繼承這個command<code>django.core.management.commands.runserver.Command</code><br>我挖<br>會發現該command會去繼承<code>django.core.management.base</code>中的<code>BaseCommand</code><br>終於找到你了<code>run_from_argv()</code></p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905xUjeMx88tO.png"></p><p>中間有些地方就先跳過，去看最下面的<code>self.execute(*args, **cmd_options)</code><br>我挖</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/201629058HALKyEjO0.png"></p><p>我再挖</p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905snrrbrObKc.png"></p><p><code>handle()</code>最後會去觸發<code>run()</code></p><p><img src="/blog/images/2023-09-19Day04.%E6%89%80%E4%BB%A5%E8%AA%AArunserver%EF%BC%8C%E9%98%BFserver%E6%80%8E%E9%BA%BCrun%E7%9A%84%EF%BC%81%EF%BC%9Fpart.1/20162905Wmu3jLomj5.png"></p><p>而<code>run()</code>又做了一大堆事情，我們放到明天再繼續～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天的部分大概就是最上面圖的前半段，大概就照著這樣的感覺下去挖原始碼<br>回顧一下最一開始的<code>python manage.py runserver</code>引發了那麼一大串的程式互相作用形成，真的是挺有趣的呢，只不過一些地方要稍微想一下找一下就是了～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在探索Django的項目，我想首當其衝的肯定是&lt;code&gt;python manage.py runserver&lt;/code&gt;了吧！！runs</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day03. Django的預設頁面跑哪去啦！？</title>
    <link href="https://m124578n.github.io/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/"/>
    <id>https://m124578n.github.io/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/</id>
    <published>2023-09-18T11:43:20.000Z</published>
    <updated>2023-12-22T03:39:45.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>接續昨天做了一個非常簡易版的Hello World！頁面，發現我們的Django預設頁面消失了，究竟發生什麼事情了呢！？今天就依照我的直覺來一步一步猜測其中的原因吧！！</p><h2 id="開始通靈"><a href="#開始通靈" class="headerlink" title="開始通靈"></a>開始通靈</h2><p>來觀察一下，什麼情況下預設頁面會存在，而什麼情況下不會存在呢？<br>首先當我們都還沒做任何修改的時候預設頁面是存在的，而當我們新增一個hello就不見了，會不會是path把根路徑覆蓋掉了？</p><p>我們把path改一下看看</p><pre><code class="hljs python">path(<span class="hljs-string">&#x27;&#x27;</span>, hello)<span class="hljs-comment"># 改成</span>path(<span class="hljs-string">&#x27;hello/&#x27;</span>, hello)</code></pre><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905du3tmI22Qf.png"></p><p>摁～跳出了404 Page not found呢</p><p>那我們回復原本的情況讓path只有預設的呢肯定會出來的吧</p><pre><code class="hljs python">urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    <span class="hljs-comment"># path(&#x27;hello/&#x27;, hello), </span>]</code></pre><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905WdizQnZl82.png"></p><p>跟我們預期的一樣呢</p><p>再來把預設的admin改成hello呢</p><pre><code class="hljs python">urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, hello),    <span class="hljs-comment"># path(&#x27;hello/&#x27;, hello), </span>]</code></pre><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905bygwNBHDec.png"></p><p>預設的改成hello也是會出404</p><p>把預設的admin刪掉呢</p><pre><code class="hljs python">urlpatterns = [    <span class="hljs-comment"># path(&#x27;admin/&#x27;, hello),</span>    <span class="hljs-comment"># path(&#x27;hello/&#x27;, hello), </span>]</code></pre><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/201629052PYuQWG9eq.png"></p><p>摁～預設頁面有跳出來</p><p>這邊可以先下一個結論<br>預設頁面會在urlpatterns這個list是空的或是只有預設的admin才會存在</p><p>接下來預設頁面中有提供一個很重要的線索</p><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905dCnTEliZPg.png"></p><p>那就是在settings file 裡的DEBUG &#x3D; True 的時候才會有這個預設畫面</p><p>嘗試的驗證一下</p><pre><code class="hljs python"><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span>DEBUG = <span class="hljs-literal">True</span><span class="hljs-comment"># 改成</span>DEBUG = <span class="hljs-literal">False</span></code></pre><p>這樣會跳</p><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905xKIfN2eXQA.png"></p><p>修一下</p><pre><code class="hljs python">ALLOWED_HOSTS = []<span class="hljs-comment"># 改成</span>ALLOWED_HOSTS = [<span class="hljs-string">&#x27;*&#x27;</span>]</code></pre><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/201629053yZYtywFH4.png"></p><p>摁～說的沒錯，變成DEBUG &#x3D; False就變not found了</p><h2 id="通靈結束"><a href="#通靈結束" class="headerlink" title="通靈結束"></a>通靈結束</h2><p>至此可以下一個總結了<br>預設頁面要出現的條件如下</p><ul><li>settings.py 中的DEBUG一定要等於True</li><li>預設的urls.py中的urlpatterns的list要為空或預設的admin<br>如果沒有滿足的話會跳出404</li></ul><h2 id="開挖"><a href="#開挖" class="headerlink" title="開挖"></a>開挖</h2><p>線索都有了就往原始碼挖吧！<br>先找看看有沒有debug相關的程式碼<br>順利的在django.views中找到debug.py<br>在裡面搜尋一下404 或 default 就會看到</p><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">technical_404_response</span>(<span class="hljs-params">request, exception</span>):    <span class="hljs-string">&quot;&quot;&quot;Create a technical 404 error response. `exception` is the Http404.&quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        error_url = exception.args[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;path&quot;</span>]    <span class="hljs-keyword">except</span> (IndexError, TypeError, KeyError):        error_url = request.path_info[<span class="hljs-number">1</span>:]  <span class="hljs-comment"># Trim leading slash</span>    <span class="hljs-keyword">try</span>:        tried = exception.args[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;tried&quot;</span>]    <span class="hljs-keyword">except</span> (IndexError, TypeError, KeyError):        resolved = <span class="hljs-literal">True</span>        tried = request.resolver_match.tried <span class="hljs-keyword">if</span> request.resolver_match <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>    <span class="hljs-keyword">else</span>:        resolved = <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tried <span class="hljs-keyword">or</span> (  <span class="hljs-comment"># empty URLconf</span>            request.path == <span class="hljs-string">&quot;/&quot;</span>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(tried) == <span class="hljs-number">1</span>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(tried[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>  <span class="hljs-comment"># default URLconf</span>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">getattr</span>(tried[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-string">&quot;app_name&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)            == <span class="hljs-built_in">getattr</span>(tried[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-string">&quot;namespace&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)            == <span class="hljs-string">&quot;admin&quot;</span>        ):            <span class="hljs-keyword">return</span> default_urlconf(request)    urlconf = <span class="hljs-built_in">getattr</span>(request, <span class="hljs-string">&quot;urlconf&quot;</span>, settings.ROOT_URLCONF)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(urlconf, types.ModuleType):        urlconf = urlconf.__name__    <span class="hljs-keyword">with</span> builtin_template_path(<span class="hljs-string">&quot;technical_404.html&quot;</span>).<span class="hljs-built_in">open</span>(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fh:        t = DEBUG_ENGINE.from_string(fh.read())    reporter_filter = get_default_exception_reporter_filter()    c = Context(        &#123;            <span class="hljs-string">&quot;urlconf&quot;</span>: urlconf,            <span class="hljs-string">&quot;root_urlconf&quot;</span>: settings.ROOT_URLCONF,            <span class="hljs-string">&quot;request_path&quot;</span>: error_url,            <span class="hljs-string">&quot;urlpatterns&quot;</span>: tried,            <span class="hljs-string">&quot;resolved&quot;</span>: resolved,            <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-built_in">str</span>(exception),            <span class="hljs-string">&quot;request&quot;</span>: request,            <span class="hljs-string">&quot;settings&quot;</span>: reporter_filter.get_safe_settings(),            <span class="hljs-string">&quot;raising_view_name&quot;</span>: get_caller(request),        &#125;    )    <span class="hljs-keyword">return</span> HttpResponseNotFound(t.render(c))<span class="hljs-keyword">def</span> <span class="hljs-title function_">default_urlconf</span>(<span class="hljs-params">request</span>):    <span class="hljs-string">&quot;&quot;&quot;Create an empty URLconf 404 error response.&quot;&quot;&quot;</span>    <span class="hljs-keyword">with</span> builtin_template_path(<span class="hljs-string">&quot;default_urlconf.html&quot;</span>).<span class="hljs-built_in">open</span>(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fh:        t = DEBUG_ENGINE.from_string(fh.read())    c = Context(        &#123;            <span class="hljs-string">&quot;version&quot;</span>: get_docs_version(),        &#125;    )    <span class="hljs-keyword">return</span> HttpResponse(t.render(c))</code></pre><p>完美的找到了預設面頁在哪裡出現了<br>再根據上面原始碼中找到關鍵字default_urlconf.html再下去找，可以在django.views這個資料夾中的templates裡面找到一些django預設的html檔案</p><p><img src="/blog/images/2023-09-18Day03.Django%E7%9A%84%E9%A0%90%E8%A8%AD%E9%A0%81%E9%9D%A2%E8%B7%91%E5%93%AA%E5%8E%BB%E5%95%A6%EF%BC%81%EF%BC%9F/20162905qH1s2d9wDg.png"></p><p>到這邊任務就結束了，當中一定會有很多疑問那就留到之後的日子慢慢研究吧！</p><p>至於你問為什麼要找預設頁面呢？<br>我只能回答＂阿我就突然一個好奇，怕是沒找到晚上會睡不好～＂</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;接續昨天做了一個非常簡易版的Hello World！頁面，發現我們的Django預設頁面消失了，究竟發生什麼事情了呢！？今天</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day02. Hello World !</title>
    <link href="https://m124578n.github.io/2023-09-17Day02.Hello%20World%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-09-17Day02.Hello%20World%EF%BC%81/</id>
    <published>2023-09-17T11:28:02.000Z</published>
    <updated>2023-12-22T03:30:37.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先先來做一個簡單到不能再簡單的Hello-World！網站吧！"><a href="#首先先來做一個簡單到不能再簡單的Hello-World！網站吧！" class="headerlink" title="首先先來做一個簡單到不能再簡單的Hello World！網站吧！"></a>首先先來做一個簡單到不能再簡單的Hello World！網站吧！</h3><p>（開發環境、IDE等等的這邊就不多做說明，網路上應該可以看到各式各樣的教學～）</p><ol><li>打開CLI(command line interface)</li><li>新建資料夾 mkdir &lt;dir name&gt;</li><li>cd 進去剛剛建的資料夾</li><li>輸入django-admin startproject &lt;project name&gt; 這邊我取名 iron_man001</li><li>cd &lt;project name&gt; iron_man001</li><li>啟動Django python manage.py runserver</li></ol><p>此時你會看到像下圖的資訊<br><img src="/blog/images/2023-09-17Day02.HelloWorld%EF%BC%81/20162905QwxPeRORs3.png"></p><p>這時ctrl按著滑鼠去點<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>會看到Django的預設畫面<br><img src="/blog/images/2023-09-17Day02.HelloWorld%EF%BC%81/20162905f3eDut79ll.png"></p><p>這樣就完成了啟動一個Django囉～<br>接下來寫一個Hello World！的頁面～<br>（自由的python，以下範例是極簡化，以最少步驟做到Hello World！實際開發千萬不能這麼做唷～）<br>現在你應該會看到資料夾裡面有這些東西<br><img src="/blog/images/2023-09-17Day02.HelloWorld%EF%BC%81/20162905t7GlEX7Xn4.png"></p><ol><li>到iron_man001 (iron_man001裡面的)</li><li>開啟urls.py</li><li>修改</li></ol><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> pathurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),]</code></pre><p>把他改成這樣</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World！&quot;</span>)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, hello), ]</code></pre><p>最後再下python manage.py runserver<br>打開<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>就可以看到Hello World！囉！！<br><img src="/blog/images/2023-09-17Day02.HelloWorld%EF%BC%81/201629057h1l654346.png"></p><p>稍微說明一下，我們建立了一個function hello，之後讓path(‘’)空路徑去讀取該function。<br>而function hello只有簡單的回傳HttpResponse物件裡面包”Hello World！”字串<br>之後會再詳細說明他們之間是怎麼運行的～</p><hr><p>這時我就好奇了，阿剛剛的初始頁面呢？跑哪去了？<br>明天就來稍微研究研究吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;首先先來做一個簡單到不能再簡單的Hello-World！網站吧！&quot;&gt;&lt;a href=&quot;#首先先來做一個簡單到不能再簡單的Hello-World！網站吧！&quot; class=&quot;headerlink&quot; title=&quot;首先先來做一個簡單到不能再簡單的Hello World！</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day01. 前言 - 初衷</title>
    <link href="https://m124578n.github.io/2023-09-16Day01.%E5%89%8D%E8%A8%80-%E5%88%9D%E8%A1%B7/"/>
    <id>https://m124578n.github.io/2023-09-16Day01.%E5%89%8D%E8%A8%80-%E5%88%9D%E8%A1%B7/</id>
    <published>2023-09-16T12:20:02.000Z</published>
    <updated>2023-12-22T04:15:56.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://ithelp.ithome.com.tw/users/20162905/ironman/6646">iThome 15th鐵人賽</a><br>為什麼選擇Django當這次的主題研究對象、又是要還什麼債呢？</p><p>話要從頭開始說，我是日文系畢業很想去日本工作，在大三的時候老師無心的一句話讓我開始對程式語言產生了興趣！在那之後跌跌撞撞了一年多，才去報名相關的程式課程，而第一個入門的語言當然就是Python囉～</p><p>時間又過了一年，我也很勉強的踏進了這個行業（半隻腳），在工作中大概了解整個程序猿的生活，也在水球軟體學院中展開了我在公司裡看不到的軟體世界，這時我想我才真正的被程式給吸引著，原來寫code可以那麼流暢、那麼自然～（扯遠了 XD）</p><p>總之呢，我目前工作的這一年來都是使用Python Django這個web framework進行全端的工作，但卻從來沒有好好的正視過Django和web之間的愛恨情仇（？，就只永遠停留在使用階段，但我現在的心態已經從反正會動就好了轉換成我好想知道他為什麼會這樣動，於是決定藉由鐵人賽的機會好好的重新學學Django並了解他到底內部是怎麼運作的！</p><h1 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h1><p>以下主題是我列出來的，我目前想到的內容，在未來的日子中可能會出現可能不會出現～</p><ul><li>Django startproject</li><li>Django startapp</li><li>Django setting</li><li>Django createsuperuser &#x2F; admin</li><li>Django MTV</li><li>Django model &#x2F; migrate</li><li>Django ORM</li><li>Django View &#x2F; FBV &#x2F; CBV</li><li>Django form</li><li>Django inspectdb</li><li>Django middleware</li><li>Django security</li><li>Django template</li><li>Django 全端 &#x2F; 前後稍微分離</li><li>Django test</li><li>Django mailserver</li><li>Django web socket</li><li>Django cache &#x2F; redis</li><li>Django paginator</li><li>Django 排程 &#x2F; crontab &#x2F; celery</li><li>Django OAuth</li><li>Django nginx uwsgi docker deploy</li></ul><p>不一定會照順序也不一定會全都有，甚至是出現上面沒出現的都有可能會突然冒出～</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><blockquote><p>在大量輸入的同時！也要好好的練習輸出！學習效率將會大幅提升！！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20162905/ironman/6646&quot;&gt;iTh</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Django x Javascript 不同寫法part2. 更新State的方式進行JS渲染</title>
    <link href="https://m124578n.github.io/2023-08-27Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%20%20%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/"/>
    <id>https://m124578n.github.io/2023-08-27Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%20%20%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/</id>
    <published>2023-08-27T12:00:00.000Z</published>
    <updated>2023-12-18T06:29:42.709Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-08-27DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/0_Yd6S5EqUbIdDYODn.webp"><br><em>image <a href="https://unsplash.com/photos/a-macbook-with-lines-of-code-on-its-screen-on-a-busy-desk-m_HRfLhgABo">source</a></em></p><p>上次的文章中是我以前常用的寫法，而今天要說的是我前陣子看到這篇文章發現的新大陸</p><h3 id="week-21-前端框架-先別急著學-React-HackMD"><a href="#week-21-前端框架-先別急著學-React-HackMD" class="headerlink" title="[week 21] 前端框架 - 先別急著學 React - HackMD"></a><a href="https://hackmd.io/@Heidi-Liu/note-fe302-review?source=post_page-----4e0621202043--------------------------------">[week 21] 前端框架 - 先別急著學 React - HackMD</a></h3><p>我覺得挺有趣的就試著把上次那版改成這種方式下去實作！</p><p>Django的程式碼跟上週一樣所以今天不會有python的code，就請參考上篇文章！！</p><p>那這次我是使用axios跟fetch大同小異，只是需要而外安裝（引入）也有使用到一些JQuery，話不多說先上code吧～</p><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.7.0.js&quot;</span> integrity=<span class="hljs-string">&quot;sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="hljs-comment">//....</span><span class="hljs-keyword">let</span> state = &#123;    <span class="hljs-attr">todos</span>: []&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;            response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                state = &#123;                    <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                        <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,                        <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,                        <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span>                    &#125;]                &#125;            &#125;)            <span class="hljs-title function_">updateState</span>(state)        &#125;)    &#125;<span class="hljs-comment">// 更新 state</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;    state = newState;    <span class="hljs-title function_">render</span>()&#125;<span class="hljs-comment">// state =&gt; UI</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 先把畫面清空</span>    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(    <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>    state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)    );&#125;<span class="hljs-comment">// Todo component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span><span class="hljs-string">        &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Span(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// Span component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span>&#125;<span class="hljs-comment">// Button component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// 新增 todo</span>$(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();    <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;    $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>,         &#123;            <span class="hljs-string">&quot;title&quot;</span>: content        &#125;,        &#123;            <span class="hljs-attr">headers</span>: &#123;             <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,            &#125;,        &#125;    )    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-comment">// 更新 state</span>        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                <span class="hljs-attr">id</span>: todo_id,                <span class="hljs-attr">content</span>: title,                <span class="hljs-attr">isDone</span>: complete            &#125;]        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 刪除 todo</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 未完成 &lt;-&gt; 已完成</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;                <span class="hljs-keyword">return</span> &#123;                ...todo,                <span class="hljs-attr">isDone</span>: complete                &#125;            &#125;)        &#125;)    &#125;)&#125;)</code></pre><p>跟上次相比是不是很不一樣，我自己覺得這樣子的寫法更加的直觀和易讀易懂！</p><p>那我們一樣拆開來看，首先我們要生成Todo的component</p><pre><code class="hljs javascript"><span class="hljs-comment">// Todo component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span><span class="hljs-string">        &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Span(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// Span component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span>&#125;<span class="hljs-comment">// Button component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span><span class="hljs-string">    `</span>&#125;</code></pre><p>我的Todo component裡面還包括了一個Span component和兩個Button component那他們會依據帶進去的參數而有不同的樣式</p><p>接著再到get_all_list()</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> state = &#123;    <span class="hljs-attr">todos</span>: []&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;            response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                state = &#123;                    <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                        <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,                        <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,                        <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span>                    &#125;]                &#125;            &#125;)            <span class="hljs-title function_">updateState</span>(state)        &#125;)    &#125;<span class="hljs-comment">// 更新 state</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;    state = newState;    <span class="hljs-title function_">render</span>()&#125;<span class="hljs-comment">// state =&gt; UI</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 先把畫面清空</span>    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(    <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>    state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)    )&#125;</code></pre><p>一開始的狀態先給一個空array，在get_all_list()用axios去打api拿取現在所有的Todo datas，拿到datas後在一個一個把他們塞進去todos array裡面，最後再交由updateState去把現在的state更新掉然後render，render()的工作很簡單會先把現在html上所有的todos元素清空，然後在一筆一筆塞進去～</p><p>再來我們來看看新增</p><pre><code class="hljs javascript"><span class="hljs-comment">// 新增 todo</span>$(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();    <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;    $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>,         &#123;            <span class="hljs-string">&quot;title&quot;</span>: content        &#125;,        &#123;            <span class="hljs-attr">headers</span>: &#123;               <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,            &#125;,        &#125;    )    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-comment">// 更新 state</span>        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                <span class="hljs-attr">id</span>: todo_id,                <span class="hljs-attr">content</span>: title,                <span class="hljs-attr">isDone</span>: complete            &#125;]        &#125;)    &#125;)&#125;)</code></pre><p>很簡單的去判斷button有沒有沒click，然後取input的值丟axios，那response會回傳該todo的data，就把他updateState一次就OK了！</p><p>接下來的修改和刪除也是同樣的概念，打api後response丟給updateState就完事啦～</p><pre><code class="hljs javascript"><span class="hljs-comment">// 刪除 todo</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 未完成 &lt;-&gt; 已完成</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;                <span class="hljs-keyword">return</span> &#123;                ...todo,                <span class="hljs-attr">isDone</span>: complete                &#125;            &#125;)        &#125;)    &#125;)&#125;)</code></pre><p>刪除就是把存在state裡的todo id移除掉，而修改則是把該todo id抓出來改變他的isDone屬性。</p><p>至此就大功告成啦，對Javascript不熟悉的我經過這個練習大概可以知道state component的概念！下次可能就是直接用react改寫看看囉！</p><p>軟體和程式的世界真的很有趣，可以用不同的做法達到相同的目的，而且瞬息萬變，可能明天又能有新的東西可以學習，想想就興奮呢！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-08-27DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="學習" scheme="https://m124578n.github.io/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="javascript" scheme="https://m124578n.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Django x Javascript 不同寫法part1.使用Django原生template</title>
    <link href="https://m124578n.github.io/2023-08-20Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/"/>
    <id>https://m124578n.github.io/2023-08-20Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/</id>
    <published>2023-08-20T12:00:00.000Z</published>
    <updated>2023-12-18T06:29:50.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-08-20DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/0_MmikwY_ANgH8Xj99.webp"><br><em>image <a href="https://unsplash.com/photos/black-flat-screen-computer-monitor-SyvsTmuuZyM">source</a></em></p><p>前陣子看到了這個</p><h3 id="Youtube影片"><a href="#Youtube影片" class="headerlink" title="Youtube影片"></a><a href="https://www.youtube.com/watch?v=3vfum74ggHE&list=PLrgX5bzJJljqMbq7msQX4nzTtV3kqZOST&ab_channel=PatrickLoeber">Youtube影片</a></h3><p>決定花了一點時間去研究練習Django網站的各種寫法，其中包括原生template、fetch、axios、react，後面其實都在寫Javascript居多，Python改成API後就沒事了XD。</p><p>照著影片把最基本的Django template版本先做出來大概會長這樣</p><pre><code class="hljs python"><span class="hljs-comment"># view.py</span>...<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo_list&quot;</span>: todos&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)</code></pre><p>首頁＋增刪修，且任何動作都直接導回index做重新查詢</p><pre><code class="hljs html">// base.html...<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/add&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>            &#123;% csrf_token %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        &#123;% for todo in todo_list %&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui segment&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui big header&quot;</span>&gt;</span>&#123;&#123; todo.id &#125;&#125; | &#123;&#123; todo.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>            &#123;% if todo.complete == False %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui gray label&quot;</span>&gt;</span>Not Complete<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            &#123;% else %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui green label&quot;</span>&gt;</span>Completed<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            &#123;% endif %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/update/&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui red button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/delete/&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        &#123;% endfor %&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>很簡單且基礎的Jinja2模板，但使用上面的程式碼寫出來的網站不管做什麼事都會重新整理一遍（導回index），現在ajax已經是基本要求了所以開改！</p><p>首先先把Django改成API形式吧！這邊就沒用restful framework直接回json</p><pre><code class="hljs python"><span class="hljs-comment"># view.py</span>...<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">api</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-built_in">list</span>(todos.values())&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    body = request.body.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    body = json.loads(body)    title = body.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete, <span class="hljs-string">&quot;todo_title&quot;</span>: todo.title&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id&#125;)</code></pre><p>再來就是改base.html</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;get_all_list()&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">add()</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = form_sumbit</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">form_sumbit</span>(<span class="hljs-params">e</span>)&#123;</span><span class="language-javascript">                the_event = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span></span><span class="language-javascript">                code = the_event.<span class="hljs-property">keyCode</span> || the_event.<span class="hljs-property">which</span> || the_event.<span class="hljs-property">charCode</span></span><span class="language-javascript">                <span class="hljs-keyword">if</span> (code == <span class="hljs-number">13</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-title function_">add</span>()</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><span class="language-javascript">                &#125;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/&quot;</span>)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJosn</span>)&#123;</span><span class="language-javascript">                    data = myJosn[<span class="hljs-string">&quot;data&quot;</span>]</span><span class="language-javascript">                    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                        html = <span class="hljs-string">&quot;&quot;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27; | &#x27;</span>+todo.<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span></span><span class="language-javascript">                        <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">complete</span>)&#123;</span><span class="language-javascript">                            html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui green label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Completed&lt;/span&gt;&#x27;</span></span><span class="language-javascript">                        &#125;</span><span class="language-javascript">                        <span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">                            html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span></span><span class="language-javascript">                        &#125;</span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span></span><span class="language-javascript">                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                title = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#title&quot;</span>).<span class="hljs-property">value</span></span><span class="language-javascript">                data = &#123;</span><span class="language-javascript">                    <span class="hljs-string">&quot;title&quot;</span>: title</span><span class="language-javascript">                &#125;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>, &#123;</span><span class="language-javascript">                    <span class="hljs-attr">headers</span>: &#123; </span><span class="language-javascript">                        <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,</span><span class="language-javascript">                        <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/4.0 MDN Example&quot;</span>,</span><span class="language-javascript">                        <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>, </span><span class="language-javascript">                    &#125;,</span><span class="language-javascript">                    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>, </span><span class="language-javascript">                    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>)&#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = myJson[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    title = myJson[<span class="hljs-string">&quot;todo_title&quot;</span>]</span><span class="language-javascript">                    html = <span class="hljs-string">&quot;&quot;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo_id+<span class="hljs-string">&#x27; | &#x27;</span>+title+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span></span><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">update_</span>(<span class="hljs-params">todo_id</span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+todo_id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>) &#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = myJson[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    ctodo_id = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#todo&quot;</span>+todo_id)</span><span class="language-javascript">                    <span class="hljs-keyword">if</span> (complete)&#123;</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;gray&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;green&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Completed&quot;</span></span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                    <span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;green&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;gray&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Not Complete&quot;</span></span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">delete_</span>(<span class="hljs-params">todo_id</span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+todo_id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>) &#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    this_node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all_todo&quot;</span>+id)</span><span class="language-javascript">                    this_node.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(this_node)</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>WOW變超多的，我們一個一個拆開來看吧</p><p>首先先來看看get_all_list做了什麼</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/&quot;</span>)    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()    &#125;)    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJosn</span>)&#123;        data = myJosn[<span class="hljs-string">&quot;data&quot;</span>]        data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;            html = <span class="hljs-string">&quot;&quot;</span>            html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span>            html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27; | &#x27;</span>+todo.<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span>            <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">complete</span>)&#123;                html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui green label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Completed&lt;/span&gt;&#x27;</span>            &#125;            <span class="hljs-keyword">else</span>&#123;                html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span>            &#125;            html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span>            html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html        &#125;);    &#125;)&#125;</code></pre><p>fetch把過去後回來的response要先過一層json才能使用，而這個就是把原先\</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-08-20DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftem</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="學習" scheme="https://m124578n.github.io/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="javascript" scheme="https://m124578n.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Line-Bot串接Line-Notify實現跨群組轉播訊息～</title>
    <link href="https://m124578n.github.io/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/</id>
    <published>2023-07-23T12:00:00.000Z</published>
    <updated>2023-12-15T09:08:31.492Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/0_f8lsWRDjU_jcsc7-.webp"></p><p>我對自己提了一個需求，我需要把一個Line群組的訊息轉發到另一個Line群組，大概要做一個月，就覺得每天這樣手動傳太麻煩了，於是乎我決定做一個Line-Bot來幫我處理這件事吧。</p><h2 id="首先先研究了Line-Bot要怎麼接收訊息於是google"><a href="#首先先研究了Line-Bot要怎麼接收訊息於是google" class="headerlink" title="首先先研究了Line-Bot要怎麼接收訊息於是google"></a>首先先研究了Line-Bot要怎麼接收訊息於是google</h2><h2 id="LINE-BOT-教學-Python"><a href="#LINE-BOT-教學-Python" class="headerlink" title="LINE BOT 教學 ( Python )"></a><a href="https://steam.oxxostudio.tw/category/python/example/line-bot.html?source=post_page-----c0acfed7d9f6--------------------------------">LINE BOT 教學 ( Python )</a></h2><p>這篇大致上有完整的基礎教學，開始抄功課吧！！</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> config<span class="hljs-keyword">from</span> linebot <span class="hljs-keyword">import</span> LineBotApi, WebhookHandler<span class="hljs-keyword">from</span> linebot.exceptions <span class="hljs-keyword">import</span> InvalidSignatureError<span class="hljs-keyword">from</span> linebot.models <span class="hljs-keyword">import</span> MessageEvent, TextMessage, TextSendMessageapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):    body = request.get_data(as_text=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        json_data = json.loads(body)  <span class="hljs-comment"># json 格式化訊息內容</span>        access_token = config.CHANNEL_ACCESS_TOKEN        secret = config.CHANNEL_SECRET        line_bot_api = LineBotApi(access_token)  <span class="hljs-comment"># 確認 token 是否正確</span>        handler = WebhookHandler(secret)  <span class="hljs-comment"># 確認 secret 是否正確</span>        signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]  <span class="hljs-comment"># 加入回傳的 headers</span>        handler.handle(body, signature)  <span class="hljs-comment"># 綁定訊息回傳的相關資訊</span>        token = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;replyToken&#x27;</span>]  <span class="hljs-comment"># 取得回傳訊息的 Token</span>        message_type = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]  <span class="hljs-comment"># 取得 LINe 收到的訊息類型</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;text&#x27;</span>:            msg = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;text&#x27;</span>]  <span class="hljs-comment"># 取得 LINE 收到的文字訊息</span>            line_bot_api.reply_message(tk,TextSendMessage(msg)) <span class="hljs-comment"># 這邊會回覆傳進來的訊息</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;image&#x27;</span>:            msg_id = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]            message_content = line_bot_api.get_message_content(msg_id)  <span class="hljs-comment"># Line的圖片要透過ID去找</span>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fd:                fd.write(message_content.content)  <span class="hljs-comment"># 這邊把圖片存下來</span>    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(body)  <span class="hljs-comment"># 如果發生錯誤，印出收到的內容</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span></code></pre><p>這邊只是簡單的測試Line-Bot能不能順利地接受文字和圖片，程式碼的部分上面是這樣，在來要去Line Developer設定機器人取得上面兩個參數：</p><ul><li>Channel_Access_Token</li><li>Channel_Secret</li></ul><p>首先先進入</p><h2 id="LINE-Developers"><a href="#LINE-Developers" class="headerlink" title="LINE Developers"></a><a href="https://developers.line.biz/zh-hant/?source=post_page-----c0acfed7d9f6--------------------------------">LINE Developers</a></h2><p>然後去點先new channel<br>再點選Messaging API</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_nilYbCP_aFa5cnxSXFXk0g.webp"></p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_ianpFH1X4dVDa3khk4FQFA.webp"></p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_mr4Zb9T8PSH7d9yqoIk7vg.webp"></p><p>把該填的資料填一填就會獲得一個機器人囉～<br>而在機器人的Basic Setting中可以找到Channel Secret<br>然後在Messaging API 可以加機器人好友以及找到Channel Access Token</p><p>完成上述的步驟把那兩個參數加上去後就完成了啦（（還早還早<br>上面那些步驟弄完了，還差一台Server去把我的機器人部署上去並且要給一個https的網址丟給Line-Bot的Webhook這樣才算完成～</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_1StBjniv5ErlIExt9SbVCg.webp"></p><p>然後我就想去找個免費的平台用！低成本製作能不花錢則不花錢！<br>於是我找到了fly.io</p><h2 id="fly-io"><a href="#fly-io" class="headerlink" title="fly.io"></a><a href="https://fly.io/?source=post_page-----c0acfed7d9f6--------------------------------">fly.io</a></h2><p>fly.io有提供一些免費的空間，詳細就請自行觀看免費方案。<br>由於我是寫Python所以用google搜尋 fly io python找到了</p><h2 id="Run-a-Python-App"><a href="#Run-a-Python-App" class="headerlink" title="Run a Python App"></a><a href="https://fly.io/docs/languages-and-frameworks/python/?source=post_page-----c0acfed7d9f6--------------------------------">Run a Python App</a></h2><p>趕緊拿來改寫，改寫完後在使用fly.io部署的步驟就完成啦！！<br>fly.io在使用前記得要安裝唷～<br>然後照著上面的步驟使用：</p><ul><li>flyctl launch</li><li>flyctl deploy</li><li>更新則使用 flyctl deploy — update-only</li></ul><p>基本上上述就可以完成一個只會回覆訊息的Line-Bot機器人囉！！</p><p>然而我的需求不只是要一個只會回覆訊息的機器人<br>（誰會需要這樣的機器人XD）<br>我還需要讓這個機器人幫我轉傳訊息！<br>於是找到了Line-Notify～</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/0_BM2LYZ-jhhPamJ9N.webp"></p><p>Line-Notify，其實簡單的說就是打Line的API就可能傳訊息！<br>以Python來說就是打requests請求，上code</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_message</span>(<span class="hljs-params">msg</span>):    token = config.TOKEN    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: msg&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data)</code></pre><p>而token怎麼來去Line-Notify登錄一個服務吧</p><h2 id="LINE-Notify"><a href="#LINE-Notify" class="headerlink" title="LINE Notify"></a><a href="https://notify-bot.line.me/zh_TW/?source=post_page-----c0acfed7d9f6--------------------------------">LINE Notify</a></h2><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_EQbNadwe3tYiSw9im1VB6A.webp"></p><p>那下面那個Callback URL當然就是填入Line-Bot的Webhook也就是你個Server的所在處囉～</p><p>登錄完服務就來註冊權杖囉～</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_Pbti7K4tgWXxSurP8zqzBg.webp"></p><p>權杖註冊就會給你一個Token，把這個Token丟到剛剛的程式碼中就能傳了！</p><p>完整的程式碼如下：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> config<span class="hljs-keyword">from</span> linebot <span class="hljs-keyword">import</span> LineBotApi, WebhookHandler<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> linebot.exceptions <span class="hljs-keyword">import</span> InvalidSignatureErrorapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):    body = request.get_data(as_text=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        json_data = json.loads(body)  <span class="hljs-comment"># json 格式化訊息內容</span>        access_token = config.CHANNEL_ACCESS_TOKEN        secret = config.CHANNEL_SECRET        line_bot_api = LineBotApi(access_token)  <span class="hljs-comment"># 確認 token 是否正確</span>        handler = WebhookHandler(secret)  <span class="hljs-comment"># 確認 secret 是否正確</span>        signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]  <span class="hljs-comment"># 加入回傳的 headers</span>        handler.handle(body, signature)  <span class="hljs-comment"># 綁定訊息回傳的相關資訊</span>        token = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;replyToken&#x27;</span>]  <span class="hljs-comment"># 取得回傳訊息的 Token</span>        message_type = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]  <span class="hljs-comment"># 取得 LINe 收到的訊息類型</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;text&#x27;</span>:            msg = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;text&#x27;</span>]  <span class="hljs-comment"># 取得 LINE 收到的文字訊息</span>            line_notify_message(msg)        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;image&#x27;</span>:            msg_id = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]            message_content = line_bot_api.get_message_content(msg_id)            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fd:  <span class="hljs-comment"># /workspace/&#123;msg_id&#125;.jpg</span>                fd.write(message_content.content)            line_notify_image(msg_id)    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(body)  <span class="hljs-comment"># 如果發生錯誤，印出收到的內容</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_message</span>(<span class="hljs-params">msg</span>):    token = config.TOKEN    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: msg&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data)<span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_image</span>(<span class="hljs-params">msg_id</span>):    token = config.TOKEN    <span class="hljs-comment"># 要發送的訊息</span>    message = <span class="hljs-string">&#x27;這是用 Python 發送的訊息與圖片&#x27;</span>    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: message&#125;    <span class="hljs-comment"># 要傳送的圖片檔案</span>    image = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;/workspace/<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)    files = &#123;<span class="hljs-string">&#x27;imageFile&#x27;</span>: image&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data, files=files)</code></pre><p>因為是簡單的服務，程式碼方面我就沒那麼多要求了～請大家多見諒～</p><p>以上就是今天的簡單Line-Bot串Line-Notify介紹以及實作～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="flask" scheme="https://m124578n.github.io/tags/flask/"/>
    
    <category term="學習" scheme="https://m124578n.github.io/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="Line Bot" scheme="https://m124578n.github.io/tags/Line-Bot/"/>
    
    <category term="Line Notify" scheme="https://m124578n.github.io/tags/Line-Notify/"/>
    
    <category term="fly.io" scheme="https://m124578n.github.io/tags/fly-io/"/>
    
  </entry>
  
  <entry>
    <title>【閱讀心得】原子習慣</title>
    <link href="https://m124578n.github.io/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/"/>
    <id>https://m124578n.github.io/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/</id>
    <published>2023-07-09T12:00:00.000Z</published>
    <updated>2023-12-15T08:44:31.553Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/1_fxhtD2eXKMQt6FMBp-1zlg.webp"></p><h2 id="契機"><a href="#契機" class="headerlink" title="契機"></a>契機</h2><p>有不少人推薦了這本書，而我大概聽了友人分享兩三個月直到最近才買來看，而之所以會突然想看是因為，2023&#x2F;06~07這幾個禮拜一直在思考著自己追求的是什麼，想要的又是什麼，有沒有具體的路徑，或是明確的目標。而在迷惘的過程中就想到了“原子習慣”，於是興沖沖的趕緊去買來，並快速地看過一遍，從中其實發現了好幾個自己身處過的情境是符合書中的章節，而書中又整理出一個完整的脈絡。</p><h2 id="習慣"><a href="#習慣" class="headerlink" title="習慣"></a>習慣</h2><p>人類，從小就開始會產生很多習慣，好習慣、壞習慣、下意識的習慣、刻意培養的習慣。而我們就是活在習慣之中。</p><p>小時後回家第一件事是打開電腦上線打遊戲，這也是一個習慣，我出門一定要帶雨傘，這也是一個習慣，我刷牙會從左邊開始刷，這也是一個習慣。</p><p>習慣只是讓大腦進入一個節能模式，因為大腦是懶惰的，能節能下來的能量正是我們應該好好利用的，用在學習、用在上班、用在解決問題、用在認識新朋友，而當沒有好好的利用這些能量，就如同前面所說的大腦是懶惰的，人也是懶惰的，這些能量就白白的浪費掉了。</p><p>而當你有想要培養新的“好習慣”，大腦又會開始發懶，去執行你既有的習慣，而非探索未知領域，在初期可能可以靠著意志力去支撐，但又能維持多久呢？</p><p>此時你可能會開始嘗試很多做法，又或是乾脆遵循著大腦的習慣，而“原子習慣”這本書呢，就提供了一套實際有用且可以運行方法，讓你該變習慣過上你想要的生活。</p><h2 id="複利"><a href="#複利" class="headerlink" title="複利"></a>複利</h2><p>可能會比較有機會在股票市場上面聽到這個詞，但書中有提到讓習慣變成“複利”，這個概念讓我產生非常多的想法，並且只要持續就能產生更多價值。</p><p>從小地方開始慢慢培養起自己的習慣，時間久了，累積起來的將會成為自信的來源。</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>書中提到了許多我嘗試過但失敗的原因以及應該要如何改善，看完對自己以前一直模糊不清的感受有著更明確的方法以及信念，包括：</p><ul><li>“身份認同”的改變</li><li>明確的“講出來”會驅使你行動</li><li>建立習慣的四大步驟</li><li>移除習慣的四大反步驟</li></ul><p>都明明白白的列在了書上，而“你”需要做的事，就是拿起書中提到的方法以及重點，然後一步一步的實現，Just do it！相信就會改變！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/1_fxhtD2eXKMQ</summary>
      
    
    
    
    <category term="讀書心得" scheme="https://m124578n.github.io/categories/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="閱讀" scheme="https://m124578n.github.io/tags/%E9%96%B1%E8%AE%80/"/>
    
    <category term="原子習慣" scheme="https://m124578n.github.io/tags/%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/"/>
    
  </entry>
  
  <entry>
    <title>半年來個自我檢視（反省）～</title>
    <link href="https://m124578n.github.io/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/</id>
    <published>2023-07-02T12:00:00.000Z</published>
    <updated>2023-12-15T08:45:14.532Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/0_coDlzsKO8kICe-9e.webp"><br><em>image <a href="https://unsplash.com/photos/a-calendar-with-red-push-buttons-pinned-to-it-bwOAixLG0uc">source</a></em></p><p>昨天2023&#x2F;7&#x2F;1是我轉職成工程師的一週年紀念日，工作後才知道工程師不只是單單的會寫程式就好，還需要有溝通的能力、架構的規劃能力、以及自我學習的能力，更何況我現在還是一個程式都沒有寫得很好的程度。</p><p>剛開始工作的時候覺得公司給的任務好像也沒什麼困難的，就沒有多想的工作工作做了半年到2022年底，當時的我覺得過去半年好像沒什麼長進感受不到自己真的有成為工程師，而在2023年初加入<a href="https://www.youtube.com/@waterball-software-academy">水球軟體學院</a>認識了各式各樣的工程師才發覺自己離“工程師”這個角色的距離還有一大段，而我前半年學到的充其量只能當作一個“會寫程式的普通人”，也有聽到別人分享『<strong>達克效應</strong>』原來我正在站愚昧的山頂，視野範圍擴大後才發現會寫程式這件事的範圍作用只在自己的公司。</p><p><img src="/blog/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/1_80Jkmo-O2V6w98nQzYDGjw.webp"><br><em>image <a href="https://georgech3.medium.com/%E6%84%9A%E6%98%A7%E4%B9%8B%E5%B7%94-%E7%B5%95%E6%9C%9B%E4%B9%8B%E8%B0%B7-%E9%81%94%E5%85%8B%E6%95%88%E6%87%89-dk-effect-%E7%9A%84%E7%BE%8E%E9%BA%97%E9%8C%AF%E8%AA%A4-%E5%B0%8D%E7%84%A1%E7%9F%A5%E7%9A%84%E7%84%A1%E6%B3%95%E8%AA%8D%E7%9F%A5-a05b95ccb8a0">source</a></em></p><p>而當時我覺得把自己的時間全部投入水球軟體學院這一個地方，我想在這邊獲得的目標有：</p><ol><li>學會&#x2F;學習怎麼寫程式</li><li>了解除了程式還需要什麼</li><li>確認自己之前的知識是否正確</li><li>找到提升薪水的最短路徑</li><li>認識更多人累積人脈</li></ol><p>這應該是年初剛加進來一、兩個禮拜的目標，而相對應的解法依序為：</p><ol><li>報名<a href="https://waterballsa.tw/design-pattern">水球的軟體精通之旅</a></li><li>多看看學院裡的人都在聊什麼</li><li>參與大家的話題或活動</li><li>目前尚未找到（瓶頸中）</li><li>主動分享自己的故事&#x2F;想法，take之前要先give</li></ol><p>不得不說這半年的收穫確實是很豐富的，有時候我會試著回朔自己的記憶，如果回朔的時間特別久就代表我在那段時期是有在往前進的，反之則停留或倒退。</p><hr><p>到現在這個時間點，我整理整理自己感受的困擾&#x2F;壓抑&#x2F;force：</p><ol><li>我的惰性</li><li>時間管理</li><li>找不到我想要的工作</li><li>缺乏明確的道路</li></ol><p>目前想到相對應的解決法依序為：</p><ol><li>建立自我獎勵機制，讓自己不要想太多做就對了</li><li>多列一些短期目標，並結合獎勵機制創造回饋感</li><li>履歷邊投邊修，結合上面短期目標做一些自己想要的作品</li><li>總之先把 <a href="https://roadmap.sh/python">python&#x2F;backend roadmap</a><br>往上看自己就是一個不夠自律的人，且隨著工作覺得越來越無聊，要想辦法拉回當初寫程式的初衷，做出新奇有趣的東西，且無意間的幫助到一些人。</li></ol><p>所以，我要在這邊列下我下半年要達成的目標：</p><ol><li>找到一份自己喜歡的工作</li><li>水球的課程如期完成</li><li>做出一個拉麵地圖的網站</li><li>日文的複習以及英文的學習</li><li>文章輸出練習</li><li>言語&#x2F;文字轉換程式的速度及完整度</li></ol><p>大概以上，這篇文章最重要的一個目的就是在我迷惘之時，時時刻刻的提醒我要達成夢想就必須往前，哪怕不小心繞了個彎路也要把上面這些達成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%B</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="自我檢視" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="人生" scheme="https://m124578n.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="自我檢視" scheme="https://m124578n.github.io/tags/%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】Django和Flask的練習</title>
    <link href="https://m124578n.github.io/2023-06-14%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/"/>
    <id>https://m124578n.github.io/2023-06-14%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/</id>
    <published>2023-06-14T12:00:00.000Z</published>
    <updated>2023-12-15T08:44:52.823Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-06-14django_flask_practice/Django-vs-Flask-1.jpg"><br><em>image <a href="https://www.turing.com/blog/django-vs-flask-which-framework-to-choose/">django-vs-flask-which-framework-to-choose</a></em></p><p>最近在練習 <a href="https://www.djangoproject.com/">Django</a> 和 <a href="https://flask.palletsprojects.com/en/latest/">Flask</a> 的restful相關套件實作方法，來對比一下兩者使用的相關套件等。</p><h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>django要實作restful API有超集的套件是 <a href="https://www.django-rest-framework.org/">django rest framework</a> 跟著官方的tutorial下去實作能大概理解如何快速使用該框架，練習使用到的相關套件：</p><ul><li><a href="https://www.django-rest-framework.org/">django-rest-framework</a>：restful的框架包含serializer序列化器</li><li><a href="https://drf-spectacular.readthedocs.io/en/latest/">drf-spectacular</a>：swagger相關套件</li><li><a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/">django-rest-framework-simplejwt</a>：JWT套件</li></ul><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>flask則是要自己一個一個疊樂高、拼拼圖的那種感覺，各式各樣的flask-OOO套件互相搭配組合，我自己練習用的大概有：</p><ul><li><a href="https://flask-restful.readthedocs.io/en/latest/">flask-restful</a>：resuful的框架</li><li><a href="https://flask-sqlalchemy.palletsprojects.com/en/latest/">flask-sqlalchemy</a>：ORM</li><li><a href="https://flask-migrate.readthedocs.io/en/latest/">flask-migrate</a>：資料庫版控</li><li><a href="https://flask-marshmallow.readthedocs.io/en/latest/">flask-marshmallow</a>：序列化器</li></ul><h2 id="練習django"><a href="#練習django" class="headerlink" title="練習django"></a>練習django</h2><p>練習django的過程中會發現view的寫法會有以下幾種：</p><ul><li>GenericAPIView</li><li>APIView</li><li>ViewSets</li></ul><p>三者的差異目前還沒有太熟悉，還需要加強研究！<br>這篇文章寫得挺詳細的<br><a href="https://zhuanlan.zhihu.com/p/72527077">https://zhuanlan.zhihu.com/p/72527077</a></p><h3 id="django-rest-framework"><a href="#django-rest-framework" class="headerlink" title="django rest framework"></a>django rest framework</h3><p>而且django rest framework由於都已經幫你把很多地方都封裝起來，要進行客製化會需要花一點時間去看source code，相對來說如果只是一般的CRUD使用ViewSets能節省不少寫code的時間！！</p><hr><h2 id="練習flask"><a href="#練習flask" class="headerlink" title="練習flask"></a>練習flask</h2><p>flask倒是看著官方文件和一些實作範例就能很順利開啟一個專案，只不過過程中會有一點問題，在尚未使用flask-migrate時，資料表model.py在create table的時候網路上的範例會教使用python shell去import model的db在執行db.create_all()這邊會報錯現在寫法會要求要使用with app.app.context()才有辦法去執行，這邊還待研究，不過照著官方的文件做就絕對沒問題的！</p><hr><h2 id="做個總結"><a href="#做個總結" class="headerlink" title="做個總結"></a>做個總結</h2><p>目前還需要更深入了解的：</p><ol><li>django 三種view的差異性以及客製化要如何改寫(override function)</li><li>django rest framework中的serializer的實作原理以及如何客製化</li><li>flask 中的專案資料夾層級要怎麼規劃及設計</li><li>flask 尚未完成簡單的CRUD範例</li><li>flask 中app.context是什麼，目前看到很多翻譯寫『應用上下文』？</li></ol><p>在現職中沒有機會碰到這些框架及套件的我，只能下班加緊腳步學習了，增加自己的競爭力，希望下份專案或工作中能活用自己所學的一切！！</p><hr><h1 id="每天進步1-，一年竟能成長37倍！"><a href="#每天進步1-，一年竟能成長37倍！" class="headerlink" title="每天進步1%，一年竟能成長37倍！"></a><a href="https://www.storm.mg/lifestyle/3360705?page=1">每天進步1%，一年竟能成長37倍！</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-06-14django_flask_practice/Django-vs-Flask-1.jpg&quot;&gt;&lt;br&gt;&lt;em&gt;image &lt;a href=&quot;https://www.turing.com/blog/django-v</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="flask" scheme="https://m124578n.github.io/tags/flask/"/>
    
  </entry>
  
</feed>
