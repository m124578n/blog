<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shun Chih&#39;s blog</title>
  
  
  <link href="https://m124578n.github.io/atom.xml" rel="self"/>
  
  <link href="https://m124578n.github.io/"/>
  <updated>2024-02-21T03:31:47.615Z</updated>
  <id>https://m124578n.github.io/</id>
  
  <author>
    <name>Shun Chih</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django顯示所有T-SQL的方法</title>
    <link href="https://m124578n.github.io/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://m124578n.github.io/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2024-02-21T03:30:00.000Z</published>
    <updated>2024-02-21T03:31:47.615Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/0_bc8v9wzbg2U72OHV.webp"></p><p>寫django的人應該或多或少都會使用ORM，而當ORM用太多怕忘記怎麼寫SQL或是想要優化無從下手，就該讓ORM幫我們組成的SQL現形啦！</p><p>可以使用以下方式</p><ul><li>logging</li><li>django-debug-toolbar</li><li>connection</li></ul><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>先準備一個model Person</p><pre><code class="hljs py"><span class="hljs-comment"># models.py</span><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(models.Model):    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sex</span>(models.IntegerChoices):        MALE = <span class="hljs-number">0</span>        FEMALE = <span class="hljs-number">1</span>        OTHERS = <span class="hljs-number">2</span>    name = models.CharField(max_length=<span class="hljs-number">255</span>)    sex = models.IntegerField(choices=Sex.choices)    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        db_table = <span class="hljs-string">&quot;person&quot;</span></code></pre><p>然後註冊進admin page</p><pre><code class="hljs py"><span class="hljs-comment"># admin.py</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person<span class="hljs-comment"># Register your models here.</span>admin.site.register(Person)</code></pre><p>之後下</p><ul><li><p><code>python manage.py makemigrations</code></p></li><li><p><code>python manage.py migrate</code></p></li><li><p><code>python manage.py createsuperuser</code></p></li><li><p><code>python manage.py runserver</code></p></li></ul><p>到 http:127.0.0.1:8000&#x2F;admin，輸入剛剛createsuperuser輸入的帳號密碼就可以看到下圖<br><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/1_7m4MwVZGEJXhDpZzokVwHg.webp"></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>顯示SQL的時刻到了，只需要在settings.py中新增這些</p><pre><code class="hljs py">LOGGING = &#123;    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,    <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;        <span class="hljs-string">&#x27;simple&#x27;</span>: &#123;            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[&#123;levelname&#125;] [&#123;asctime&#125;] &#123;message&#125;&#x27;</span>,            <span class="hljs-string">&#x27;style&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>        &#125;,    &#125;,    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;        <span class="hljs-string">&#x27;console&#x27;</span>:&#123;            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,            <span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;simple&#x27;</span>,        &#125;,    &#125;,    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;        <span class="hljs-string">&#x27;django.db.backends&#x27;</span>: &#123;            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>],            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,        &#125;,    &#125;&#125;</code></pre><ul><li>formatters 是在format顯現的格式</li><li>handlers 是指定處理器</li><li>loggers 是選擇要記錄log的範圍</li></ul><p>接著到admin page新增user，就能在很亂的console中獲得剛剛新增的SQL<br><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/1_x0cgOa5kNVSDwB446tNuDw.webp"></p><h2 id="django-debug-toolbar"><a href="#django-debug-toolbar" class="headerlink" title="django-debug-toolbar"></a>django-debug-toolbar</h2><p>接著是更方便查閱的套件 debug-toolbar</p><p><code>pip install django-debug-toolbar</code></p><p>安裝完後在settings.py中插入這些</p><pre><code class="hljs py">INSTALLED_APPS = [    <span class="hljs-comment"># ....</span>    <span class="hljs-string">&#x27;debug_toolbar&#x27;</span>,]<span class="hljs-keyword">if</span> DEBUG:    MIDDLEWARE.insert(<span class="hljs-number">0</span>,  <span class="hljs-string">&#x27;debug_toolbar.middleware.DebugToolbarMiddleware&#x27;</span>)INTERNAL_IPS = [    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,]</code></pre><p>並且在urls.py中加入</p><pre><code class="hljs py"><span class="hljs-keyword">if</span> DEBUG:    <span class="hljs-keyword">import</span> debug_toolbar    urlpatterns += [path(<span class="hljs-string">&#x27;__debug__/&#x27;</span>, include(debug_toolbar.urls))]</code></pre><p>回到admin page就能看到toolbar囉<br><img src="/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/1_PfznRk7i7ZV42l9Pq76bOw.webp"></p><p>而debug toolbar當今天views是回傳JsonResponse的話不會觸發，畢竟他會需要render出toolbar頁面</p><h2 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h2><p>直接在目標view插入connection</p><pre><code class="hljs py"><span class="hljs-comment"># views.py</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">request</span>):    context = &#123;&#125;    persons = Person.objects.<span class="hljs-built_in">all</span>()    context[<span class="hljs-string">&#x27;persons&#x27;</span>] = <span class="hljs-built_in">list</span>(persons.values())    <span class="hljs-built_in">print</span>(connection.queries)    <span class="hljs-built_in">print</span>(persons.query)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>, context)</code></pre><ul><li><p>connection.queries 會顯示執行過的SQL語句</p></li><li><p>persons.query 則是顯示當前ORM的SQL（僅限select）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2024-02-21Django%E9%A1%AF%E7%A4%BA%E6%89%80%E6%9C%89T-SQL%E7%9A%84%E6%96%B9%E6%B3%95/0_bc8v9wzbg2U72OHV.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;寫</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="django orm" scheme="https://m124578n.github.io/tags/django-orm/"/>
    
  </entry>
  
  <entry>
    <title>DRF練習-客製化User</title>
    <link href="https://m124578n.github.io/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/"/>
    <id>https://m124578n.github.io/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/</id>
    <published>2024-02-20T02:30:00.000Z</published>
    <updated>2024-02-20T03:10:19.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/0_WJlWpRWfueF3fiXG.webp"></p><p>上次我們的model已經繼承了AbstractUser，那麼接下來就是要爭對我們客製化的model進行細部的調整了～</p><p>先打個預防針，我接下來的code並不那麼restful，目前是當練習可能能有更好的寫法，我發現了在來修改吧！</p><p>我們的model基本上就固定那樣子了，會更動的是serializers和views，因為我們會需要客製化新建會員和修改會員密碼這兩項，所以呢serializers需要三個</p><ul><li>AccountSerializer 檢視用的</li><li>AccountCreateSerializer 新建用的</li><li>ChangePasswordSerializer 改密碼用的</li></ul><h2 id="AccountSerializer"><a href="#AccountSerializer" class="headerlink" title="AccountSerializer"></a>AccountSerializer</h2><p>基本上跟上次一樣沒變</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountSerializer</span>(serializers.HyperlinkedModelSerializer):    sex = serializers.SerializerMethodField()    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Account        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;is_staff&quot;</span>]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sex</span>(<span class="hljs-params">self, obj</span>):        <span class="hljs-keyword">return</span> obj.get_sex_display()</code></pre><h2 id="AccountCreateSerializer"><a href="#AccountCreateSerializer" class="headerlink" title="AccountCreateSerializer"></a>AccountCreateSerializer</h2><p>會需要去修改create這個function</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountCreateSerializer</span>(serializers.HyperlinkedModelSerializer):    password = serializers.CharField(write_only=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, validated_data</span>):        user = Account.objects.create_user(                username=validated_data[<span class="hljs-string">&#x27;username&#x27;</span>],                password=validated_data[<span class="hljs-string">&#x27;password&#x27;</span>],                sex=validated_data[<span class="hljs-string">&#x27;sex&#x27;</span>],                email=validated_data[<span class="hljs-string">&#x27;email&#x27;</span>],                phone=validated_data[<span class="hljs-string">&#x27;phone&#x27;</span>],                address=validated_data[<span class="hljs-string">&#x27;address&#x27;</span>],                is_superuser=validated_data[<span class="hljs-string">&#x27;is_superuser&#x27;</span>],                is_staff=validated_data[<span class="hljs-string">&#x27;is_staff&#x27;</span>],            )        <span class="hljs-keyword">return</span> user    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Account        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;is_staff&quot;</span>]</code></pre><p>複寫的create原本是在ModelSerializer中的function，原始的create會根據Meta中的model去處理</p><h2 id="ChangePasswordSerializer"><a href="#ChangePasswordSerializer" class="headerlink" title="ChangePasswordSerializer"></a>ChangePasswordSerializer</h2><p>這邊就是定義修改密碼需要的欄位和驗證</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangePasswordSerializer</span>(serializers.Serializer):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Serializer for password change endpoint.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    old_password = serializers.CharField(max_length=<span class="hljs-number">128</span>, write_only=<span class="hljs-literal">True</span>, required=<span class="hljs-literal">True</span>)    new_password1 = serializers.CharField(max_length=<span class="hljs-number">128</span>, write_only=<span class="hljs-literal">True</span>, required=<span class="hljs-literal">True</span>)    new_password2 = serializers.CharField(max_length=<span class="hljs-number">128</span>, write_only=<span class="hljs-literal">True</span>, required=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_old_password</span>(<span class="hljs-params">self, value</span>):        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        rest_framework serializers.py 480line explain that how validate_method works</span><span class="hljs-string">        &quot;&quot;&quot;</span>        user = self.context[<span class="hljs-string">&#x27;request&#x27;</span>].user        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user.check_password(value):            <span class="hljs-keyword">raise</span> serializers.ValidationError(                _(<span class="hljs-string">&#x27;Your old password was entered incorrectly. Please enter it again.&#x27;</span>)            )        <span class="hljs-keyword">return</span> value    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, data</span>):        <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;new_password1&#x27;</span>] != data[<span class="hljs-string">&#x27;new_password2&#x27;</span>]:            <span class="hljs-keyword">raise</span> serializers.ValidationError(&#123;<span class="hljs-string">&#x27;new_password2&#x27;</span>: _(<span class="hljs-string">&quot;The two password fields didn&#x27;t match.&quot;</span>)&#125;)        <span class="hljs-comment"># password_validation.validate_password(data[&#x27;new_password1&#x27;], self.context[&#x27;request&#x27;].user)</span>        <span class="hljs-keyword">return</span> data    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">self, **kwargs</span>):        password = self.validated_data[<span class="hljs-string">&#x27;new_password1&#x27;</span>]        user = self.context[<span class="hljs-string">&#x27;request&#x27;</span>].user        user.set_password(password)        user.save()        <span class="hljs-keyword">return</span> user</code></pre><p>這邊DRF的validate我覺得挺新奇的可以根據function name自行去驗證該欄位的寫法，像是上面的validate_old_password和validate就會在save之前被呼叫到，雖然很方便但需要花一點時間去理解他是怎麼實作的，不然都不知道自己用了什麼感覺不優</p><p>有了這三個serializer後就能寫view囉</p><h2 id="AccountView"><a href="#AccountView" class="headerlink" title="AccountView"></a>AccountView</h2><p>首先我們先把原本的AccountView中的create擋住</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountsView</span>(viewsets.ModelViewSet):    queryset = Account.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;id&quot;</span>)    serializer_class = AccountSerializer    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, request</span>):        <span class="hljs-keyword">return</span> Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)</code></pre><h2 id="CreateAccountView"><a href="#CreateAccountView" class="headerlink" title="CreateAccountView"></a>CreateAccountView</h2><p>我們在這邊自定一個新建會員的view</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateAccountView</span>(<span class="hljs-title class_ inherited__">CreateAPIView</span>):    model = Account    serializer_class = AccountCreateSerializer</code></pre><p>而這邊的CreateAPIView是因為我只需要post這個method</p><h2 id="ChangePasswordView"><a href="#ChangePasswordView" class="headerlink" title="ChangePasswordView"></a>ChangePasswordView</h2><p>修改密碼的部分</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangePasswordView</span>(<span class="hljs-title class_ inherited__">UpdateAPIView</span>):    serializer_class = ChangePasswordSerializer    permission_classes = (permissions.IsAuthenticated,)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):        serializer = self.get_serializer(data=request.data)        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)        user = serializer.save()        <span class="hljs-comment"># if using drf authtoken, create a new token </span>        <span class="hljs-comment"># if hasattr(user, &#x27;auth_token&#x27;):</span>        <span class="hljs-comment">#     user.auth_token.delete()</span>        <span class="hljs-comment"># token, created = Token.objects.get_or_create(user=user)</span>        <span class="hljs-comment"># return new token</span>        <span class="hljs-comment"># TODO remove token or create new token with JWT</span>        logout(request)        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;change password successful&#x27;</span>&#125;, status=status.HTTP_200_OK)</code></pre><p>因為目前token還沒接上所以改完密碼登出先用簡單的django提供的logout funtion，就像前面一樣我們這邊只會修改的步驟所以只需要put 和 patch的method</p><p>最後就是urls</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> account <span class="hljs-keyword">import</span> views<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routersrouter = routers.DefaultRouter()router.register(<span class="hljs-string">r&#x27;&#x27;</span>, views.AccountsView)urlpatterns = [    path(<span class="hljs-string">&#x27;register/&#x27;</span>, views.CreateAccountView.as_view()),    path(<span class="hljs-string">&#x27;logout/&#x27;</span>, views.LogoutView.as_view()),    path(<span class="hljs-string">&#x27;update_password/&#x27;</span>, views.ChangePasswordView.as_view()),]urlpatterns += router.urls</code></pre><p>這樣就大功告成啦！！</p><p>不過改密碼那邊必須要先登入才能修改（這不是廢話嗎XD<br>所以我們再加上permission</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangePasswordView</span>(<span class="hljs-title class_ inherited__">UpdateAPIView</span>):    serializer_class = ChangePasswordSerializer    permission_classes = (permissions.IsAuthenticated,) <span class="hljs-comment"># 這個</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):        serializer = self.get_serializer(data=request.data)        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)        user = serializer.save()        <span class="hljs-comment"># if using drf authtoken, create a new token </span>        <span class="hljs-comment"># if hasattr(user, &#x27;auth_token&#x27;):</span>        <span class="hljs-comment">#     user.auth_token.delete()</span>        <span class="hljs-comment"># token, created = Token.objects.get_or_create(user=user)</span>        <span class="hljs-comment"># return new token</span>        <span class="hljs-comment"># TODO remove token or create new token with JWT</span>        logout(request)        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;change password successful&#x27;</span>&#125;, status=status.HTTP_200_OK)</code></pre><p>這樣就完成了客製化的新建會員和修改密碼了～</p><p>最後如果有什麼更好的做法寫法請告訴我，我想知道各式各樣的做法和寫法！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2024-02-20DRF%E7%B7%B4%E7%BF%92-%E5%AE%A2%E8%A3%BD%E5%8C%96User/0_WJlWpRWfueF3fiXG.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;上次我們的model已經繼承了Abstrac</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="learning" scheme="https://m124578n.github.io/tags/learning/"/>
    
    <category term="django restframework" scheme="https://m124578n.github.io/tags/django-restframework/"/>
    
  </entry>
  
  <entry>
    <title>DRF練習購物車紀錄-客製化django的User</title>
    <link href="https://m124578n.github.io/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/"/>
    <id>https://m124578n.github.io/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/</id>
    <published>2024-01-31T12:30:00.000Z</published>
    <updated>2024-02-20T02:51:16.628Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/0_p7cVVFOd6CpUowfp.webp"></p><h1 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h1><p>使用DRF django rest framework來寫一個簡單的購物車api，前端的部分就斟酌斟酌的寫了～主要著重在DRF這個超集，一直沒有好好的用他來寫一個東東出來，新的一年就來試著寫寫吧！</p><p>首先當然是建立環境，虛擬環境很多種大家就挑自己喜歡的建吧～<br>然後pip的部分如下</p><pre><code class="hljs py">asgiref==<span class="hljs-number">3.7</span><span class="hljs-number">.2</span>Django==<span class="hljs-number">5.0</span><span class="hljs-number">.1</span>django-<span class="hljs-built_in">filter</span>==<span class="hljs-number">23.5</span>djangorestframework==<span class="hljs-number">3.14</span><span class="hljs-number">.0</span>djangorestframework-simplejwt==<span class="hljs-number">5.3</span><span class="hljs-number">.1</span>Markdown==<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>PyJWT==<span class="hljs-number">2.8</span><span class="hljs-number">.0</span>pytz==<span class="hljs-number">2023.3</span>.post1setuptools==<span class="hljs-number">68.2</span><span class="hljs-number">.2</span>sqlparse==<span class="hljs-number">0.4</span><span class="hljs-number">.4</span>tzdata==<span class="hljs-number">2023.4</span>wheel==<span class="hljs-number">0.41</span><span class="hljs-number">.2</span></code></pre><p>python的版本則是用3.12.0</p><h1 id="資料夾"><a href="#資料夾" class="headerlink" title="資料夾"></a>資料夾</h1><p>目前規劃如下，有account, cart, order, shop, product</p><p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/1_aXOeWMJ8Ev1WeSSMXqkXzw.webp"></p><h1 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h1><p>首當其衝的就是登入了，目前考慮使用simplejwt和內建的api-auth兩個並行，api-auth是測試的時候比較方便，之後還要考慮轉換成simplejwt後一些request驗證怎麼執行～</p><pre><code class="hljs py"><span class="hljs-comment"># settings.py</span>INSTALLED_APPS = [    <span class="hljs-comment"># ...</span>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,    <span class="hljs-string">&#x27;rest_framework_simplejwt&#x27;</span>,    <span class="hljs-comment"># ...</span>]REST_FRAMEWORK = &#123;    <span class="hljs-comment"># ...</span>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,        <span class="hljs-string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,    ],    <span class="hljs-comment"># ...</span>&#125;</code></pre><pre><code class="hljs py"><span class="hljs-comment"># project下的urls.py</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<span class="hljs-keyword">from</span> rest_framework_simplejwt.views <span class="hljs-keyword">import</span> (    TokenObtainPairView,    TokenRefreshView,    TokenVerifyView,)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>)),    path(<span class="hljs-string">&#x27;api/token/&#x27;</span>, TokenObtainPairView.as_view(), name=<span class="hljs-string">&#x27;token_obtain_pair&#x27;</span>),    path(<span class="hljs-string">&#x27;api/token/refresh/&#x27;</span>, TokenRefreshView.as_view(), name=<span class="hljs-string">&#x27;token_refresh&#x27;</span>),    path(<span class="hljs-string">&#x27;api/token/verify/&#x27;</span>, TokenVerifyView.as_view(), name=<span class="hljs-string">&#x27;token_verify&#x27;</span>),]</code></pre><p>之後跑</p><ul><li><code>python manage.py migrate</code></li><li><code>python manage.py runserver</code></li></ul><p>接著去 <a href="http://127.0.0.1:8000/api/token">http://127.0.0.1:8000/api/token</a></p><p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/1_ZK2T4KEA1e9pIgp0k91FZQ.webp"></p><p>帳號密碼呢，我們先用 <code>python manage.py createsuperuser</code>建立一個admin帳號來測試會拿到什麼token～建立好輸入帳號密碼應該會像下面這樣拿到token～</p><pre><code class="hljs py">HTTP <span class="hljs-number">200</span> OKAllow: POST, OPTIONSContent-<span class="hljs-type">Type</span>: application/jsonVary: Accept&#123;    <span class="hljs-string">&quot;refresh&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcwOTczNTE0MywiaWF0IjoxNzA1NDE1MTQzLCJqdGkiOiJkMWI0MzRkZjc5YTM0MjE1OWFlOGY3ODViOWZiZWFiNiIsInVzZXJfaWQiOjF9.eCAuJ9LMUUbAYDmtB9h9VBbjCthz-SucJlcTTNztJk4&quot;</span>,    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzA1NDI1OTQzLCJpYXQiOjE3MDU0MTUxNDMsImp0aSI6ImY3MjViYmU4ZWVjZTQ5ZWJiYjk4MzZiMDk5NmM5MTVkIiwidXNlcl9pZCI6MX0.tAlpCVanj942qMjgBdxcTwqpLmdFCmPsSOJqkgw2XmY&quot;</span>&#125;</code></pre><p>這邊只是測試能否運行，實際要使用到JWT應該滿後期了～</p><h1 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h1><p>一開始就從Account開始著手吧！首先要起一個account的app</p><ul><li><code>python manage.py startapp account</code></li></ul><p>DRF會有三個不同負責的區域</p><ul><li>models</li><li>serializers</li><li>views</li></ul><h2 id="models"><a href="#models" class="headerlink" title="models"></a>models</h2><p>我們會需要動用到django內建的User，所以我們的model會去繼承</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">AbstractUser</span>):        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sex</span>(models.IntegerChoices):        FEMALE = <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Female&quot;</span>        MALE = <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Male&quot;</span>        OTHER = <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Other&quot;</span>        sex = models.PositiveSmallIntegerField(        verbose_name=<span class="hljs-string">&quot;sex&quot;</span>,        choices=Sex,        default=Sex.OTHER        )        phone = models.CharField(        verbose_name=<span class="hljs-string">&quot;phone&quot;</span>,         max_length=<span class="hljs-number">10</span>        )        email = models.EmailField(        verbose_name=<span class="hljs-string">&quot;email&quot;</span>,         max_length=<span class="hljs-number">254</span>        )        address = models.CharField(        verbose_name=<span class="hljs-string">&quot;address&quot;</span>,         max_length=<span class="hljs-number">100</span>        )        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.username</code></pre><p>這邊除了AbstractUser自帶的欄位外我自己新增了幾項～</p><h2 id="serializers"><a href="#serializers" class="headerlink" title="serializers"></a>serializers</h2><p>models是主要跟資料庫連結的class，而serializers則是把models跟view接在一起的通道</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountSerializer</span>(serializers.HyperlinkedModelSerializer):    sex = serializers.SerializerMethodField()    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Account        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;is_staff&quot;</span>]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sex</span>(<span class="hljs-params">self, obj</span>):        <span class="hljs-keyword">return</span> obj.get_sex_display()</code></pre><p>sex 性別額外拉出來是因為我想要它顯示的時候是顯示 male, female, other這樣，而不是0, 1, 2，至於這邊是怎麼對接上的有時間再來好好研究研究～</p><h2 id="views"><a href="#views" class="headerlink" title="views"></a>views</h2><p>views當然就是要準備回傳值的地方囉～</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<span class="hljs-keyword">from</span> account.models <span class="hljs-keyword">import</span> Account<span class="hljs-keyword">from</span> account.serializers <span class="hljs-keyword">import</span> AccountSerializer<span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountsView</span>(viewsets.ModelViewSet):    queryset = Account.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;id&quot;</span>)    serializer_class = AccountSerializer</code></pre><h2 id="urls"><a href="#urls" class="headerlink" title="urls"></a>urls</h2><p>最後把我們寫好的view註冊到urls裡面</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> account <span class="hljs-keyword">import</span> views<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routersrouter = routers.DefaultRouter()router.register(<span class="hljs-string">r&#x27;&#x27;</span>, views.AccountsView)urlpatterns = [     <span class="hljs-comment"># ...</span>]urlpatterns += router.urls</code></pre><p>最後在</p><ul><li><code>python manage.py makemigrations</code></li><li><code>python manage.py migrate</code></li><li><code>python manage.py runserver</code></li></ul><p>就可以看到DRF預設可以操作api的頁面囉～</p><p><img src="/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84User/1_SogjtcatoJEyNwDA6VANyA.webp"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2024-01-31DRF%E7%B7%B4%E7%BF%92%E8%B3%BC%E7%89%A9%E8%BB%8A%E7%B4%80%E9%8C%84-%E5%AE%A2%E8%A3%BD%E5%8C%96django%E7%9A%84</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="learning" scheme="https://m124578n.github.io/tags/learning/"/>
    
    <category term="django restframework" scheme="https://m124578n.github.io/tags/django-restframework/"/>
    
  </entry>
  
  <entry>
    <title>Python Uvicorn Asyncio探索</title>
    <link href="https://m124578n.github.io/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/"/>
    <id>https://m124578n.github.io/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/</id>
    <published>2024-01-09T13:00:00.000Z</published>
    <updated>2024-02-21T03:32:05.976Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/0_INO7Jg0oBMnOleAX.webp"></p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在純函式咖啡每周三的podcast中講到的web framework benchmarks有著很多web framework的排行榜，那就好奇我大Python哪一個web framework是榜首呢～於是乎ctrl + F 搜尋下去就看到 uvicorn 228名，而我常用的django則是462名，那我就好奇uvicorn究竟是怎麼當python中的榜首的呢？就稍為的去了解了一下～</p><h1 id="Uvicorn"><a href="#Uvicorn" class="headerlink" title="Uvicorn"></a>Uvicorn</h1><p><a href="https://www.uvicorn.org/">Uvicorn  The lightning-fast ASGI server.</a></p><p>他是一個ASGI的web server，異步編程的server，所以嚴格說起來他並不是web framework，而且很容易迷路，且看到ASGI就會想到常用的WSGI，這兩者的差異就之後再說吧～</p><p>而要了解uvicorn呢需要知道的項目有</p><ul><li>asyncio</li><li>H11Protocol</li></ul><p>預設uvicorn main:app 是使用到H11Protocol，也支援</p><ul><li>HttpTools</li><li>WS</li><li>WebSocket</li></ul><p>而實際要起一個hello world的網站只需要簡單的</p><pre><code class="hljs py"><span class="hljs-comment"># main.py</span><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">app</span>(<span class="hljs-params">scope, receive, send</span>):    <span class="hljs-keyword">assert</span> scope[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;http&#x27;</span>    <span class="hljs-keyword">await</span> send(&#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;http.response.start&#x27;</span>,        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">200</span>,        <span class="hljs-string">&#x27;headers&#x27;</span>: [            [<span class="hljs-string">b&#x27;content-type&#x27;</span>, <span class="hljs-string">b&#x27;text/plain&#x27;</span>],        ],    &#125;)    <span class="hljs-keyword">await</span> send(&#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;http.response.body&#x27;</span>,        <span class="hljs-string">&#x27;body&#x27;</span>: <span class="hljs-string">b&#x27;Hello, world!&#x27;</span>,    &#125;)</code></pre><p>之後執行 uvicorn main:app 就可以起一個網站了</p><p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/1_6M705790uavMCE1bGNQwcg.webp"></p><p>在看看uvicorn之前我們先了解一下asyncio要起server怎麼做！</p><h1 id="Asyncio"><a href="#Asyncio" class="headerlink" title="Asyncio"></a>Asyncio</h1><p><a href="https://docs.python.org/3/library/asyncio-stream.html">Streams</a></p><p>跟著官方文件的範例來看看～可以稍微理解asyncio的server是怎麼運行的！</p><pre><code class="hljs py"><span class="hljs-comment"># server.py</span><span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoServerProtocol</span>(asyncio.Protocol):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connection_made</span>(<span class="hljs-params">self, transport</span>):        peername = transport.get_extra_info(<span class="hljs-string">&#x27;peername&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Connection from &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(peername))        self.transport = transport    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data_received</span>(<span class="hljs-params">self, data</span>):        message = data.decode()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data received: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(message))        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Send: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(message))        self.transport.write(data)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Close the client socket&#x27;</span>)        self.transport.close()<span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-comment"># Get a reference to the event loop as we plan to use</span>    <span class="hljs-comment"># low-level APIs.</span>    loop = asyncio.get_running_loop()    server = <span class="hljs-keyword">await</span> loop.create_server(        <span class="hljs-keyword">lambda</span>: EchoServerProtocol(),        <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> server:        <span class="hljs-keyword">await</span> server.serve_forever()asyncio.run(main())</code></pre><pre><code class="hljs py"><span class="hljs-comment"># client.py</span><span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoClientProtocol</span>(asyncio.Protocol):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, message, on_con_lost</span>):        self.message = message        self.on_con_lost = on_con_lost    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connection_made</span>(<span class="hljs-params">self, transport</span>):        transport.write(self.message.encode())        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data sent: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.message))    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data_received</span>(<span class="hljs-params">self, data</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data received: &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.decode()))    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connection_lost</span>(<span class="hljs-params">self, exc</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The server closed the connection&#x27;</span>)        self.on_con_lost.set_result(<span class="hljs-literal">True</span>)<span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-comment"># Get a reference to the event loop as we plan to use</span>    <span class="hljs-comment"># low-level APIs.</span>    loop = asyncio.get_running_loop()    on_con_lost = loop.create_future()    message = <span class="hljs-string">&#x27;Hello World!&#x27;</span>    transport, protocol = <span class="hljs-keyword">await</span> loop.create_connection(        <span class="hljs-keyword">lambda</span>: EchoClientProtocol(message, on_con_lost),        <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)    <span class="hljs-comment"># Wait until the protocol signals that the connection</span>    <span class="hljs-comment"># is lost and close the transport.</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">await</span> on_con_lost    <span class="hljs-keyword">finally</span>:        transport.close()asyncio.run(main())</code></pre><p>分別在不同的terminal執行程式 python XXX.py就能看到他們之間的互動</p><p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/1_p33U5AmXiDjEH2Krkiq6WA.webp"></p><p><img src="/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/1_sGPdz9OxyA0oS119NgfeHA.webp"></p><p>我們可以看到server和client都是跑在loop上面的，而這個EventLoop會是整個asyncio server中很重要的一個部分！</p><p>loop分為 windows_events 和 unix_events，我是在windows上測試的所以所有物件都會由windows_events那邊生成～可以在asyncio _<em>init</em>_.py中看到</p><pre><code class="hljs py"><span class="hljs-comment"># asyncio.__init__.py</span><span class="hljs-keyword">if</span> sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>:  <span class="hljs-comment"># pragma: no cover</span>    <span class="hljs-keyword">from</span> .windows_events <span class="hljs-keyword">import</span> *    __all__ += windows_events.__all__<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">from</span> .unix_events <span class="hljs-keyword">import</span> *  <span class="hljs-comment"># pragma: no cover</span>    __all__ += unix_events.__all__</code></pre><p>而我們剛剛照著官網範例實作的loop會是ProactorEventLoop，可以在windows_events.py中找到該class，那就先來看看 <code>create_server()</code>的過程吧！</p><h2 id="create-server"><a href="#create-server" class="headerlink" title="create_server()"></a>create_server()</h2><p>先找到ProactorEventLoop發現沒有create_server在往繼承上去找BaseProactorEventLoop，也發現沒有在往繼承上去找BaseEventLoop，找到create_server了</p><pre><code class="hljs py"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_server</span>(<span class="hljs-params"></span><span class="hljs-params">        self, protocol_factory, host=<span class="hljs-literal">None</span>, port=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        *,</span><span class="hljs-params">        family=socket.AF_UNSPEC,</span><span class="hljs-params">        flags=socket.AI_PASSIVE,</span><span class="hljs-params">        sock=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        backlog=<span class="hljs-number">100</span>,</span><span class="hljs-params">        ssl=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        reuse_address=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        reuse_port=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        ssl_handshake_timeout=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        ssl_shutdown_timeout=<span class="hljs-literal">None</span>,</span><span class="hljs-params">        start_serving=<span class="hljs-literal">True</span></span>):    <span class="hljs-string">&quot;&quot;&quot;Create a TCP server.</span><span class="hljs-string"></span><span class="hljs-string">    The host parameter can be a string, in that case the TCP server is</span><span class="hljs-string">    bound to host and port.</span><span class="hljs-string"></span><span class="hljs-string">    The host parameter can also be a sequence of strings and in that case</span><span class="hljs-string">    the TCP server is bound to all hosts of the sequence. If a host</span><span class="hljs-string">    appears multiple times (possibly indirectly e.g. when hostnames</span><span class="hljs-string">    resolve to the same IP address), the server is only bound once to that</span><span class="hljs-string">    host.</span><span class="hljs-string"></span><span class="hljs-string">    Return a Server object which can be used to stop the service.</span><span class="hljs-string"></span><span class="hljs-string">    This method is a coroutine.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(ssl, <span class="hljs-built_in">bool</span>):        <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;ssl argument must be an SSLContext or None&#x27;</span>)    <span class="hljs-keyword">if</span> ssl_handshake_timeout <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> ssl <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> ValueError(            <span class="hljs-string">&#x27;ssl_handshake_timeout is only meaningful with ssl&#x27;</span>)    <span class="hljs-keyword">if</span> ssl_shutdown_timeout <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> ssl <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> ValueError(            <span class="hljs-string">&#x27;ssl_shutdown_timeout is only meaningful with ssl&#x27;</span>)    <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        _check_ssl_socket(sock)    <span class="hljs-keyword">if</span> host <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> port <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">raise</span> ValueError(                <span class="hljs-string">&#x27;host/port and sock can not be specified at the same time&#x27;</span>)        <span class="hljs-keyword">if</span> reuse_address <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            reuse_address = os.name == <span class="hljs-string">&quot;posix&quot;</span> <span class="hljs-keyword">and</span> sys.platform != <span class="hljs-string">&quot;cygwin&quot;</span>        sockets = []        <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;&#x27;</span>:            hosts = [<span class="hljs-literal">None</span>]        <span class="hljs-keyword">elif</span> (<span class="hljs-built_in">isinstance</span>(host, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">or</span>              <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(host, collections.abc.Iterable)):            hosts = [host]        <span class="hljs-keyword">else</span>:            hosts = host        fs = [self._create_server_getaddrinfo(host, port, family=family,                                              flags=flags)              <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> hosts]        infos = <span class="hljs-keyword">await</span> tasks.gather(*fs)        infos = <span class="hljs-built_in">set</span>(itertools.chain.from_iterable(infos))        completed = <span class="hljs-literal">False</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> infos:                af, socktype, proto, canonname, sa = res                <span class="hljs-keyword">try</span>:                    sock = socket.socket(af, socktype, proto)                <span class="hljs-keyword">except</span> socket.error:                    <span class="hljs-comment"># Assume it&#x27;s a bad family/type/protocol combination.</span>                    <span class="hljs-keyword">if</span> self._debug:                        logger.warning(<span class="hljs-string">&#x27;create_server() failed to create &#x27;</span>                                       <span class="hljs-string">&#x27;socket.socket(%r, %r, %r)&#x27;</span>,                                       af, socktype, proto, exc_info=<span class="hljs-literal">True</span>)                    <span class="hljs-keyword">continue</span>                sockets.append(sock)                <span class="hljs-keyword">if</span> reuse_address:                    sock.setsockopt(                        socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-literal">True</span>)                <span class="hljs-keyword">if</span> reuse_port:                    _set_reuseport(sock)                <span class="hljs-comment"># Disable IPv4/IPv6 dual stack support (enabled by</span>                <span class="hljs-comment"># default on Linux) which makes a single socket</span>                <span class="hljs-comment"># listen on both address families.</span>                <span class="hljs-keyword">if</span> (_HAS_IPv6 <span class="hljs-keyword">and</span>                        af == socket.AF_INET6 <span class="hljs-keyword">and</span>                        <span class="hljs-built_in">hasattr</span>(socket, <span class="hljs-string">&#x27;IPPROTO_IPV6&#x27;</span>)):                    sock.setsockopt(socket.IPPROTO_IPV6,                                    socket.IPV6_V6ONLY,                                    <span class="hljs-literal">True</span>)                <span class="hljs-keyword">try</span>:                    sock.bind(sa)                <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> err:                    <span class="hljs-keyword">raise</span> OSError(err.errno, <span class="hljs-string">&#x27;error while attempting &#x27;</span>                                  <span class="hljs-string">&#x27;to bind on address %r: %s&#x27;</span>                                  % (sa, err.strerror.lower())) <span class="hljs-keyword">from</span> <span class="hljs-literal">None</span>            completed = <span class="hljs-literal">True</span>        <span class="hljs-keyword">finally</span>:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> completed:                <span class="hljs-keyword">for</span> sock <span class="hljs-keyword">in</span> sockets:                    sock.close()    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Neither host/port nor sock were specified&#x27;</span>)        <span class="hljs-keyword">if</span> sock.<span class="hljs-built_in">type</span> != socket.SOCK_STREAM:            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;A Stream Socket was expected, got <span class="hljs-subst">&#123;sock!r&#125;</span>&#x27;</span>)        sockets = [sock]    <span class="hljs-keyword">for</span> sock <span class="hljs-keyword">in</span> sockets:        sock.setblocking(<span class="hljs-literal">False</span>)    server = Server(self, sockets, protocol_factory,                    ssl, backlog, ssl_handshake_timeout,                    ssl_shutdown_timeout)    <span class="hljs-keyword">if</span> start_serving:        server._start_serving()        <span class="hljs-comment"># Skip one loop iteration so that all &#x27;loop.add_reader&#x27;</span>        <span class="hljs-comment"># go through.</span>        <span class="hljs-keyword">await</span> tasks.sleep(<span class="hljs-number">0</span>)    <span class="hljs-keyword">if</span> self._debug:        logger.info(<span class="hljs-string">&quot;%r is serving&quot;</span>, server)    <span class="hljs-keyword">return</span> server</code></pre><p>當中有很多判斷點我們先略過，看他return的server為何～？</p><pre><code class="hljs py">server = Server(self, sockets, protocol_factory,                      ssl, backlog, ssl_handshake_timeout,                      ssl_shutdown_timeout)</code></pre><p>一個Server物件，再回到server.py看拿到server後的動作為</p><h2 id="server-forever"><a href="#server-forever" class="headerlink" title="server_forever()"></a>server_forever()</h2><pre><code class="hljs py"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-comment"># Get a reference to the event loop as we plan to use</span>    <span class="hljs-comment"># low-level APIs.</span>    loop = asyncio.get_running_loop()    server = <span class="hljs-keyword">await</span> loop.create_server(        <span class="hljs-keyword">lambda</span>: EchoServerProtocol(),        <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>)    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> server:        <span class="hljs-keyword">await</span> server.serve_forever()</code></pre><pre><code class="hljs py"><span class="hljs-comment"># base_events.Server</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>(events.AbstractServer):<span class="hljs-comment"># ...</span><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">serve_forever</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self._serving_forever_fut <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> RuntimeError(            <span class="hljs-string">f&#x27;server <span class="hljs-subst">&#123;self!r&#125;</span> is already being awaited on serve_forever()&#x27;</span>)    <span class="hljs-keyword">if</span> self._sockets <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">f&#x27;server <span class="hljs-subst">&#123;self!r&#125;</span> is closed&#x27;</span>)    self._start_serving()    self._serving_forever_fut = self._loop.create_future()    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">await</span> self._serving_forever_fut    <span class="hljs-keyword">except</span> exceptions.CancelledError:        <span class="hljs-keyword">try</span>:            self.close()            <span class="hljs-keyword">await</span> self.wait_closed()        <span class="hljs-keyword">finally</span>:            <span class="hljs-keyword">raise</span>    <span class="hljs-keyword">finally</span>:        self._serving_forever_fut = <span class="hljs-literal">None</span><span class="hljs-comment"># ...</span></code></pre><p>關注在self._start_serving()上</p><pre><code class="hljs py"><span class="hljs-comment"># base_events.Server</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>(events.AbstractServer):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">_start_serving</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self._serving:        <span class="hljs-keyword">return</span>    self._serving = <span class="hljs-literal">True</span>    <span class="hljs-keyword">for</span> sock <span class="hljs-keyword">in</span> self._sockets:        sock.listen(self._backlog)        self._loop._start_serving(            self._protocol_factory, sock, self._ssl_context,            self, self._backlog, self._ssl_handshake_timeout,            self._ssl_shutdown_timeout)<span class="hljs-comment"># ...</span></code></pre><p>接著看self._loop._start_serving()為何？別忘記這邊的self._loop唯一開始的ProactorEventLoop，所以要從這邊開始找，沒有在往繼承上面找，最後會在BaseProactorEventLoop中找到 _start_serving()</p><pre><code class="hljs py"><span class="hljs-comment"># proactor_events.py BaseProactorEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseProactorEventLoop</span>(base_events.BaseEventLoop):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">_start_serving</span>(<span class="hljs-params">self, protocol_factory, sock,</span><span class="hljs-params">                   sslcontext=<span class="hljs-literal">None</span>, server=<span class="hljs-literal">None</span>, backlog=<span class="hljs-number">100</span>,</span><span class="hljs-params">                   ssl_handshake_timeout=<span class="hljs-literal">None</span>,</span><span class="hljs-params">                   ssl_shutdown_timeout=<span class="hljs-literal">None</span></span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params">f=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> f <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                conn, addr = f.result()                <span class="hljs-keyword">if</span> self._debug:                    logger.debug(<span class="hljs-string">&quot;%r got a new connection from %r: %r&quot;</span>,                                 server, addr, conn)                protocol = protocol_factory()                <span class="hljs-keyword">if</span> sslcontext <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                    self._make_ssl_transport(                        conn, protocol, sslcontext, server_side=<span class="hljs-literal">True</span>,                        extra=&#123;<span class="hljs-string">&#x27;peername&#x27;</span>: addr&#125;, server=server,                        ssl_handshake_timeout=ssl_handshake_timeout,                        ssl_shutdown_timeout=ssl_shutdown_timeout)                <span class="hljs-keyword">else</span>:                    self._make_socket_transport(                        conn, protocol,                        extra=&#123;<span class="hljs-string">&#x27;peername&#x27;</span>: addr&#125;, server=server)            <span class="hljs-keyword">if</span> self.is_closed():                <span class="hljs-keyword">return</span>            f = self._proactor.accept(sock)        <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> exc:            <span class="hljs-keyword">if</span> sock.fileno() != -<span class="hljs-number">1</span>:                self.call_exception_handler(&#123;                    <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Accept failed on a socket&#x27;</span>,                    <span class="hljs-string">&#x27;exception&#x27;</span>: exc,                    <span class="hljs-string">&#x27;socket&#x27;</span>: trsock.TransportSocket(sock),                &#125;)                sock.close()            <span class="hljs-keyword">elif</span> self._debug:                logger.debug(<span class="hljs-string">&quot;Accept failed on socket %r&quot;</span>,                             sock, exc_info=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">except</span> exceptions.CancelledError:            sock.close()        <span class="hljs-keyword">else</span>:            self._accept_futures[sock.fileno()] = f            f.add_done_callback(loop)    self.call_soon(loop)<span class="hljs-comment"># ...</span></code></pre><p>這邊最後的self.call_soon()會把該function物件丟到events.Handle並生成Handle物件，然後加到self._ready中，self._ready為collections.deque()，這邊我還沒有搞清楚什麼時候self._ready會被觸發！server繞了一圈被丟到self._ready中～</p><h2 id="asyncio-run"><a href="#asyncio-run" class="headerlink" title="asyncio.run()"></a>asyncio.run()</h2><p>接著再切回來server.py中最後一行</p><pre><code class="hljs py"><span class="hljs-comment"># server.py</span>asyncio.run(main())</code></pre><p>asyncio啟動式</p><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">main, *, debug=<span class="hljs-literal">None</span>, loop_factory=<span class="hljs-literal">None</span></span>):    <span class="hljs-string">&quot;&quot;&quot;Execute the coroutine and return the result.</span><span class="hljs-string"></span><span class="hljs-string">    This function runs the passed coroutine, taking care of</span><span class="hljs-string">    managing the asyncio event loop, finalizing asynchronous</span><span class="hljs-string">    generators and closing the default executor.</span><span class="hljs-string"></span><span class="hljs-string">    This function cannot be called when another asyncio event loop is</span><span class="hljs-string">    running in the same thread.</span><span class="hljs-string"></span><span class="hljs-string">    If debug is True, the event loop will be run in debug mode.</span><span class="hljs-string"></span><span class="hljs-string">    This function always creates a new event loop and closes it at the end.</span><span class="hljs-string">    It should be used as a main entry point for asyncio programs, and should</span><span class="hljs-string">    ideally only be called once.</span><span class="hljs-string"></span><span class="hljs-string">    The executor is given a timeout duration of 5 minutes to shutdown.</span><span class="hljs-string">    If the executor hasn&#x27;t finished within that duration, a warning is</span><span class="hljs-string">    emitted and the executor is closed.</span><span class="hljs-string"></span><span class="hljs-string">    Example:</span><span class="hljs-string"></span><span class="hljs-string">        async def main():</span><span class="hljs-string">            await asyncio.sleep(1)</span><span class="hljs-string">            print(&#x27;hello&#x27;)</span><span class="hljs-string"></span><span class="hljs-string">        asyncio.run(main())</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> events._get_running_loop() <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-comment"># fail fast with short traceback</span>        <span class="hljs-keyword">raise</span> RuntimeError(            <span class="hljs-string">&quot;asyncio.run() cannot be called from a running event loop&quot;</span>)    <span class="hljs-keyword">with</span> Runner(debug=debug, loop_factory=loop_factory) <span class="hljs-keyword">as</span> runner:        <span class="hljs-keyword">return</span> runner.run(main)</code></pre><p>會交由Runner去執行</p><pre><code class="hljs py"><span class="hljs-comment"># runners.py Runner.run</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Runner</span>:<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, coro, *, context=<span class="hljs-literal">None</span></span>):    <span class="hljs-string">&quot;&quot;&quot;Run a coroutine inside the embedded event loop.&quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> coroutines.iscoroutine(coro):        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;a coroutine was expected, got &#123;!r&#125;&quot;</span>.<span class="hljs-built_in">format</span>(coro))    <span class="hljs-keyword">if</span> events._get_running_loop() <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-comment"># fail fast with short traceback</span>        <span class="hljs-keyword">raise</span> RuntimeError(            <span class="hljs-string">&quot;Runner.run() cannot be called from a running event loop&quot;</span>)    self._lazy_init()    <span class="hljs-keyword">if</span> context <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        context = self._context    task = self._loop.create_task(coro, context=context)    <span class="hljs-keyword">if</span> (threading.current_thread() <span class="hljs-keyword">is</span> threading.main_thread()        <span class="hljs-keyword">and</span> signal.getsignal(signal.SIGINT) <span class="hljs-keyword">is</span> signal.default_int_handler    ):        sigint_handler = functools.partial(self._on_sigint, main_task=task)        <span class="hljs-keyword">try</span>:            signal.signal(signal.SIGINT, sigint_handler)        <span class="hljs-keyword">except</span> ValueError:            <span class="hljs-comment"># `signal.signal` may throw if `threading.main_thread` does</span>            <span class="hljs-comment"># not support signals (e.g. embedded interpreter with signals</span>            <span class="hljs-comment"># not registered - see gh-91880)</span>            sigint_handler = <span class="hljs-literal">None</span>    <span class="hljs-keyword">else</span>:        sigint_handler = <span class="hljs-literal">None</span>    self._interrupt_count = <span class="hljs-number">0</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">return</span> self._loop.run_until_complete(task)    <span class="hljs-keyword">except</span> exceptions.CancelledError:        <span class="hljs-keyword">if</span> self._interrupt_count &gt; <span class="hljs-number">0</span>:            uncancel = <span class="hljs-built_in">getattr</span>(task, <span class="hljs-string">&quot;uncancel&quot;</span>, <span class="hljs-literal">None</span>)            <span class="hljs-keyword">if</span> uncancel <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> uncancel() == <span class="hljs-number">0</span>:                <span class="hljs-keyword">raise</span> KeyboardInterrupt()        <span class="hljs-keyword">raise</span>  <span class="hljs-comment"># CancelledError</span>    <span class="hljs-keyword">finally</span>:        <span class="hljs-keyword">if</span> (sigint_handler <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>            <span class="hljs-keyword">and</span> signal.getsignal(signal.SIGINT) <span class="hljs-keyword">is</span> sigint_handler        ):            signal.signal(signal.SIGINT, signal.default_int_handler)<span class="hljs-comment"># ...</span></code></pre><p>把main()丟到task裡面後，交由self._loop.run_until_complete(task)，create_task和run_until_complete都在BaseEventLoop中被定義！</p><pre><code class="hljs py"><span class="hljs-comment"># base_events.py BaseEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEventLoop</span>(events.AbstractEventLoop):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_until_complete</span>(<span class="hljs-params">self, future</span>):    <span class="hljs-string">&quot;&quot;&quot;Run until the Future is done.</span><span class="hljs-string"></span><span class="hljs-string">    If the argument is a coroutine, it is wrapped in a Task.</span><span class="hljs-string"></span><span class="hljs-string">    WARNING: It would be disastrous to call run_until_complete()</span><span class="hljs-string">    with the same coroutine twice -- it would wrap it in two</span><span class="hljs-string">    different Tasks and that can&#x27;t be good.</span><span class="hljs-string"></span><span class="hljs-string">    Return the Future&#x27;s result, or raise its exception.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    self._check_closed()    self._check_running()    new_task = <span class="hljs-keyword">not</span> futures.isfuture(future)    future = tasks.ensure_future(future, loop=self)    <span class="hljs-keyword">if</span> new_task:        <span class="hljs-comment"># An exception is raised if the future didn&#x27;t complete, so there</span>        <span class="hljs-comment"># is no need to log the &quot;destroy pending task&quot; message</span>        future._log_destroy_pending = <span class="hljs-literal">False</span>    future.add_done_callback(_run_until_complete_cb)    <span class="hljs-keyword">try</span>:        self.run_forever()    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">if</span> new_task <span class="hljs-keyword">and</span> future.done() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> future.cancelled():            <span class="hljs-comment"># The coroutine raised a BaseException. Consume the exception</span>            <span class="hljs-comment"># to not log a warning, the caller doesn&#x27;t have access to the</span>            <span class="hljs-comment"># local task.</span>            future.exception()        <span class="hljs-keyword">raise</span>    <span class="hljs-keyword">finally</span>:        future.remove_done_callback(_run_until_complete_cb)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> future.done():        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;Event loop stopped before Future completed.&#x27;</span>)    <span class="hljs-keyword">return</span> future.result()<span class="hljs-comment"># ...</span></code></pre><p>關注self.run_forever()，要再回頭看ProactorEventLoop中有沒有該function，有！</p><pre><code class="hljs py"><span class="hljs-comment"># windowns_events.py ProactorEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProactorEventLoop</span>(proactor_events.BaseProactorEventLoop):    <span class="hljs-string">&quot;&quot;&quot;Windows version of proactor event loop using IOCP.&quot;&quot;&quot;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, proactor=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">if</span> proactor <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            proactor = IocpProactor()        <span class="hljs-built_in">super</span>().__init__(proactor)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_forever</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">assert</span> self._self_reading_future <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>            self.call_soon(self._loop_self_reading)            <span class="hljs-built_in">super</span>().run_forever()        <span class="hljs-keyword">finally</span>:            <span class="hljs-keyword">if</span> self._self_reading_future <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                ov = self._self_reading_future._ov                self._self_reading_future.cancel()                <span class="hljs-comment"># self_reading_future was just cancelled so if it hasn&#x27;t been</span>                <span class="hljs-comment"># finished yet, it never will be (it&#x27;s possible that it has</span>                <span class="hljs-comment"># already finished and its callback is waiting in the queue,</span>                <span class="hljs-comment"># where it could still happen if the event loop is restarted).</span>                <span class="hljs-comment"># Unregister it otherwise IocpProactor.close will wait for it</span>                <span class="hljs-comment"># forever</span>                <span class="hljs-keyword">if</span> ov <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                    self._proactor._unregister(ov)                self._self_reading_future = <span class="hljs-literal">None</span></code></pre><p>super到BaseEventLoop的run_forever()</p><pre><code class="hljs py"><span class="hljs-comment"># base_events.py BaseEventLoop</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEventLoop</span>(events.AbstractEventLoop):<span class="hljs-comment"># ...</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_forever</span>(<span class="hljs-params">self</span>):    <span class="hljs-string">&quot;&quot;&quot;Run until stop() is called.&quot;&quot;&quot;</span>    self._check_closed()    self._check_running()    self._set_coroutine_origin_tracking(self._debug)    old_agen_hooks = sys.get_asyncgen_hooks()    <span class="hljs-keyword">try</span>:        self._thread_id = threading.get_ident()        sys.set_asyncgen_hooks(firstiter=self._asyncgen_firstiter_hook,                               finalizer=self._asyncgen_finalizer_hook)        events._set_running_loop(self)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            self._run_once()            <span class="hljs-keyword">if</span> self._stopping:                <span class="hljs-keyword">break</span>    <span class="hljs-keyword">finally</span>:        self._stopping = <span class="hljs-literal">False</span>        self._thread_id = <span class="hljs-literal">None</span>        events._set_running_loop(<span class="hljs-literal">None</span>)        self._set_coroutine_origin_tracking(<span class="hljs-literal">False</span>)        sys.set_asyncgen_hooks(*old_agen_hooks)<span class="hljs-comment"># ...</span></code></pre><p>這邊會設定events loop並一直執行裡面該有的任務，前面不知道的self._ready也會在self._run_once()當中被執行！</p><p>到這邊大概能有個對asyncio server的一個概觀了～</p><p>最後回頭來看看 uvicorn是怎麼運作的吧！</p><h2 id="uvicorn-server"><a href="#uvicorn-server" class="headerlink" title="uvicorn server"></a>uvicorn server</h2><p>先找到uvicorn的位置吧，找到之後看看main.py</p><p>參數有點多就不貼上來了，主要看看Server物件和該物件的run function！</p><pre><code class="hljs py"><span class="hljs-comment"># uvicorn server.py Server</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: Config</span>) -&gt; <span class="hljs-literal">None</span>:        self.config = config        self.server_state = ServerState()        self.started = <span class="hljs-literal">False</span>        self.should_exit = <span class="hljs-literal">False</span>        self.force_exit = <span class="hljs-literal">False</span>        self.last_notified = <span class="hljs-number">0.0</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, sockets: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[socket.socket]] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-literal">None</span>:        self.config.setup_event_loop()        <span class="hljs-keyword">return</span> asyncio.run(self.serve(sockets=sockets))</code></pre><p>可以看到一開始先準備好event_loop後執行asyncio.run()，看看其中的self.serve()</p><pre><code class="hljs py"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">serve</span>(<span class="hljs-params">self, sockets: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[socket.socket]] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-literal">None</span>:    process_id = os.getpid()    config = self.config    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> config.loaded:        config.load()    self.lifespan = config.lifespan_class(config)    self.install_signal_handlers()    message = <span class="hljs-string">&quot;Started server process [%d]&quot;</span>    color_message = <span class="hljs-string">&quot;Started server process [&quot;</span> + click.style(<span class="hljs-string">&quot;%d&quot;</span>, fg=<span class="hljs-string">&quot;cyan&quot;</span>) + <span class="hljs-string">&quot;]&quot;</span>    logger.info(message, process_id, extra=&#123;<span class="hljs-string">&quot;color_message&quot;</span>: color_message&#125;)    <span class="hljs-keyword">await</span> self.startup(sockets=sockets)    <span class="hljs-keyword">if</span> self.should_exit:        <span class="hljs-keyword">return</span>    <span class="hljs-keyword">await</span> self.main_loop()    <span class="hljs-keyword">await</span> self.shutdown(sockets=sockets)    message = <span class="hljs-string">&quot;Finished server process [%d]&quot;</span>    color_message = <span class="hljs-string">&quot;Finished server process [&quot;</span> + click.style(<span class="hljs-string">&quot;%d&quot;</span>, fg=<span class="hljs-string">&quot;cyan&quot;</span>) + <span class="hljs-string">&quot;]&quot;</span>    logger.info(message, process_id, extra=&#123;<span class="hljs-string">&quot;color_message&quot;</span>: color_message&#125;)</code></pre><p>在往下看self.startup()就能看到剛剛asyncio server.py那些部分啦！</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>uvicorn設定的部分還有很多，還沒有很熟悉就先到這邊了，對asyncio沒有很熟悉來看這些原始碼真的挺容易迷路的，不過稍微找一下還是能摸清楚大概的來龍去脈，也可以大致了解運行流程以及接收request的過程(這邊今天沒說到)，還可以跟django比較看看兩邊最大的差異點，之後再來看看FastAPI的原始碼吧！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2024-01-09Python_Uvicorn_Asyncio%E6%8E%A2%E7%B4%A2/0_INO7Jg0oBMnOleAX.webp&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="learning" scheme="https://m124578n.github.io/tags/learning/"/>
    
    <category term="uvicorn" scheme="https://m124578n.github.io/tags/uvicorn/"/>
    
    <category term="asyncio" scheme="https://m124578n.github.io/tags/asyncio/"/>
    
  </entry>
  
  <entry>
    <title>去年的檢討報告書</title>
    <link href="https://m124578n.github.io/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/"/>
    <id>https://m124578n.github.io/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/</id>
    <published>2024-01-07T13:58:00.000Z</published>
    <updated>2024-02-16T08:45:06.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/0_aruDvv2A-l3RmziV.webp"></p><p>2023年是一個非常充實的一整年，為了自己的目標，我嘗試去做了很多我不曾想過或不想做的事～有很多目標並沒有達成但….付出的努力或許會在將來有所回饋～</p><hr><h1 id="2023下半年目標"><a href="#2023下半年目標" class="headerlink" title="2023下半年目標"></a>2023下半年目標</h1><p>我年中的時候有定下了2023下半年的目標，為下～</p><ol><li>找到一份自己喜歡的工作</li><li>水球的課程如期完成</li><li>做出一個拉麵地圖的網站</li><li>日文的複習以及英文的學習</li><li>文章輸出練習</li><li>言語&#x2F;文字轉換程式的速度及完整度</li></ol><p>而結果對應為～</p><ol><li>未達成，不夠努力，履歷很難被看見所以面試很少</li><li>完成到4.2附近，覺得已達成報名目標就緩著了</li><li>懶惰且想太多而沒實際執行看看 ˊ_&gt;ˋ</li><li>日文每周讀書會練習，英文偶爾看</li><li>今年預計產出50篇文章，技術文章數量感覺偏少要注意</li><li>寫程式的想法跟速度由水球課程那邊訓練達成</li></ol><p>自我分析後大概還是缺乏執行力，且目標過大太過遙遠～</p><p>之後可能要列出大目標後再針對大目標進行拆解，想辦法把目標拆解成短期且持續成長的小目標～</p><hr><h1 id="一整年的感覺"><a href="#一整年的感覺" class="headerlink" title="一整年的感覺"></a>一整年的感覺</h1><p>然後稍微回想了一下一整年下來自己的感覺～</p><ol><li><p>今年大致已經了解web前後端的大技術。</p><p> 概觀有了但不夠深入每個都感覺淺淺的</p></li><li><p>工作難有專案實作，幾乎都只能自己練習。</p><p> 那就想辦法下班多練習，上班沒工作也練習相關技術</p></li><li><p>想法不多，需求難產。</p><p> 上網看別人都在練習甚麼挑幾個來做</p></li><li><p>中間崩潰過幾次休息了一陣子又出發。</p><p> 跨過去就是成長的開始</p></li><li><p>投履歷被現實擊垮沒有面試機會。</p><p> 沒有好好的修自己履歷，投履歷也沒有針對公司客製</p></li><li><p>努力方向不明確就停滯不前。</p><p> 應該要瘋狂練習管他對不對有趣就行，可能會繞遠路總比站在原地好</p></li><li><p>書有讀幾本但速度偏慢且深度也不夠。</p><p> 必須好好培養靜下來好好的閱讀</p></li></ol><hr><h1 id="活動"><a href="#活動" class="headerlink" title="活動"></a>活動</h1><p>而我今年參加過的線上線下活動～</p><h2 id="線下"><a href="#線下" class="headerlink" title="線下"></a>線下</h2><ul><li>taipei.py meetup</li><li>graphQL meetup</li><li>CosCup</li><li>pycon</li><li>DDDconf</li><li>DevOps meetup</li><li>release course</li></ul><h2 id="線上"><a href="#線上" class="headerlink" title="線上"></a>線上</h2><ul><li>SEC</li><li>GaaS</li><li>TTM</li><li>五倍紅寶石的分享</li><li>共學團</li><li>水球的線上課程</li></ul><p>這也算是我當初上台北的一個目的，多參加活動，認識不同的人，聽聽其他人的想法、故事、經驗、心法，參加的並不算多但也是頗有收穫！</p><hr><h1 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h1><p>今年空閒時間做的一些練習～<br>github repos</p><ul><li><a href="https://github.com/m124578n/Release_course">Release_course</a></li><li><a href="https://github.com/m124578n/IronMan_ToDoList">IronMan_ToDoList</a></li><li><a href="https://github.com/m124578n/ToDoList">ToDoList</a></li><li><a href="https://github.com/m124578n/waterball_missions">waterball_missions</a></li><li><a href="https://github.com/m124578n/python-line-bot-fly-flask">python-line-bot-fly-flask</a></li><li><a href="https://github.com/m124578n/ChatRoom">ChatRoom</a></li><li><a href="https://github.com/m124578n/django_rest_framework_practice">django_rest_framework_practice</a></li><li><a href="https://github.com/m124578n/spring_boot_swagger_test">spring_boot_swagger_test</a></li><li><a href="https://github.com/m124578n/spring_boot_playground">spring_boot_playground</a></li><li><a href="https://github.com/m124578n/pure-backend-practice-chih">pure-backend-practice-chih</a></li><li><a href="https://github.com/m124578n/old_blog">old_blog</a></li><li><a href="https://github.com/m124578n/m124578n.github.io">m124578n.github.io</a></li></ul><p>練習的量不夠多且淺，或許之後可以看看其他人的專案來找靈感～</p><hr><h1 id="Thome鐵人賽"><a href="#Thome鐵人賽" class="headerlink" title="Thome鐵人賽"></a>Thome鐵人賽</h1><ul><li><a href="https://ithelp.ithome.com.tw/users/20162905/ironman/6646">django還債</a><br>鐵人賽其實是臨時決定要參加的，當初一直猶豫自己會不會太菜技術力文章力都不夠，但後來想想並不是所有人都可以一次就做到完美，總是需要練習的過程，所以就參加了自我挑戰組，而挑選django也是因為常常使用且很好奇他實際的運行過程～</li></ul><hr><h1 id="明年目標-大標"><a href="#明年目標-大標" class="headerlink" title="明年目標 : 大標"></a>明年目標 : 大標</h1><ul><li>找到一份理想的工作</li><li>減肥健身維持運動習慣</li><li>學習成為值得交往的對象，多認識人</li><li>戴牙套</li><li>讀英文</li><li>參加鐵人賽</li><li>leetcode穩定練習</li><li>每月至少輸出2篇”技術”文章</li><li>每兩個月讀1本書</li><li>決定寫程式二轉職業</li></ul><p>這些大標為我目前想要達成的事或想要培養的習慣！之後還是需要制定執行計畫並定期回顧是否有達成～</p><hr><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>工程師也做了一年半，至今都還覺得自己不會得太廣太多了，也有點不清楚要往哪個方向前進，所以就嘗試了很多方法，改變了很多想法，算是一直在小量的迭代自己，希望自己可以成為理想中的自己。</p><p>而2023學習的過程也崩潰了好幾次，那些負面情緒跟雜念擊垮了我好幾回合，但成長或許就是一直崩潰一直振作而淬鍊出來的結晶，調整自己的心態、狀態，穩固好自己的腳步，只要不停止就是離成功離目標前進了一步！</p><p>而今年的目標或許會隨著遇見不同的人不同的事而有所改變或調整或新增吧！畢竟今年才剛開始，2024的我的旅程才剛準備出發～人生苦短，為自己努力，過一個有意義的一年吧！累積新的技能，堆疊新的回憶！希望明年的我也會覺得2024是個充實的一年！</p><p><code>祝大家新年快樂～持續成長！</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2024-01-07%E5%8E%BB%E5%B9%B4%E7%9A%84%E6%AA%A2%E8%A8%8E%E5%A0%B1%E5%91%8A%E6%9B%B8/0_aruDvv2A-l3RmziV.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;202</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="learning" scheme="https://m124578n.github.io/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>今年の本</title>
    <link href="https://m124578n.github.io/2023-12-24%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%9C%AC/"/>
    <id>https://m124578n.github.io/2023-12-24%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%9C%AC/</id>
    <published>2023-12-24T14:17:00.000Z</published>
    <updated>2023-12-25T01:04:11.685Z</updated>
    
    <content type="html"><![CDATA[<p>僕が成長のために今年からいろいろな学習方法を試しました、でも試す前に方法自体が学ぶ必要がある、なので、最初はどうすれば効率的、有効的、飽きなくて自分に相応しい学習方法を見つけなければならない、ということで、幾つの本を読みました。</p><ol><li><p>Atomic Habits・アトミック．ハビッツ</p><p> 小さな違いで巨大な変化が生み出す</p><p> 習慣というのは普通に考えると変えにくいの感じでしょう、それは方法が間違えだということだ、本からの要点が掴めば自然に、人の本性を返さず、いい習慣をつけれると悪い習慣を除ける。</p></li><li><p>The Feynman Technique</p><p> 学習というのは、ただひたすらに知識を頭の中に入れる作業ではないのだ、頭の中でもう一と考え、理解して、自分なりに意思を話すのが大切なことだ。</p></li><li><p>OUTPUT ．アウトプット</p><p> この本も二番目と同じ感じで、理解した知識を話す、書く、教えるとこの過程中は知識が脳内で何回も何回も整理して、考えて、その一番核のポイントに掴んで最後にアウトプットする。</p></li></ol><p>こいう感じで印象が強い本、実際も影響されて成長しましたと思います、もし勉強の効果が低い方にはぜひ試してみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;僕が成長のために今年からいろいろな学習方法を試しました、でも試す前に方法自体が学ぶ必要がある、なので、最初はどうすれば効率的、有効的、飽きなくて自分に相応しい学習方法を見つけなければならない、ということで、幾つの本を読みました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Atomic</summary>
      
    
    
    
    <category term="讀書心得" scheme="https://m124578n.github.io/categories/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/"/>
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="books" scheme="https://m124578n.github.io/tags/books/"/>
    
    <category term="learning" scheme="https://m124578n.github.io/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>神社，寺廟，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-23T02:15:00.000Z</published>
    <updated>2023-12-25T01:04:11.685Z</updated>
    
    <content type="html"><![CDATA[<p>日本的尾聲了，隔天就要準備搭飛機回台灣了，這10天說長不長說短不短的，滿足了我15年來一直想要體驗、感受、充實的過程，也讓我找到了我究竟是誰，追求的到底是什麼，生活的目標等等～身心靈整個大滿足！！</p><p>下圖為當天的行程，感覺走了很久但我卻不太會累，就是有點冷而已XD</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_EZoh5bUEXe375-juhzu86g.webp"></p><h2 id="日本之第九天"><a href="#日本之第九天" class="headerlink" title="日本之第九天"></a>日本之第九天</h2><p>一早前往南禪寺～從蹴上駅出來就感受到微微的寒風，此時的我已經開始後悔沒有穿厚一點的外套了XD，從車站出來可以明顯地感受到這邊是有點要上山的道路，周圍都是濃厚的自然芬芳，接著沿著google指示準備前往第一站</p><h3 id="南禪寺"><a href="#南禪寺" class="headerlink" title="南禪寺"></a>南禪寺</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_vDtq7rvCAfh7S-sNMZtUxg.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_CLayI51etdzY3TMK011n9A.webp"></p><p>通過這個隧道後彷彿進到了不一樣的世界，周圍都是深山老宅的那種感覺，古老的建築與翠綠的自然相互融合的那種視覺非常的舒服～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rfn-VIZ_vLYUg1vSp1lfKw.webp"></p><p>接著沿著道路一直走，周圍都是什麼什麼寺的，礙於時間關係我們就直接前往目標的南禪寺了，下次可以再好好的逛一次～就這樣走到底就可以看到目的地囉！！</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_GaCdjKkugxAgl_S9HCPFdQ.webp"></p><p>一走進去就感受到跟前面不太一樣的氛圍，這邊顯得更莊重、開闊、且生氣（畢竟人變多了XD），感受著這邊的朝氣，吸著山林間的空氣，通體舒暢～不多說了看圖感受一下這邊的美景～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tNN1_WFLngmOYm38CMei5g.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rZCWaBX0JTY1iST5sA5p1Q.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_7w-6VYDb3C4bXAwCMYC00Q.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_OVONT5AK9fhpStQc5FthNw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_CgpwuVOqPd7N18xHh_NvKA.webp"></p><p>而我也在這個時候開始了我今天的御守搜集之旅，從南禪寺開始我每到一間寺廟或神社就買個幾個御守和抽個籤～哈哈哈</p><p>接著我們就離開了南禪寺前往哲學之道～雖然這個時間點去沒什麼景色～不過走在這樣的路上聊聊天感覺也很不錯，路上還看到有人掉了IC卡，我們把它放到比較顯眼的地方希望他回來可以直接看到～而在道路上有人在寫生～有人在跟貓咪玩～有人在觀察著溪裡的魚～生活得如此愜意輕鬆的感覺也真不錯！</p><h3 id="哲學之道"><a href="#哲學之道" class="headerlink" title="哲學之道"></a>哲學之道</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_qCFdYQWnrJti5Jh4-90NXA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-I-_CfCkipTuLESdTCPOcw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_OH9vd1armtYYyi3tCtFWRg.webp"></p><p>哲學之道整條路的周圍有許多的神社跟寺廟就沒有一間一間去參訪了～其實這邊愜意的輕鬆的走感覺可以逛一整天呢～</p><p>前往下一站</p><h3 id="岡崎神社"><a href="#岡崎神社" class="headerlink" title="岡崎神社"></a>岡崎神社</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_xMWC1bQ0gbZzVIiX--0P6A.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rFA3nZ4C-gpmimGD913XIA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_8CWfbiiY3hV8MG5O5yJGgQ.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4tiv86gAeGky5RmJkqihwQ.webp"></p><p>這間神社是可以祈求結緣求子的，主要是供奉兔兔，所以神社內會有很多可愛的兔兔～～我在這邊也買了個御守，希望可以助我一臂之力遇見一個好對象！（現在好像出現了希望可以成功！！）願兔兔之神可以保佑我一切順利～～</p><p>接著前往下一站</p><h3 id="平安神宮"><a href="#平安神宮" class="headerlink" title="平安神宮"></a>平安神宮</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Qmhlia1DnnYdZCA-x98Fmw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_bFLpAaIfJWHKlCQd-3bFeA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tPNiuZ7KCi5aSnmhnHlNXw.webp"></p><p>這邊跟前面看見的神社跟寺廟的感覺是完完全全不一樣的，一進去就是一大片的廣闊的沙子石子地，走到最裡面還剛好看到了祈求祝福儀式的過程～然後建築物的風格也明顯的跟前面看到的都不太一樣～有不同的感受～</p><p>下一站～</p><h3 id="全家炸雞"><a href="#全家炸雞" class="headerlink" title="全家炸雞"></a>全家炸雞</h3><p>晴明神社之前呢經過了京都御所，留給我們的時間不多了我們就直接前往目的地，不然這個佔地大小感覺一逛也是一整天呢～哈哈哈，接著在附近的全家買了一個超級好吃的全家炸雞，這次終於記得拍照了！！我其實對日本的食物都沒什麼太特別的印象，就覺得食物都有在水準之上的好吃，但並沒也驚豔到的那種感覺，也可能是我們沒特別去挑店XD～總之我印象非常深刻的就是他！！！全家炸雞！！！我到此時此刻都還想要再吃個一塊呢～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_krLDibVNoDR8dRjJE507dw.webp"></p><p>小插曲結束後前往下一站</p><h3 id="晴明神社"><a href="#晴明神社" class="headerlink" title="晴明神社"></a>晴明神社</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Y5Jri-KjVgxRzG-wRFlZvQ.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_uz3tp1jkwRagyeG-YHCffA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eBhJor6ZdOm2HxnGzZRCRg.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_W2gwPVoglLcQBYUpCeneQQ.webp"></p><p>晴明我相信有稍微接觸日本文化或歷史的多多少少對這個名字有些許印象，就是歷代最強陰陽師！！連神社的標誌都非常的特殊是一個五角星～裡頭呢不會很大，就小小的一個神社座落在都市的那種感覺，而這邊的御守也非常的特別所以理所當然的就買了一個～</p><p>下一站</p><h3 id="金閣寺"><a href="#金閣寺" class="headerlink" title="金閣寺"></a>金閣寺</h3><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_mfCwqaTuBVel_buO-67g5w.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_NnBwoIfsrTjyN38Z7cslFA.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_UO-3B15m7FZEUozfMIgRJg.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_DtC7f3Kl91ozIbfKFpk-tw.webp"></p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_8xmleGH6-7Yx5rCJSn1QHw.webp"></p><p>晴明神社前往金閣寺剛好可以搭公車直達～而金閣寺離地鐵都比較遠所以只能搭計程車或公車前往，公車上人超多超滿的大家都是想去金閣寺，明明這時候時間也不早了～抵達後要再稍微走一段路上去～跟著人群走就對了XD，而金閣寺的門票也是超級特別的，是一個類似符咒所以就好好的保存起來了～進去之後不會馬上看到金閣寺本人，而是一群人XD，往前走一點就可以看到隔著湖遠遠的金閣寺了～不愧是金閣寺金碧輝煌的感覺又不會讓人覺得高調～是個滿不錯的地方～</p><p>到這邊日本的旅途也差不多要結束了～金閣寺逛完後大概也五點了附近的寺廟神社都這個時間點關門，所以我們就又去錦市場吃了好吃的蝦子XD，這個蝦子的記憶點也滿深的，只不過小貴～</p><p><img src="/images/2023-12-23%E7%A5%9E%E7%A4%BE%EF%BC%8C%E5%AF%BA%E5%BB%9F%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_3GKAGh8bl40A2_FqaHUlLw.webp"></p><p>最後一天大概就是準備回家的過程，也沒什麼特別的事情發生了，早餐的雞蛋拌飯很好吃～</p><p>而我在這趟旅途最大的收穫大概就是知道了我，知道了目標，知道了方向，以及該讓自己成為更好的人那種想法跟感覺由此蒙然而生，也感受到今年努力的一個小小回饋，希望明年來的時候就是跟的喜歡的另一半囉～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日本的尾聲了，隔天就要準備搭飛機回台灣了，這10天說長不長說短不短的，滿足了我15年來一直想要體驗、感受、充實的過程，也讓我找到了我究竟是誰，追求的到底是什麼，生活的目標等等～身心靈整個大滿足！！&lt;/p&gt;
&lt;p&gt;下圖為當天的行程，感覺走了很久但我卻不太會累，就是有點冷而已X</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>稻荷，清水，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-03T05:00:00.000Z</published>
    <updated>2023-12-20T06:09:41.981Z</updated>
    
    <content type="html"><![CDATA[<p>我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！</p><h2 id="日本之第七天"><a href="#日本之第七天" class="headerlink" title="日本之第七天"></a>日本之第七天</h2><p>第一站是伏見稻荷神社，一早就搭火車過來，人還超級多的！光是走出車站就花了一些時間呢～這邊也是我此趟日本行最期待的景點之一！京都的空氣真的是有夠新鮮有夠好聞的，在那邊鼻子都不太會過敏呢～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_IS2l1v3yP_dFkwoKQlVNbw.webp"><br><em>我好胖XD</em></p><p>接著就往裡面走著！！開始看到一大堆鳥居，剛好朋友幫我科普了一下這些鳥居是怎麼來的～原來只要有固定的捐錢就能蓋自己的鳥居，然後鳥居就會保佑公司可以發大財～鳥居的後面都會有什麼公司在什麼時間點蓋起來的～未來有機會我也想要蓋一個自己的鳥居呢，哈哈</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eR2pNhdqLPo6LY74XgYqEA.webp"></p><p>接著大概還在路口處不遠的地方，我們看到了一條小小的道路，其他地方人都超多的但就是這條久久才有人往上爬，於是乎在好奇心的驅使下踏上了一條有點硬的道路XD</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LIX6n5oe1To2QHHMl8REqg.webp"></p><p>這條路走進去真的超級漂亮的，而且真的都沒什麼人～竹林再加上早上的晨曦眼睛大滿足後，再吸一口山林間的空氣，真的是非常舒適，也讓我開始喜歡爬山與大自然接觸的感覺～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_R83jG9L-W5XuUejP3V6-UA.webp"></p><p>因為我們走的是不尋常的路，應該是啦不然怎麼那麼少人XD，路途中還看到了一些貓咪和住宅，住在深山裡面感覺應該挺不方便的～途中有一位澳洲人，因為我太累了在中間休息時，想說搭話一下練習我的破英文XD，現在只記得他是澳洲人而已哈哈，稍微尬聊一下，他就接著往上爬了，沒錯我還在休息XD，他跟我們說山頂見囉～see you later～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_isARRMpks4YMXNqOAxH7bA.webp"></p><p>說實在的有些地方真的有夠陡的，雖然說身體好像變輕鬆了，但依舊是拖著在大阪走了五六天的身體來爬山XD，脫離小路之後就開始看的人群了～接著往上爬到山頂的那一刻那個瞬間那個moment，真的是身心舒暢很有成就感，也愛上了爬山的那種感覺～而且今天的天氣真的超好，山上既不熱又不冷，還吹著徐徐的微風，是個超級適合爬山的天氣！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_0TRF5K0ijImxvHieMOVd5g.webp"></p><p>之後我們就開始往下走，此時也接近中午的時間，肚子也開始餓了～大概再往下走一點的地方，看到有在賣吃的就直接進去吃了～吃了鍋燒烏龍麵，不知道為什麼這碗烏龍麵格外的美味！吃完出來後看到了一覽京都的美景～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tBJHPEj95XAk9BBwksMhEQ.webp"></p><p>稻荷山下次來要走走正規的路上去看看～感覺有一些地方是沒有繞道的～</p><p>爬完山後大概是下午的時間，接著準備前往清水寺，但坐火車過去好像有點麻煩，於是我們決定做計程車過去，原本以為會很貴，一直有個既定印象說日本計程車超級貴，但其實實際上搭起來三個人分不會有貴的感覺，重點是很舒服哈哈哈，一上車司機的口音有點重，我多聽了幾次才了解他想要說什麼～大概是說清水寺載上去的話，那邊塞車很嚴重會影響他的工作，所以要我們決定是在商店街下車呢？還是去一條秘徑走路五分鐘過去～當下我覺得很酷所以就跟他說五分鐘的那條！於是乎就被載到山上啦！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Z1-nAinf-MawkGeWW6s85Q.webp"></p><p>滿炫的！第一次來清水寺竟然不是從正門進去XD，果然走沒多久就看到清水寺本寺啦！可以看到這麼遠的地方看也可以看到上面一大堆人～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9NBWhR0N08p6WI8ubkisCg.webp"></p><p>有點可惜的是，十一月初去的依舊是綠油油的一大片～下次希望可以看到紅通通的楓葉，我想那場面一定很壯觀！在這邊看著夕陽也是一個很優的體驗～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LJZifWRIITNoElzAxCka9w.webp"></p><p>接著晚餐去吃了一間很特別的拉麵店，他是一個set的那種，有餐前酒，前菜，主食，甜點～整體來說不錯吃但依舊沒有打敗辰拉麵，不過他店的包廂超級有日劇的感覺的XD，很像是來談生意的那種～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-mOQJVRuXsUyzlNIIpTsOw.webp"></p><p>接著前往錦市場裡面的天滿宮～路上經過了八坂神社，然後走進去花見小路看看，路上還真的看到藝伎，親眼見到的衝擊力頗大的！錦市場逛完後想說去一間居酒屋看看（雖然我不喝酒～）然後吃吃鳥串燒，結果幾乎人都滿滿的～最後找到一間我覺得很好吃的串燒！不過好像太好吃了我完全沒拍照XD，吃完串燒後我們決定沿著鴨川回區住宿的地方，</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_PDZohp3l5L24pLzajrOZ6Q.webp"></p><p>很舒服的一個地方～如果跟女朋友來晚上在這邊散散步聊聊天肯定非常的浪漫XD可惜我是單身狗QQ，下次來一定要跟女友來！</p><hr><h2 id="日本之第八天"><a href="#日本之第八天" class="headerlink" title="日本之第八天"></a>日本之第八天</h2><p>今天的天氣預報說會下雨，果然也在下雨，所以我們本日行程都排在市內居多～第一站前往鐵道博物館～這邊其實超出我的期待不少，有好多可以互動的東西，也有好多可以細部的看看火車內部構造的裝置，甚至可以去按按那些平常不太能按的緊急按鈕XD</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_WHfZjGFEpckp6RUe70q4UA.webp"></p><p>還可以玩玩怎麼樣駕駛火車～頂樓還可以直接看到京都車站的火車進出站的樣子！不得不說日本火車的班次好像有點多XD</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_FpiTgAXDpYVTMTti6wlqwQ.webp"></p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_saqmsjzytS_DkwUpWHfchw.webp"></p><p>最後發現好像有個特別的蒸汽火車可以搭過來，只不過票賣完了XD，可惜了～那個蒸汽火車真的很壯觀！鳴笛的時候可以感受到大地都在震動！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_m7k6CeWGis_Fp_YTrEGUWg.webp"></p><p>之後我們前往錦市場，昨天只有去天滿宮其他地方都沒什麼逛而且時間也晚了大部分都收攤了～再次前往錦市場好好的看看有什麼可以吃～然後就看到我想吃的店！這個蝦子我真的超級喜歡的！那個緊實又飽滿的蝦肉，簡單的鹽調味，可以吃出蝦子本身的鮮甜和彈牙的口感，真的是太讚了！！！！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_E46GYJm9mKBkCxijGOpsqQ.webp"></p><p>之後就是逛街的行程啦，不得不說錦市場真的頗大的，而且有滿多滿特別的店～錦市場逛完後我們就前往京都塔啦～</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-ggyH9SLIaoRJQWm2rcD4w.webp"></p><p>京都塔上面是挺壯觀的，不過不怎麼適合拍著，怎麼拍都紅紅或藍藍的XD，接著吃個拉麵就準備回旅館休息了～走路回家會經過東本願寺，晚上看也是很有威嚴的一個寺廟！</p><p><img src="/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_nd1JOLZPxtcCEhBtwk8ERg.webp"></p><p>這個時候我在神社和寺廟中已經買了很多御守和抽了很多籤XD，而這個也變成我的興趣的感覺了，隔天也是去了很多的神社和寺廟，可以說是每個地方都買了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！&lt;/p&gt;
&lt;h2 id=&quot;日本之第七天&quot;&gt;&lt;a href=&quot;#日本之第七天&quot; class=&quot;headerlink&quot; title=&quot;日本之第七天&quot;&gt;&lt;/a&gt;日本之第七天&lt;/h2&gt;</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>日記みたいなもの</title>
    <link href="https://m124578n.github.io/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/"/>
    <id>https://m124578n.github.io/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/</id>
    <published>2023-12-03T02:00:00.000Z</published>
    <updated>2023-12-18T07:11:56.213Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp"></p><p>最近はいろいろな事を試しています、よりいい状態とか、いい健康とか、自分が理想的な人になるために、たくさんのことを慣れるような、習慣をつけるようなことを努力しています。何でこういう考えが生み出すのか、それは主な原因はやはり付き合うの相手が欲しいからだ！その相手が見つかる前には、僕は自分が付き合いたい人にならないければならない！そこで、三つの点を考えました！</p><p>その一、運動</p><p>いい健康、いい体、いい体力、いいスタイル、というとそれほ運動ですね、運動の習慣をつけると定期的に身体の中の悪い、汚いなどな必要がないものを排除ができる、それで夜が眠れやすいし、起きた後もだるさもないし、体力も上がるし、全部いい事ばかり、やらない理由はとこにもないのだ！</p><p>その二、飲食</p><p>現代人は栄養バランスがとても悪いと気がする、特に自分のこと、以前は週に二、三回、それ以上かも、いっぱいの揚げ物とか加工製品を食べていた、それは絶対太るだろう、だから今は、なるべく野菜とかきのことか原型な食べ物を食べるつもり〜</p><p>その三、人</p><p>やば、人と人の接触が多いれば多いほどがいいのだ、理想的な相手が会うためにはたくさんの人に話す、知り合うのが、見つかりやすいと思っているのだ、それに人と話すのも奥が深い学問だ、話題とか、返事とかのも練習が必要だと思っている！</p><p>最後は自分がいい人になるように頑張ろう！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="japanese" scheme="https://m124578n.github.io/tags/japanese/"/>
    
  </entry>
  
  <entry>
    <title>歷史，城堡，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-02T04:00:00.000Z</published>
    <updated>2023-12-18T07:10:19.595Z</updated>
    
    <content type="html"><![CDATA[<p>到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD</p><h2 id="日本之第四天"><a href="#日本之第四天" class="headerlink" title="日本之第四天"></a>日本之第四天</h2><p>早上起來搭地鐵前往大阪城！只要知道搭到哪一站就好了，其餘跟著外國人走準沒錯XD，大家的目的地都是大阪城～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4bq1chfZAhAi-iov83Dj-Q.webp"><br><em>一出車站就能看見的～</em></p><p>一走進去大阪城的區域，可以很明顯地感覺到整體的氛圍都不一樣了，都市中有一個那麼大又廣的區域，然後大量的自然融合在歷史的建築中，我超喜歡這種雰囲気的！</p><p>接著往前走一點就可以看到在最外圍的護城河，我第一眼真的是被震驚到，那滂薄重大莊嚴的感覺（明明只是在最外圍XD，不過這照片真的真的沒辦法傳達到現場感受到的那種強大又壯觀的氣勢，下次來大阪我肯定會再來一次把周圍沒逛到的仔細的繞過一遍！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_xTZWNWimlBst8gkXf6Xhwg.webp"><br><em>可以看到天氣不是很好ＱＱ</em></p><p>走進去！！我自己很喜歡拍這種由地上往前看的照片，我也不知道為什麼XD</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VVXKAemCObjS6iZxDs-v4g.webp"></p><p>走進去會經過兩扇超大的門，想想如果以前打仗要突破這些城門想必是非常不容易的事情！接著再繼續走會看到一些建築物，然後是神社！有點後悔沒有去看看這個神社～之後在京都的時候真的是愛上了神社，好喜歡裡面的御守！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Wtd9FeCA9lW0CcCgLSV0Nw.webp"></p><p>再來是內圈的護城河，護城河有兩圈！！可以從橋的這個門看到大阪城本城啦！！！整個氣勢都不一樣跟周圍的建築物比起來很明顯的感覺出來一種高貴奢華感～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_DT1BP9jsDFw5BYyBiHR2xQ.webp"></p><p>我當時有一個想法，我是敵人跑到這邊我也已經累了XD，這邊離一開始那邊其實有一點距離了～</p><p>接著當然是大阪城本城啦！！！當下看到真的是非常的壯觀，不只城堡本體，就連下面那些地基的石頭的覺得很驚豔，古時候到底是怎麼把這樣壯觀龐大的城堡給建立起來的～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_wwUbkicoHr-7F_ab21sQNw.webp"></p><p>進去裡面有很多樓層，頂樓可以感受到彷彿城主在觀看自己的領地那種感覺，不過周圍的景觀綠色出去一點就是現代的高樓大廈了～以前的話估計不可能有比大阪城還高的建築物吧！</p><p>依序往下走可以看到大阪城的歷史，和一些日本的歷史人物的一生，我自己是對日本歷史不太熟悉啦，不過裡面講故事的方式我覺得非常的特別！懂日文的話非常推薦進去看看，還有些樓層會有一些歷史的古物，武士刀、當時的書卷、裝備等等的，還有大阪城的更早以前的縮小版模型，我好喜歡看那些模型！！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_P_Ymz8t6Qr3ISAOF_9JoDA.webp"></p><p>接著呢本來打算去做環湖的船，但沒事先做功課，好多人呀！，要等大概兩個小時，而且中間開始飄雨了，就沒有搭船了～又留下了一個遺憾呢～</p><p>最後一張跟大阪城說再見的照片～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eCPXSn02oUMjafCswj9xAw.webp"></p><p>我真的好喜歡這樣的歷史建築（特別是日本的）～</p><p>接著搭地鐵前往下一站今昔館～時間已到中午先吃個飯吧！到天神橋筋，本來想吃的拉麵店沒開，只好在商店街找一間囉！</p><p>好吃的醬油拉麵！！但心目中的第一名（辰拉麵）沒有被更新掉就是了</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_MOWZtOkLBNYHA40ySEJ3Dg.webp"></p><p>接著前往今昔館～今昔館裡面有以前的歷史建築，像是他們的商店還是住宅等等的，還有我最喜歡的縮小模型！！裡面也是拍了很多照逛了個過癮，只不過身體開始覺得累了，肯定是因為外面在下雨！！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Xc925K98toPQg8uRAgcF8A.webp"></p><p>之後前往梅田逛街，雖然天氣不好，但在大阪走路依然感覺很舒服～不愧是日本之行人的天堂！！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H-Iqq5qD0gSYEpBYBn6xvQ.webp"></p><p>就這樣結束了，充滿歷史文化最後轉變到現在都市的一天～</p><hr><h2 id="日本之第五天"><a href="#日本之第五天" class="headerlink" title="日本之第五天"></a>日本之第五天</h2><p>這天很短，因為我覺得該讓身體休息一下準備京都的神社之旅！！所以早上在天下茶屋附近繞了一圈，看看這邊居民的生活，也看看大阪比較外圍的景色～悠閒的走在路上，漫無目的的看看日本的房子也是不錯的體驗！中間還路過一間看起來很像新開的超市～買了唐揚雞，摁～我果然喜歡這種軟軟的唐揚雞，這跟我之前大學在高雄的一間唐揚雞很像，我非常喜歡！！雖然吃完之後又跑去全家買了全家炸雞XD，依舊忘了拍照哈哈哈</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_TNy6Q2kS9Pnxu7sriRBvkg.webp"></p><p>接著就回住宿的地方睡了個午覺，後面覺得其實這樣中間差一天輕鬆的休息也不錯呢～(明明就是體力太差了XD，回去之後要好好鍛練了～)</p><hr><h2 id="日本之第六天"><a href="#日本之第六天" class="headerlink" title="日本之第六天"></a>日本之第六天</h2><p>今天是前往京都的日子，不過在那之前我們決定去大阪車站逛一下街～這邊的現代化都市感就特別的重了，雖然第四天有來過一次，不過下雨跟晴天的感覺差挺多的～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_1YCZGv5DY8kKPqpfiI-BHQ.webp"></p><p>又去逛了寶可夢中心、JUMP、卡普空等等的周邊～我真的好喜歡百變怪！！想要蒐集百變怪的周邊了～要不是只有I14的手機殼，不然我就買了手機殼回家再買I15（Ｘ</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VAQzRZ_MzA_z1HAP7_XXOQ.webp"><br><em>你看！他在對你笑耶！！</em></p><p>接著中午去吃了一間吃到飽，螃蟹就算了，吃到飽種類不多，整體都挺好吃的，最令我驚豔的是炒青菜！！好久沒吃到炒青菜了而且還超好吃，吃了好幾盤呢～而且我還怕自己吃太飽想睡覺哈哈，因為下午還有其他地方要逛，吃太飽也不會想走路只想躺平～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Y-0dexAlFhMNhJyzya_ctw.webp"><br><em>好吃！只不過爐烤豬排有點失望ＱＱ跟我想的不一樣～</em></p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_KmOZmndV_0GSDfDtD4DpvQ.webp"></p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_D1veRzeIf2s0c_09dDPnCg.webp"></p><p>日本真的是怎麼拍都好看，每次回顧都覺得照片拍太少了～這夕陽也是挺好看的！！</p><p>接著就前往京都了～搭個火車人好多，大概40分鐘就到了京都～</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_esjxHxlcy0RF1AcF8Rns4w.webp"></p><p>旅程過了一半了，突然覺得時間漸漸的加速了～好希望再來十天XD</p><p>不過京都的路走起來就沒有大阪舒服～人行道有些整修的痕跡～</p><p>晚餐吃やよい軒定食就是好吃！白飯就是讚！</p><p><img src="/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_jmBvsIWgIxnlGaevXe6Uig.webp"></p><p>如果台灣有像這樣的定食且價格合理的話我肯定吃爆！還有個前提是白飯要跟日本的一樣好吃XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD&lt;/p&gt;
&lt;h2 id=&quot;日本之第四天&quot;&gt;&lt;a href=&quot;#日本之第四天&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="osaka" scheme="https://m124578n.github.io/tags/osaka/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>首次，出國，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-02T02:00:00.000Z</published>
    <updated>2023-12-18T06:49:08.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="わくわく"><a href="#わくわく" class="headerlink" title="わくわく"></a>わくわく</h2><p>從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的嗎（X</p><p>走在日本的街道，聽著周圍都是日文的環境，大口吸著新鮮的空氣，品嚐最道地的日本拉麵，就在今年2023&#x2F;11終於實現了我做了25年的夢！<br>至今回來了兩個禮拜還是意猶未盡，甚至想直接住在那邊了XD</p><p>久久沒寫文章了，自從上次參加完ithome的鐵人賽後就沒再寫過了～連續三十天真的是有夠硬，好佩服那些每天都能輸出的前輩！好了回歸正題，今天就來好好的回顧我在日本十天的自由行～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eKQh7KF3N-dGvma2bUxYYw.webp"><br><em>桃園機場，人生首次離開台灣！</em></p><p>在去日本的前兩個禮拜，我突然重感冒！喉嚨痛到不行外加腳趾甲溝炎，我真的是非常擔心我真的能去日本嗎，機票都買了住宿都訂好了，甚至是行程都大致排好了，我期待了三四個月就要這樣泡湯了嗎！！！</p><p>而且看了好幾位醫生和醫院喉嚨疼痛感依舊讓我晚上都沒睡好，隔天起床沒精神就算了還很痛，我只好向公司一直請假，請了整整一個禮拜～基本上都躺在家裡完全不想動！</p><p>但就這樣過了一個禮拜後，奇蹟似的突然痊癒了，這時離去日本已經剩下5、6天，感謝我的身體和意志力讓我可以康復～雖然因為感冒的關係體力貌似消耗的極大，導致剛到日本的前幾天其實都累累的，但我那興奮的又悸動的心情好像讓我腎上腺素爆發，基本上精神都是超過200%的！撐起來！</p><hr><h2 id="日本之第一天"><a href="#日本之第一天" class="headerlink" title="日本之第一天"></a>日本之第一天</h2><p>到了住宿的地方，放完行李（我只有帶一個小背包，其餘都打算直接在日本買，哈哈哈）就走朋友走在晚上八點的日本街道，思考著要吃什麼來開啟這趟日本之旅呢！就這樣走到了一間看起來非常日式餐館的店，少少的幾個座位都是靠著吧台，老闆就在面前調理，看著既熟悉又陌生的日文菜單，跟老闆注文了拉麵跟焼きめし，原本以為不會太大份，結果來了個大的，吃到非常飽哈哈，就這樣聽著旁邊熟客跟老闆的互動，吃完了來日本的第一餐，有種既熟悉又陌生的味道，但真的很感動！</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_b6Mr-Z-9FDMKhaSLZVRfzw.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_ct864Ox3blu_Auq-opSeyQ.webp"></p><p>吃飽後，跑到了附近的超市購買了一些生活用品和明天的早餐，我買了一個梅子飯糰，接著呢！走到我非常期待的便利商店，全家！沒錯！我要吃全家炸雞了ファミチキ，我只能說超級無敵好吃，以前都聽著大家說好吃好吃，一直很好奇到底有多好吃，結果真的出乎意料的好吃，光是看著聞著那眼淚都快從嘴角流出來了XD，不過太快吃完忘記拍照了～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_2NFkPqtcCSxKh35yGz5Q6A.webp"><br><em>只有拍全家，食物已消失XD</em></p><p>就這樣踏入日本的第一天結束了，實際上只有在外面走2、3個小時而已吧，期待明天的行程！！</p><hr><h2 id="日本之第二天"><a href="#日本之第二天" class="headerlink" title="日本之第二天"></a>日本之第二天</h2><p>前進黑門市場！本來以為會吃很多東西，但可能昨天那個晚餐吃太飽了，再加上早上吃了一個飯糰（梅子飯糰也是有夠好吃），有挺多想試試看的食物但就吃一點而已，稍微可惜了一些些，不過有吃到和牛串，感想是我果然不喜歡吃牛XD，不過如果有和牛燒肉或牛排我應該還是會想嘗試看看，畢竟先試了再說～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HdajNFINc3kXtr5HXuMAhg.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HvvNNBPW8xA83KXdd8n12Q.webp"></p><p>逛完黑門市場後就一路走到道頓崛，不得不說日本真的非常的行人友善，走起來特別的舒服，街景也特別的優美柔和且整體的融合感看了就是舒暢，說到道頓崛，我就是個觀光客肯定要來看グリコ，到這邊的時候其實還算早，就一大堆人好恐怖！</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_bzrwVPPCSMG_kR_IjKVUZQ.webp"></p><p>在這邊逛了唐吉，拍了好多張照片，午餐吃了炸豬排，日本的白飯真的是非常的好吃，來了兩天我真的可以為了吃白飯搬到日本去XD，不過我們這次行程真的都只有排大地標，其餘真的是很隨性，都是到了現場才決定要做什麼要逛什麼～有種到處探索的感覺我很喜歡～</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9pexDXd1RLMvAm0AEKFhHA.webp"></p><p>吃完豬排後，前往下個地方～下個地方是朋友說他喜歡的明星剛好來大阪辦活動，於是我們就決定去看看，中間路過了アメリカ村是一個滿特別的地方，整體的氛圍感不像在日本但又有日式的感覺，一如往常的人依舊非常多XD，還有一台特別的車播放著音樂在這周邊徘徊</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_GNjDlD9nnup759VZnh0MBQ.webp"></p><p>之後走到了一處比較像住宅區的地方，有一個大公園裡面很多家長帶著小孩子在玩耍～而我們的目的地就在這個公園的旁邊～這邊我都忘記拍照了，太可惜了QQ</p><p>走著走著很快地就來到晚上了，真的是繞了很多地方，可是我沒有習慣觀光客模式，都一直忘記拍照，太可惡了！！在前往難波車站的路上看到了一台大牛（我也想要一台XD）然後還有一棟很漂亮的建築，雖然我到現在還不知道他是什麼XD</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_gFs5P9ifQ6zYC6UqovR0IA.webp"></p><p>晚餐呢就在住處附近吃了美式的家庭餐廳，我自己是覺得還不錯，特別是漢堡排很好吃！不過這樣吃下來，發覺日本不容易吃到熟的蔬菜，都是生菜居多～這兩天已經感覺到蔬菜含量不足了XD</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4nYzzhAPqnPcBE2hiPdoMQ.webp"></p><p>就這樣結束了第二天在日本的旅遊～晚上回到家，買了一些貼腳的，希望明天可以再繼續走一整天XD，已經幾年沒運動的我，旅遊的前幾天身體一直在跟我哭訴的感覺，哈哈，只不過都被我這興奮的感覺和意志力給壓過去了，晚上還是得好好照顧一下他們，多貼幾片，明天還要靠你們呢！</p><hr><h2 id="日本之第三天"><a href="#日本之第三天" class="headerlink" title="日本之第三天"></a>日本之第三天</h2><p>一早就跑去日本橋，逛逛動漫的周邊等等的，不過我好像已經過了這個年紀了，我是沒有特別有興趣，只是覺得看看還行，不過要買的話很容易被現實層面的自己給制止，畢竟買了也沒地方放呀！</p><p>但中午是我滿期待的女僕咖啡廳，從來沒踏入過女僕咖啡廳，一直很想體驗看看那種感覺會尷尬的氛圍XD，沒錯學日文也是為了好好的跟女僕聊天（X</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_EP8DZnfMBc8k8mVg5W1H6Q.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_iGeFKg0o1Cg_wzOKJRbQYw.webp"></p><p>整體的感覺我還滿喜歡的，而且有種對自己的日文認可的那種感覺，可以好好的跟女僕聊聊天，可能也是我第一次用日文跟日本人聊天吧！只能說好險再來之前有跟朋友辦每個禮拜一次的日文讀書會，練習說說日文，不然我畢業後到現在完全沒用過真的是都快忘記怎麼講了～下次來日本旅遊，肯定會想再來看看的！</p><p>日本橋逛了很多間店，只不過我都偏走馬看花，又忘記開啟觀光客模式瘋狂拍照了，殘念！</p><p>接著就前往了心齋橋，那邊有寶可夢中心和吉卜力等等的店面，這邊真的挺好逛了，有好多相關的周邊，但本來打算要吃敘敘苑，沒訂位又不餓就沒吃了，小缺憾～不過心齋橋的人也是爆多，可以看到韓國，台灣，和日本其他地方來的觀光客，歐美反而比較少在這邊看到，不過這樣的商店街真的挺不錯的，最後來看看大龍貓和不要吃太胖還有無臉男XD</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H0_3Zv26qYbqefTXtY2cVw.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_lVqbpygbXXphhgj-91EnCw.webp"></p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rOjg2uHcmr3yY3UdM7FujQ.webp"></p><p>繞著繞著就接近晚上了，心齋橋走回難波車站會經過道頓崛又拍了晚上版的XD，人更多了！</p><p><img src="/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_crIo2zjxvuhmwx9Rmtg_xA.webp"></p><p>第三天大概就這樣結束了，腳又酸又痛的XD趕緊回家多貼幾片！</p><p>日本的前三天，就這樣過完了，基本上都是觀光的地方，啊我就觀光客當然去觀光景點XD，有幾點比較可惜的是沒有去大阪知名的神社逛逛，不過這也是去京都後才有的感想XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;わくわく&quot;&gt;&lt;a href=&quot;#わくわく&quot; class=&quot;headerlink&quot; title=&quot;わくわく&quot;&gt;&lt;/a&gt;わくわく&lt;/h2&gt;&lt;p&gt;從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="osaka" scheme="https://m124578n.github.io/tags/osaka/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
  </entry>
  
  <entry>
    <title>Day30. 最後的一天，鐵人賽的結束，也是下一場旅途的開始～</title>
    <link href="https://m124578n.github.io/2023-10-15Day30.%E6%9C%80%E5%BE%8C%E7%9A%84%E4%B8%80%E5%A4%A9%EF%BC%8C%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%9A%84%E7%B5%90%E6%9D%9F%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%8B%E4%B8%80%E5%A0%B4%E6%97%85%E9%80%94%E7%9A%84%E9%96%8B%E5%A7%8B%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-10-15Day30.%E6%9C%80%E5%BE%8C%E7%9A%84%E4%B8%80%E5%A4%A9%EF%BC%8C%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%9A%84%E7%B5%90%E6%9D%9F%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%8B%E4%B8%80%E5%A0%B4%E6%97%85%E9%80%94%E7%9A%84%E9%96%8B%E5%A7%8B%EF%BD%9E/</id>
    <published>2023-10-15T01:05:22.000Z</published>
    <updated>2023-12-22T09:13:49.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="結束"><a href="#結束" class="headerlink" title="結束"></a>結束</h2><p>鐵人賽第三十天！<br>老實說我從來沒有想過我能寫完這三十天，雖然中的有很多地方其實我本來預期是一天要寫完的ＸＤ<br>不過在寫的過程中，因為只有下班的時間，所以有時候就稍微偷了個懶～</p><h2 id="起頭"><a href="#起頭" class="headerlink" title="起頭"></a>起頭</h2><p>一開始呢，我是抱持著好好的重新開始看看django怎麼寫比較正確，參考github上面其他人怎麼規劃django的資料夾等等，後面一個不小心在好奇心的驅使下就跑進去了原始碼裡面，一發不可收拾，就決定好好的來看看平常自己在使用django的時候裡面究竟發生了什麼事！總是要熟悉自己的工具的啦！</p><h2 id="過去"><a href="#過去" class="headerlink" title="過去"></a>過去</h2><p>其實我在去年2022年底的時候就有嘗試看看閱讀django的原始碼，然而那時的我真的是完全看不懂，最直接的就是連magic method是什麼都不知道～甚至連python和OO物件導向都沒有很明白其中的概念～</p><h2 id="成長-轉折點"><a href="#成長-轉折點" class="headerlink" title="成長&#x2F;轉折點"></a>成長&#x2F;轉折點</h2><p>而在今年年初2023年1月，我偶然間來到了『<em><strong>水球軟體學院</strong></em>』，在這之前我完全不知道公司外的工程師都在做什麼？要變強需要什麼技能？加入後，在這邊耳濡目染，環境的渲染下，我開始知道寫程式需要做什麼，需要學習什麼，要如何跟其他工程師合作等，受益良多！接著報名水球的『<a href="https://waterballsa.tw/design-pattern">軟體精通之旅</a>』課程後，我寫程式的能力可以說是大幅度的提升了，也開始厭惡自己以前的codeＸＤ這也奠下了我看django原始碼的基礎能力之一！</p><h2 id="突飛猛進"><a href="#突飛猛進" class="headerlink" title="突飛猛進"></a>突飛猛進</h2><p>隨著參加學院的活動，開始聽見看見許多知識，也自己開始吸收轉化練習，最後練習輸出(跟其他人分享學到的知識或者是寫成文章等)，回顧這快一年的收穫可以說是滿滿的，雖然自己還是有卡住之後在谷底思考了幾個禮拜，但之後也撥開迷霧能順利地向前進！這邊很常聽到的名詞大致為：DDD，CA，TDD，ATDD，design pattern，OOAD，Event Storming，Example Mapping，SQL問題，不同語言優勢，甚至是股票等等，許多有趣的知識和活動可以參與，也豐富了我下班學習的生活～雖然我很多東西都還只處在聽過的程度，還需要好好的練習實作才有辦法讓自己更上一層！</p><h2 id="未來規劃"><a href="#未來規劃" class="headerlink" title="未來規劃"></a>未來規劃</h2><p>鐵人賽的結束，也是下一場旅途的開始</p><p><img src="/images/2023-10-15Day30.%E6%9C%80%E5%BE%8C%E7%9A%84%E4%B8%80%E5%A4%A9%EF%BC%8C%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%9A%84%E7%B5%90%E6%9D%9F%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%8B%E4%B8%80%E5%A0%B4%E6%97%85%E9%80%94%E7%9A%84%E9%96%8B%E5%A7%8B%EF%BD%9E/201629058QFzSsavp2.jpg"></p><p>我再來的規劃是想要好好的打穩軟體基礎<br>學學DSA和OS，刷刷題～<br>接著在接觸學習Java，想要進去現階段理想的公司！<br>也有計畫上91的課程，提升自己的code速度和熟悉IDE！</p><p>時間上允許的話我對python的原始碼也是頗有興趣ＸＤ<br>不過現階段還是以DSA和OS和Java為主，畢竟快餓死了QQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;結束&quot;&gt;&lt;a href=&quot;#結束&quot; class=&quot;headerlink&quot; title=&quot;結束&quot;&gt;&lt;/a&gt;結束&lt;/h2&gt;&lt;p&gt;鐵人賽第三十天！&lt;br&gt;老實說我從來沒有想過我能寫完這三十天，雖然中的有很多地方其實我本來預期是一天要寫完的ＸＤ&lt;br&gt;不過在寫的過程中，因</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day29. test指令的過程和unittest的運作！</title>
    <link href="https://m124578n.github.io/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/</id>
    <published>2023-10-14T02:02:48.000Z</published>
    <updated>2023-12-22T09:10:35.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我們昨天稍微寫了一些test來測試我們的Todolist，那當中下了很多次djang去run test的指令<br>‘python manage.py test’<br>今天就來看看這個指令做了些什麼事吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>先來稍微看一下python unittest怎麼寫，因為django的test也是建立在unittest之上的</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905nBsGOcQ5HT.png"></p><p>接下來～<br>老樣子的到core management commands下的test.py看handle function</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905oQLpPRJUJR.png"></p><p>第一行的TestRunner從settings過來的，我想大家也都很熟悉了直接到<br><code>django.conf.global_settings.py</code>下找到TEST_RUNNER</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905hkxNIJP3L1.png"></p><p>然後就可以找到DiscoverRunner</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905FSkBG1g9Hi.png"></p><p>接著往下看</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/201629058dv4ldE2n4.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905WL6b3ktdcw.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905xkHOegnF7n.png"></p><p>這邊可以看到他有setup環境 db等等，我們看看最重要的run test部分～</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905iIsM9rGw9B.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905bbb2qD2BzV.png"></p><p>這邊的runner就是unittest中的runner了</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905ADLjnaOD4q.png"></p><p>而這個run就看最重要的地方吧</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905L8CNFvlXj7.png"></p><p>這邊的test就是我們剛剛傳進來的suite<br>那我們就來看看suite被call的時候會做什麼事吧！<br>看到call就要聯想到<code>__call__</code></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905Zsm0Th9skh.png"></p><p>再看run</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/201629053ZkKg4a2C9.png"></p><p>這邊就可以看到test運行前呢會先觸發class setup，結束會tear down～<br>然後接著看當中的test</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905W51CZM0UsG.png"></p><p>一樣<code>__call__</code></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905MAvnHfbiht.png"></p><p>再往下</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905kZ56skB5V1.png"></p><p>這邊也處理了很多東西<br>當中的<code>super.__call__(result)</code>就不多看了，裡面也是滿多東西ＸＤ</p><p>最後就來畫個久久沒畫的圖吧～</p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905XwFKOoDtUN.png"></p><p><img src="/images/2023-10-14Day29.test%E6%8C%87%E4%BB%A4%E7%9A%84%E9%81%8E%E7%A8%8B%E5%92%8Cunittest%E7%9A%84%E9%81%8B%E4%BD%9C%EF%BC%81/20162905OEG60FhfDp.png"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>test也是博大精深的學問，其實有時候光是想test要怎麼寫就花了一些時間，但有test的保護下自己交付出去的程式碼也相對能有信心！最後在好奇心的驅使下去看了django test的過程～起初是想要了解setUp, setUpClass, tearDown, tearDownClass的關聯，後面就把test整個巡過了一遍，挺有趣的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我們昨天稍微寫了一些test來測試我們的Todolist，那當中下了很多次djang去run test的指令&lt;br&gt;‘python mana</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day28. 寫些test來測試我們的網頁！</title>
    <link href="https://m124578n.github.io/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/</id>
    <published>2023-10-12T23:06:26.000Z</published>
    <updated>2023-12-22T09:06:30.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>test測試，有了測試的保護以後要修改程式就比較不用怕出太多bug！<br>而測試寫熟了或測試的方式用熟了，還能挑戰TDD的開發方式，先寫測試在寫程式</p><blockquote><p>紅燈 -&gt; 綠燈 -&gt; 重構</p></blockquote><p>先寫測試也有一個好處是可以明確的自己知道專案進度如何，像我現在這樣回頭寫測試就會像為了寫測試而去測試的那種感覺，測試最重要的目的是保護我們的程式碼如期望中的運行，而這個期望就是我們最想要交付的東西～</p><p>而我在之前做個專案中都沒有寫過django的test，就讓我來研究研究要怎麼寫django的test吧！<br><strong>我這邊的測試都是寫完後面在補的唷～改天再來試試看TDD！</strong></p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>首先我們先來列下我們要測試的項目</p><ol><li>測試views.index有正確渲染index.html，並回傳http status 200</li><li>測試views.api有正確回傳所有Todo data（預先setUp的資料）</li><li>測試views.add有如期新增資料</li><li>測試views.update有如期更新資料</li><li>測試views.delete有如期刪除資料</li></ol><h3 id="項目一"><a href="#項目一" class="headerlink" title="項目一"></a>項目一</h3><p>首先就先來寫第一個test 測試views.index吧<br>我們直接修改在todoapp中的tests.py</p><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, Client<span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:        self.client = Client()            <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_index</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">&quot;/&quot;</span>)        self.assertEqual(res.status_code, <span class="hljs-number">200</span>)        self.assertTemplateUsed(<span class="hljs-string">&quot;index.html&quot;</span>)</code></pre><p>再來下指令<code>python manage.py test</code><br>就會看到</p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905ltCiadFf1S.png"></p><p>內容大致為</p><ul><li>找到test</li><li>建立test用database</li><li>run test</li><li>結果</li><li>刪掉test用database</li></ul><p>明天就決定來看看test究竟做了什麼吧！</p><h3 id="項目二"><a href="#項目二" class="headerlink" title="項目二"></a>項目二</h3><p>要測試api有沒有回傳所有data，要先塞給他預設的data</p><pre><code class="hljs py">data = [    &#123;        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>,        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;test 001&#x27;</span>,        <span class="hljs-string">&#x27;complete&#x27;</span>: <span class="hljs-literal">False</span>    &#125;,    &#123;        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>,        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;test 002&#x27;</span>,        <span class="hljs-string">&#x27;complete&#x27;</span>: <span class="hljs-literal">True</span>    &#125;,]<span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:        <span class="hljs-comment"># 新增資料</span>        Todo.objects.create(title=data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;title&#x27;</span>], complete=data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;complete&#x27;</span>])        Todo.objects.create(title=data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;title&#x27;</span>], complete=data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;complete&#x27;</span>])                <span class="hljs-comment"># 建立client</span>        self.client = Client()            <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_all_todos</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">&quot;/api/&quot;</span>)        res_datas = json.loads(res.content)[<span class="hljs-string">&#x27;data&#x27;</span>]        self.assertEqual(res.status_code, <span class="hljs-number">200</span>)        self.assertEqual(res_datas[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;title&#x27;</span>], data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;title&#x27;</span>])</code></pre><p>這邊我先setUp了我上面定義好的data<br>接下來就去看看我們寫的views.py回傳什麼去處理，我們回傳的事JsonResponse所以需要先用json.loads處理後就是普通的data在跟我們原本定義的做比較</p><p>最後下<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905uItp9j75cc.png"></p><p>沒有報錯，收工～</p><h3 id="項目三"><a href="#項目三" class="headerlink" title="項目三"></a>項目三</h3><p>這邊要test的是新增，就來寫吧！<br>這邊要稍微注意，post過來的data型別</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add_new_todo</span>(<span class="hljs-params">self</span>):        test_data = &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;test 003&#x27;</span>&#125;        res = self.client.post(                <span class="hljs-string">&quot;/api/add/&quot;</span>,                 json.dumps(test_data),                 content_type=<span class="hljs-string">&quot;application/json&quot;</span>            )        res_data = json.loads(res.content)        self.assertEqual(res_data[<span class="hljs-string">&#x27;todo_title&#x27;</span>], test_data[<span class="hljs-string">&#x27;title&#x27;</span>])        self.assertEqual(res_data[<span class="hljs-string">&#x27;complete&#x27;</span>], <span class="hljs-literal">False</span>)</code></pre><p>新增完後一樣下<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905VEbfAY0cGh.png"></p><p>看到OK後就完成</p><h3 id="項目四"><a href="#項目四" class="headerlink" title="項目四"></a>項目四</h3><p>再來是test update complete的部分，直接寫吧～</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_update_todo</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">f&quot;/api/update/<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>)        res_data = json.loads(res.content)        self.assertEqual(res_data[<span class="hljs-string">&#x27;todo_id&#x27;</span>], data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>])        self.assertEqual(res_data[<span class="hljs-string">&#x27;complete&#x27;</span>], <span class="hljs-literal">True</span>)</code></pre><p>測試修改預設data的第一筆資料是否complete<br>寫完一樣下<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905jplmyqR6ip.png"></p><p>OK下面一位</p><h3 id="項目五"><a href="#項目五" class="headerlink" title="項目五"></a>項目五</h3><p>test delete，開始</p><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoListTestCase</span>(<span class="hljs-title class_ inherited__">TestCase</span>):    <span class="hljs-comment"># ...</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_delete_todo</span>(<span class="hljs-params">self</span>):        res = self.client.get(<span class="hljs-string">f&quot;/api/delete/<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>)        res_data = json.loads(res.content)        self.assertEqual(res_data[<span class="hljs-string">&#x27;todo_id&#x27;</span>], data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>])        todo = Todo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>])        self.assertEqual(<span class="hljs-built_in">list</span>(todo), [])</code></pre><p>這邊我很簡單的去測試找條件為我們刪除的id還存不存在<br>寫完一樣<code>python manage.py test</code></p><p><img src="/images/2023-10-13Day28.%E5%AF%AB%E4%BA%9Btest%E4%BE%86%E6%B8%AC%E8%A9%A6%E6%88%91%E5%80%91%E7%9A%84%E7%B6%B2%E9%A0%81%EF%BC%81/20162905q0SfdyIO8e.png"></p><p>OK大功告成～</p><p>那我這邊的測試項目都很簡單沒有用到太特別的框架或套件 e.g. seleninum or pytest等<br>做為我第一次寫test的開頭先簡單一點吧～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>測試這條路好像有很多東西可以玩，而且就寫測試這一點為出發點下去構想程式怎麼設計也是一個滿不錯的體驗，好的測試可以讓自己在開發的時候，像是完成一項一項的任務然後得到很多回饋感，再搭配CICD建立起來測完就推上去，之後再看自己git graph肯定會有滿滿的滿足感！之後的項目也要好好的寫測試！</p><p>完整的程式碼<br><a href="https://github.com/m124578n/IronMan_ToDoList/blob/main/todolist/todoapp/tests.py">https://github.com/m124578n/IronMan_ToDoList/blob/main/todolist/todoapp/tests.py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;test測試，有了測試的保護以後要修改程式就比較不用怕出太多bug！&lt;br&gt;而測試寫熟了或測試的方式用熟了，還能挑戰TDD的開發方式，先寫測</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day27. 首先先來簡單做個Todolist頁面～</title>
    <link href="https://m124578n.github.io/2023-10-12Day27.%E9%A6%96%E5%85%88%E5%85%88%E4%BE%86%E7%B0%A1%E5%96%AE%E5%81%9A%E5%80%8BTodolist%E9%A0%81%E9%9D%A2%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-10-12Day27.%E9%A6%96%E5%85%88%E5%85%88%E4%BE%86%E7%B0%A1%E5%96%AE%E5%81%9A%E5%80%8BTodolist%E9%A0%81%E9%9D%A2%EF%BD%9E/</id>
    <published>2023-10-12T00:51:04.000Z</published>
    <updated>2023-12-22T09:02:41.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快要結尾了，稍微喘口氣，來做個簡單的Todolist頁面吧！<br>會參考以下兩篇文章進行</p><ul><li><a href="https://www.youtube.com/watch?v=3vfum74ggHE&list=PLrgX5bzJJljqMbq7msQX4nzTtV3kqZOST&index=20&ab_channel=PatrickLoeber">I built the same app 3 times | Which Python Framework is best? Django vs Flask vs FastAPI</a></li><li><a href="https://hackmd.io/@Heidi-Liu/note-fe302-review">前端框架 - 先別急著學 React</a></li></ul><p>稍微以這兩個為基底下去修改和融合～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先先建立django project 和 app，然後把一些基礎的設定弄完再做一個簡單的hello world吧！相信大家都很熟了～</p><ol><li>先下<code>django-admin startproject todolist</code></li><li>然後進去<code>cd todolist</code></li><li>接著下<code>python manage.py startapp todoapp</code></li><li>再來呢修改<code>settings.py</code><pre><code class="hljs py"><span class="hljs-comment"># 在installed apps裡面加上剛剛新增的app name</span>INSTALLED_APPS = [    <span class="hljs-string">&#x27;todoapp&#x27;</span>,    <span class="hljs-comment"># ...</span>]<span class="hljs-comment"># templates 中的 dirs 加上</span>TEMPLATES = [    &#123;        <span class="hljs-comment"># ...</span>        <span class="hljs-string">&#x27;DIRS&#x27;</span> : [<span class="hljs-string">&#x27;templates&#x27;</span>],        <span class="hljs-comment"># ...</span>    &#125;]</code></pre></li><li>建個templates資料夾備用<code>mkdir templates</code>，在裡面丟個<code>index.html</code>備用</li><li>在todoapp裡面新增一個<code>urls.py</code>內容如下<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),]</code></pre></li><li>todoapp裡面的<code>views.py</code>稍微加上<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;hello&#x27;</span>: <span class="hljs-string">&#x27;world&#x27;</span>&#125;)</code></pre></li><li>再來在todolist的urls.py加上<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, includeurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;todoapp.urls&#x27;</span>))]</code></pre></li></ol><p>如此一來<code>python manage.py migrate</code> 後 <code>python manage.py runserver</code>，就能看到json格式的hello world囉～</p><h3 id="開始新增todo"><a href="#開始新增todo" class="headerlink" title="開始新增todo"></a>開始新增todo</h3><ol><li>在todoapp中的<code>models.py</code>加上<pre><code class="hljs py"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(models.Model):    title=models.CharField(max_length=<span class="hljs-number">350</span>)    complete=models.BooleanField(default=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.title</code></pre></li><li>接著下<code>python manage.py makemigrations</code> 後 <code>python manage.py migrate</code></li><li>修改todoapp下的<code>views.py</code><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<span class="hljs-keyword">from</span> django.views.decorators.http <span class="hljs-keyword">import</span> require_http_methods<span class="hljs-keyword">from</span> django.forms.models <span class="hljs-keyword">import</span> model_to_dict<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Todo<span class="hljs-keyword">import</span> json<span class="hljs-comment"># Create your views here.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">api</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-built_in">list</span>(todos.values())&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    body = request.body.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    body = json.loads(body)    title = body.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete, <span class="hljs-string">&quot;todo_title&quot;</span>: todo.title&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id&#125;)</code></pre></li><li>接著是todoapp下的<code>urls.py</code><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&quot;index&quot;</span>),    path(<span class="hljs-string">&#x27;api/&#x27;</span>, views.api, name=<span class="hljs-string">&quot;api&quot;</span>),    path(<span class="hljs-string">&#x27;api/add/&#x27;</span>, views.add, name=<span class="hljs-string">&quot;add&quot;</span>),    path(<span class="hljs-string">&#x27;api/delete/&lt;int:todo_id&gt;&#x27;</span>, views.delete, name=<span class="hljs-string">&quot;delete&quot;</span>),    path(<span class="hljs-string">&#x27;api/update/&lt;int:todo_id&gt;&#x27;</span>, views.update, name=<span class="hljs-string">&quot;update&quot;</span>),]</code></pre></li><li>最後在把我們一開始新增的<code>index.html</code>修改<pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Todo App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.7.0.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;get_all_list()&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-todo&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button btn-add&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> &gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todos&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">let</span> state = &#123;</span><span class="language-javascript">                <span class="hljs-attr">todos</span>: []</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)</span><span class="language-javascript">                    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                        response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                            state = &#123;</span><span class="language-javascript">                                <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;</span><span class="language-javascript">                                    <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,</span><span class="language-javascript">                                    <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,</span><span class="language-javascript">                                    <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span></span><span class="language-javascript">                                &#125;]</span><span class="language-javascript">                            &#125;</span><span class="language-javascript">                        &#125;);</span><span class="language-javascript">                        <span class="hljs-title function_">updateState</span>(state)</span><span class="language-javascript">                    &#125;)</span><span class="language-javascript">                &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-comment">// 更新 state</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;</span><span class="language-javascript">                state = newState;</span><span class="language-javascript">                <span class="hljs-title function_">render</span>()</span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// state =&gt; UI</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">                <span class="hljs-comment">// 先把畫面清空</span></span><span class="language-javascript">                $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();</span><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)</span><span class="language-javascript">                $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(</span><span class="language-javascript">                <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span></span><span class="language-javascript">                state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><span class="language-javascript">                );</span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// Todo component</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span></span><span class="hljs-string"><span class="language-javascript">                &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span></span><span class="hljs-string"><span class="language-javascript">                    &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                    <span class="hljs-subst">$&#123;Span(&#123;</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                    &#125;)&#125;</span></span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                    <span class="hljs-subst">$&#123;Button(&#123;</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                    &#125;)&#125;</span></span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                    <span class="hljs-subst">$&#123;Button(&#123;</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                        content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span></span><span class="hljs-subst"><span class="hljs-string"><span class="language-javascript">                    &#125;)&#125;</span></span></span><span class="hljs-string"><span class="language-javascript"></span></span><span class="hljs-string"><span class="language-javascript">                &lt;/div&gt;</span></span><span class="hljs-string"><span class="language-javascript">                `</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// Button component</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span></span><span class="hljs-string"><span class="language-javascript">                &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span></span><span class="hljs-string"><span class="language-javascript">                `</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// 新增 todo</span></span><span class="language-javascript">            $(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="language-javascript">                <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();</span><span class="language-javascript">                <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;</span><span class="language-javascript">                $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span><span class="language-javascript">                axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>, </span><span class="language-javascript">                    &#123;</span><span class="language-javascript">                        <span class="hljs-string">&quot;title&quot;</span>: content</span><span class="language-javascript">                    &#125;,</span><span class="language-javascript">                    &#123;</span><span class="language-javascript">                        <span class="hljs-attr">headers</span>: &#123; </span><span class="language-javascript">                        <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,</span><span class="language-javascript">                        &#125;,</span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                )</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                    todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]</span><span class="language-javascript">                    complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    <span class="hljs-comment">// 更新 state</span></span><span class="language-javascript">                    <span class="hljs-title function_">updateState</span>(&#123;</span><span class="language-javascript">                        <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;</span><span class="language-javascript">                            <span class="hljs-attr">id</span>: todo_id,</span><span class="language-javascript">                            <span class="hljs-attr">content</span>: title,</span><span class="language-javascript">                            <span class="hljs-attr">isDone</span>: complete</span><span class="language-javascript">                        &#125;]</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;);</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// 刪除 todo</span></span><span class="language-javascript">            $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><span class="language-javascript">                <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));</span><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                    d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    <span class="hljs-title function_">updateState</span>(&#123;</span><span class="language-javascript">                        <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;);</span><span class="language-javascript">            </span><span class="language-javascript">            <span class="hljs-comment">// 未完成 -&gt; 已完成</span></span><span class="language-javascript">            $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><span class="language-javascript">                <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));</span><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><span class="language-javascript">                    u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    <span class="hljs-title function_">updateState</span>(&#123;</span><span class="language-javascript">                        <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                            <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;</span><span class="language-javascript">                            <span class="hljs-keyword">return</span> &#123;</span><span class="language-javascript">                            ...todo,</span><span class="language-javascript">                            <span class="hljs-attr">isDone</span>: complete</span><span class="language-javascript">                            &#125;</span><span class="language-javascript">                        &#125;)</span><span class="language-javascript">                    &#125;)</span><span class="language-javascript">                &#125;);</span><span class="language-javascript">            &#125;); </span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></li></ol><p>完成以上步驟後下<code>python manage.py runserver</code>就能看到簡單的ToDoList囉～</p><p><img src="/images/2023-10-12Day27.%E9%A6%96%E5%85%88%E5%85%88%E4%BE%86%E7%B0%A1%E5%96%AE%E5%81%9A%E5%80%8BTodolist%E9%A0%81%E9%9D%A2%EF%BD%9E/20162905rK4vgXs1dm.png"></p><p>那整體的介面是從上面那個youtube影片摳過來的，我自己對網頁的設計美感有點差而且CSS苦手ＸＤ<br>而JS則是透過下面那篇文章去修改的，當時想要學習React剛好看到這篇，改完就變成純JS的component和state的用法，收穫頗大！以前都是直接打API拿到Json後把html重組，現在知道了component和state後覺得JS那邊的可讀性變高很多～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>明天就來試試看對這個簡單的ToDoList寫些test吧！</p><p>完整的程式碼在這邊<br><a href="https://github.com/m124578n/IronMan_ToDoList">https://github.com/m124578n/IronMan_ToDoList</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;快要結尾了，稍微喘口氣，來做個簡單的Todolist頁面吧！&lt;br&gt;會參考以下兩篇文章進行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day26. render，終於要render context了！</title>
    <link href="https://m124578n.github.io/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/</id>
    <published>2023-10-10T23:34:49.000Z</published>
    <updated>2023-12-22T08:59:52.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們真的code一步一步的往裡面走了好深，終於是把目標檔名的檔案內容load進來了！接下來回到最開始的地方，好像要開始處理context也是就我們傳給他的ORM囉！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>從昨天的位置接續下去吧！<code>django.template.loader</code></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905E811PXY2hD.png"></p><p>而這邊的template呢，從昨天的探查可以得知是在<code>django.template.backends.django</code>中的Template class</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905JhfeePu2yZ.png"></p><p>先從make_context開始吧！</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/201629057XxgOYPFGk.png"></p><p>那我們render是有帶著request的，所以往下看</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905jGUxSNwGUh.png"></p><p>生出這個RequestContext後，把我們定義的context push進去</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905YZIx7qcZQm.png"></p><p>這邊的push我有點不理解，為什麼這樣寫可以讓東西塞進dict裡面</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/2016290570BKezOHYx.png"></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905RnguTIWEmK.png"></p><p>先接著往下看，畢竟這邊有看到with的magic method用法，說不定等等就懂了～</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905td4h7ct2Dd.png"></p><p>做完context後再由template去render，又往裡面拋了～<br>這邊的template是<code>django.template.base.Template</code></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905hy8PaABbYA.png"></p><p>這邊要開始跳來跳去看code了～<br>找到render_context再找function</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905eclLVhNyyJ.png"></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/201629050Lzi2sNnw7.png"></p><p>又是剛剛那樣的操作，先跳過往下看<code>self._render()</code></p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905XBqRk2jalQ.png"></p><p>這個nodelist是在init時被生出來的，內容為解析我們寫的html元素後存成相關的tag等<br>接著往裡面</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905A9Eq1sH69A.png"></p><p>這邊我還沒有完全釐清是怎麼處理的，但大致可以猜想我們context會在這個nodelist裡面的node中被處理，而處理的過程中就會去connect DB下SQL把資料取回來後生成字串回傳到最前面也就是這邊的content</p><p><img src="/images/2023-10-11Day26.render%EF%BC%8C%E7%B5%82%E6%96%BC%E8%A6%81rendercontext%E4%BA%86%EF%BC%81/20162905K9dYTmKgvh.png"></p><p>然後塞進HttpResponse裡面回傳給middleware～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>需要找個時間好好的再仔細看看compile_nodelist那邊，以及生成的node tag有哪些又分別會觸發什麼！改天再找時間研究吧！明天先換個輕鬆的～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天我們真的code一步一步的往裡面走了好深，終於是把目標檔名的檔案內容load進來了！接下來回到最開始的地方，好像要開始處理context</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day25. render到engine，處理一堆東西～</title>
    <link href="https://m124578n.github.io/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/</id>
    <published>2023-10-09T23:34:30.000Z</published>
    <updated>2023-12-22T08:52:19.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>render裡面的engine究竟是什麼？而當中的get_template又做了什麼事呢？今天就好好的來一層一層往裡面看進去！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>接續昨天的部分</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905ed5K6MgYJv.png"></p><p>往<code>self.find_tamplate()</code>看</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905zGOKCkKnvb.png"></p><p>這邊有又往裡面丟，丟給了loader.get_template()<br>先看看loader是什麼～</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/201629052BZ4yGa7Uz.png"></p><p>loader在init的時候會被賦予</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905i4P4wQqy2Y.png"></p><p>然後get_template_loaders()呢</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905GeQcAq2Qq1.png"></p><p>會去find該loader後import</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905Pcxun2P8Aq.png"></p><p>直接看一下我們這邊使用到的loader是誰～<br>可以看到會是cache loader，往這邊看</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/201629053NqHmoHz5K.png"></p><p>那我們要著重在這邊</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905jWdt5E4Q4X.png"></p><p>再去看父類別的get_template function</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905Az7mfpLMrH.png"></p><p>get_template_sources又會回到子類別</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905qNWYO2jSLb.png"></p><p>yield from 複習複習，<a href="https://zh-blog.logan.tw/2019/03/30/python3-intro-to-yield-from-expr/">文章</a><br>而這邊的loader會是filesystem和app_directories</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905OUfuqfqsBK.png"></p><p>這邊就會根據檔名找到對應的路徑回傳一個Origin物件<br>再回到這邊base.loader.get_template</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905dvX6r70mEU.png"></p><p>來看看get_contents()</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905vHviCDMcIZ.png"></p><p>origin剛剛已知是filesystem的loader</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905J4pbGAVqmZ.png"></p><p>直接把內容load進來<br>而最後也得到content了，再把所丟資訊丟給Template類別</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905yqwGhIn2G0.png"></p><p>而Template在init的時候會去解析該檔案內容</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905MyGz6PNjKg.png"></p><p>這邊就先不深究<br>回到最源頭<code>django.templates.backends.django.get_template</code></p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905UqkJnOerQ2.png"></p><p>在前面一階段</p><p><img src="/images/2023-10-10Day25.render%E5%88%B0engine%EF%BC%8C%E8%99%95%E7%90%86%E4%B8%80%E5%A0%86%E6%9D%B1%E8%A5%BF%EF%BD%9E/20162905E6Z2jj1NX9.png"></p><p>明天我們再從這邊的render接下去</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Template init中最後一步compile_nodelist我沒有去深看，稍微看了一下裡面也是很精彩的code，有興趣的可以嘗試自己追追看～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;render裡面的engine究竟是什麼？而當中的get_template又做了什麼事呢？今天就好好的來一層一層往裡面看進去！&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day24. render～我渲～</title>
    <link href="https://m124578n.github.io/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/</id>
    <published>2023-10-09T02:26:58.000Z</published>
    <updated>2023-12-22T08:39:04.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們看到了print ORM回傳的值，實際上會去觸發到SQL，那正常在使用的情況下又是什麼時候被觸發的呢！？根據debug toolbar和logging可以看到是render的時候被觸發的！那我們就來看看render有什麼特別的吧！</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>在進去看render之前，我們先觀察一下render</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905nq3uJmG0fc.png"></p><p>在vscode中滑鼠一指過去就可以看到相關參數和說明～<br>那我們的todo看其來是對應到context<br>那我們就進去看看吧！</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905rQCuQ7EX3m.png"></p><p>render to string，很淺顯易懂呢！<br>接著看</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905PovzIovvZK.png"></p><p>我們的template_name是字串所以看get</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905YcVouRP4zQ.png"></p><p>會看到他會先去拿engine</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905wSVgHBBXV4.png"></p><p>就來看看engine.all()是什麼東西吧！</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905PQYNeyACEw.png"></p><p>這邊有個for迴圈對self，那看來又是老朋友magic method了～<br>這邊使用到的magic method有兩個</p><h3 id="一個是-iter"><a href="#一個是-iter" class="headerlink" title="一個是__iter__"></a>一個是<code>__iter__</code></h3><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905kIXL4E1Oad.png"></p><p>再看看templates</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905d6Ac3J4t0k.png"></p><p>大致看一下會去讀取settings.py中的TEMPLATES內容，在runserver的時候就讀取然後cache住了</p><h3 id="另一個是-getitem"><a href="#另一個是-getitem" class="headerlink" title="另一個是__getitem__"></a>另一個是<code>__getitem__</code></h3><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905WS8iGBTxCg.png"></p><p>getitem會去把剛剛讀取settings.py的TEMPLATES中的BACKEDN import進來</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905lCftbiLzfb.png"></p><p>那這邊就會是engines list的結果</p><p>我們回到這邊</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905RI7Ax2Z0Tn.png"></p><p>接著要看的就是這個engine的get_template function了～</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905vTmTfaAvZ5.png"></p><p>這邊可以看到又傳給一個engine的get_template function</p><p><img src="/images/2023-10-09Day24.render%EF%BD%9E%E6%88%91%E6%B8%B2%EF%BD%9E/20162905VMgnWxwWjQ.png"></p><p>今天就先到這邊，明天繼續！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>沒想到render裡面延伸下去那麼遠，前面稍微探了探路發現在寫下去會有點多（<del>絕對不是我偷懶</del>），所以明天再繼續看吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天我們看到了print ORM回傳的值，實際上會去觸發到SQL，那正常在使用的情況下又是什麼時候被觸發的呢！？根據debug toolba</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day23. ORM觸發SQL的地方（這邊是print～）</title>
    <link href="https://m124578n.github.io/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/"/>
    <id>https://m124578n.github.io/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/</id>
    <published>2023-10-08T07:30:13.000Z</published>
    <updated>2023-12-22T08:27:40.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天那邊我推測Todo只有在他被動作的時候才會去connect DB，所以真的在被使用的地方照昨天的寫法會是在render的時候！但今天先來看看print</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>首先先稍微驗證一下想法是不是正確的，觸發SQL的是<code>print(todo)</code>，那在python中什麼會被print()觸發呢！？答案是magic method <code>__repr__</code> or <code>__str__</code></p><p>那我們接著來看ORM filter回傳的type是什麼<br><code>&lt;class &#39;django.db.models.query.QuerySet&#39;&gt;</code><br>是這個QueruSet類別，這個我們昨天也有看到，那邊其實我到現在都還沒有很有把握說我懂了…<br>總之跟著這個類別下去找<code>__repr__</code> or <code>__str__</code>這兩個magic method</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905N8YfursOAa.png"></p><p>這邊看到會顯示出data，到表已經從db中拿到data了！<br>所以我們要再根據這個線索看看取得data是透過什麼方式！<br>這邊可以看到他對自己做slice取值<code>self[: REPR_OUTPUT_SIZE + 1]</code><br>而這個動作又會觸發什麼magic method呢！？google一下～<br>找到啦～是<code>__getitem__</code>那我們接著看看他會做什麼～</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905Jsj1jJ56T5.png"></p><p>我們可以知道k是slice物件，所以會流向這邊</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905oQOnlVyg0i.png"></p><p>我這邊看了一下qs.query已經是組好的SQL了，尚未看到他怎麼組出來的～<br>而這邊有一個<code>list(qs)</code>，這個會觸發magic method <code>__iter__</code></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905ythIUszZoD.png"></p><p>在根據上圖的function找</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905Bfw4hXgGMk.png"></p><p>一樣找線索</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905DOaUo8RWaP.png"></p><p>一樣找list的magic method <code>__iter__</code></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905QwGhN8nyYH.png"></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905rc1g7W4f9O.png"></p><p>這邊就不細看了，粗看一下可以看到去執行SQL的地方～<br>先找query，直接print他的type看～<br>是在<code>django.db.models.sql.query.Query</code></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905BT4wpYihVw.png"></p><p>那這邊的connections我們也很熟悉了，他就是<code>DatabaseWrapper</code><br>其中的ops.compiler呢～</p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905M5ua8fjq21.png"></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905VGdjNn5rO6.png"></p><p><img src="/images/2023-10-08Day23.ORM%E8%A7%B8%E7%99%BCSQL%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%88%E9%80%99%E9%82%8A%E6%98%AFprint%EF%BD%9E%EF%BC%89/20162905kpsWqaQekO.png"></p><p>這下就找到compiler本人囉！<br>最後到compiler中的execute_sql就可以看到他與db連接的地方囉～</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>就這樣挖著挖著就挖到與db連接的地方了，有很多python magic method如果沒接觸過python的可能會看不太習慣，不過還沒看到怎麼組出SQL了的地方就是了，是有看到類似的地方，看了一眼我就先當作沒看到了XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天那邊我推測Todo只有在他被動作的時候才會去connect DB，所以真的在被使用的地方照昨天的寫法會是在render的時候！但今天先來</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Day22. 今天來稍微看一下ORM的原始碼！</title>
    <link href="https://m124578n.github.io/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/</id>
    <published>2023-10-07T08:22:46.000Z</published>
    <updated>2023-12-22T08:22:15.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們看到了ORM是怎麼使用的，那麼今天就稍微來看一下ORM實際是怎麼做的吧，走到哪看到哪～</p><h2 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h2><p>我們現在有的線索就只有ORM的用法～</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905IWodg17n7P.png"></p><p>直接點進去呢，會跑到這裡～</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905sh8mp80urR.png"></p><p>這邊是.pyi的檔案，讓vscode能夠知道該class類別有什麼function<br>那他實際是什麼類別呢，我們直接像上圖一樣print出來看看～<br><code>&lt;class &#39;django.db.models.manager.Manager&#39;&gt;</code><br>再依照這個類別的位置下去看看！</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905P3BAiJtokw.png"></p><p>我們這邊先回頭一下，去找找看這個Manager是怎麼被生出來的～<br>這邊就要回頭去看models.py裡面我們Todo的父類別models.Model</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905g5fgzAzTIf.png"></p><p>這邊可以看到metaclass，這也是python中很特別的物件，我也沒有把握自己可以講好，就請大家去看看<a href="https://dboyliao.medium.com/%E6%B7%BA%E8%AB%87-python-metaclass-dfacf24d6dd5">Dboy的文章</a>吧！<br>然後python還有一個特別的magic method</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905OFDHoGRSiu.png"></p><p>其實這個從字面上的意思也能看出來，當一個物件被new出來時會觸發的method，也就是說會在__init__之前被觸發～<br>之後呢直接ctrl+F找關鍵字objects</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905Cb5OssHmiC.png"></p><p>這邊就會看到Manager的物件囉～<br>在接著看BaseManager.from_queryset()</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905FDYIitrGFC.png"></p><p>這邊是python class的另一種寫法，Dboy也有說明！！<br>然後把queryset的function都塞到上面那個新的class裡面</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905z0vSzrhXFl.png"></p><p>所以最後我們就能在QuerySet這個class裡面找到我們使用的function filter啦！！</p><p><img src="/images/2023-10-07Day22.%E4%BB%8A%E5%A4%A9%E4%BE%86%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8BORM%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%A2%BC%EF%BC%81/20162905asYzlNoI10.png"></p><p>我試著再往裡面查看，但在裡面就看不太懂在寫什麼了QQ</p><p>但我弄著弄著發現一個有趣的點</p><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_todolist</span>(<span class="hljs-params">request, <span class="hljs-built_in">id</span></span>):    todo = Todo.objects.select_related(<span class="hljs-string">&quot;owner&quot;</span>).<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;person_todolist.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo&quot;</span>: todo&#125;)</code></pre><p>和</p><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_todolist</span>(<span class="hljs-params">request, <span class="hljs-built_in">id</span></span>):    todo = Todo.objects.select_related(<span class="hljs-string">&quot;owner&quot;</span>).<span class="hljs-built_in">filter</span>(owner=<span class="hljs-built_in">id</span>)    <span class="hljs-built_in">print</span>(todo)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;person_todolist.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo&quot;</span>: todo&#125;)</code></pre><p>這兩個的差異可以透過我們的logging在console中看到<br>分別為<br>無print</p><pre><code class="hljs bash">(0.001) SELECT <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_data&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> FROM <span class="hljs-string">&quot;django_session&quot;</span> WHERE (<span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> &gt; <span class="hljs-string">&#x27;2023-10-07 08:16:37.529260&#x27;</span> AND <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span> = <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>) LIMIT 21; args=(<span class="hljs-string">&#x27;2023-10-07 08:16:37.529260&#x27;</span>, <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_login&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;first_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_staff&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_active&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;date_joined&quot;</span> FROM <span class="hljs-string">&quot;auth_user&quot;</span> WHERE <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span> = 1 LIMIT 21; args=(1,); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;add_date&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;sex&quot;</span> FROM <span class="hljs-string">&quot;todo_list&quot;</span> INNER JOIN <span class="hljs-string">&quot;person&quot;</span> ON (<span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>) WHERE <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = 1; args=(1,); <span class="hljs-built_in">alias</span>=default</code></pre><p>和有print</p><pre><code class="hljs bash">(0.001) SELECT <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;add_date&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;sex&quot;</span> FROM <span class="hljs-string">&quot;todo_list&quot;</span> INNER JOIN <span class="hljs-string">&quot;person&quot;</span> ON (<span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>) WHERE <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = 1 LIMIT 21; args=(1,); <span class="hljs-built_in">alias</span>=default&lt;QuerySet [&lt;Todo: Todo object (1)&gt;, &lt;Todo: Todo object (2)&gt;, &lt;Todo: Todo object (3)&gt;]&gt;(0.000) SELECT <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_data&quot;</span>, <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> FROM <span class="hljs-string">&quot;django_session&quot;</span> WHERE (<span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;expire_date&quot;</span> &gt; <span class="hljs-string">&#x27;2023-10-07 08:15:55.474015&#x27;</span> AND <span class="hljs-string">&quot;django_session&quot;</span>.<span class="hljs-string">&quot;session_key&quot;</span> = <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>) LIMIT 21; args=(<span class="hljs-string">&#x27;2023-10-07 08:15:55.474015&#x27;</span>, <span class="hljs-string">&#x27;hyj5kk8n038t2ofx6owx45fzva85u36z&#x27;</span>); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_login&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_superuser&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;first_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;last_name&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_staff&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;is_active&quot;</span>, <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;date_joined&quot;</span> FROM <span class="hljs-string">&quot;auth_user&quot;</span> WHERE <span class="hljs-string">&quot;auth_user&quot;</span>.<span class="hljs-string">&quot;id&quot;</span> = 1 LIMIT 21; args=(1,); <span class="hljs-built_in">alias</span>=default(0.000) SELECT <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;add_date&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;sex&quot;</span> FROM <span class="hljs-string">&quot;todo_list&quot;</span> INNER JOIN <span class="hljs-string">&quot;person&quot;</span> ON (<span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = <span class="hljs-string">&quot;person&quot;</span>.<span class="hljs-string">&quot;id&quot;</span>) WHERE <span class="hljs-string">&quot;todo_list&quot;</span>.<span class="hljs-string">&quot;owner_id&quot;</span> = 1; args=(1,); <span class="hljs-built_in">alias</span>=default</code></pre><p>我們可以從上面兩個logging的差異中看到，如果有print的話，django會先行去db下SQL，而沒有的話則是在render的時候才下SQL，看來明天的功課就是看看render裡面有什麼奧秘了！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不得不說ORM這個框架真的是非常巨大，能力尚且不足完全無法想像這樣的架構是怎麼規劃和實作出來的！希望不久的將來自己也能手刻一套出來試試看！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天我們看到了ORM是怎麼使用的，那麼今天就稍微來看一下ORM實際是怎麼做的吧，走到哪看到哪～&lt;/p&gt;
&lt;h2 id=&quot;正題&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/categories/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="15th鐵人賽" scheme="https://m124578n.github.io/tags/15th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="source code" scheme="https://m124578n.github.io/tags/source-code/"/>
    
    <category term="web framework" scheme="https://m124578n.github.io/tags/web-framework/"/>
    
  </entry>
  
</feed>
