<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shun Chih&#39;s blog</title>
  
  
  <link href="https://m124578n.github.io/atom.xml" rel="self"/>
  
  <link href="https://m124578n.github.io/"/>
  <updated>2023-12-20T06:07:46.759Z</updated>
  <id>https://m124578n.github.io/</id>
  
  <author>
    <name>Shun Chih</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>稻荷，清水，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-03T05:00:00.000Z</published>
    <updated>2023-12-20T06:07:46.759Z</updated>
    
    <content type="html"><![CDATA[<p>我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！</p><h2 id="日本之第七天"><a href="#日本之第七天" class="headerlink" title="日本之第七天"></a>日本之第七天</h2><p>第一站是伏見稻荷神社，一早就搭火車過來，人還超級多的！光是走出車站就花了一些時間呢～這邊也是我此趟日本行最期待的景點之一！京都的空氣真的是有夠新鮮有夠好聞的，在那邊鼻子都不太會過敏呢～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_IS2l1v3yP_dFkwoKQlVNbw.webp"><br><em>我好胖XD</em></p><p>接著就往裡面走著！！開始看到一大堆鳥居，剛好朋友幫我科普了一下這些鳥居是怎麼來的～原來只要有固定的捐錢就能蓋自己的鳥居，然後鳥居就會保佑公司可以發大財～鳥居的後面都會有什麼公司在什麼時間點蓋起來的～未來有機會我也想要蓋一個自己的鳥居呢，哈哈</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eR2pNhdqLPo6LY74XgYqEA.webp"></p><p>接著大概還在路口處不遠的地方，我們看到了一條小小的道路，其他地方人都超多的但就是這條久久才有人往上爬，於是乎在好奇心的驅使下踏上了一條有點硬的道路XD</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LIX6n5oe1To2QHHMl8REqg.webp"></p><p>這條路走進去真的超級漂亮的，而且真的都沒什麼人～竹林再加上早上的晨曦眼睛大滿足後，再吸一口山林間的空氣，真的是非常舒適，也讓我開始喜歡爬山與大自然接觸的感覺～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_R83jG9L-W5XuUejP3V6-UA.webp"></p><p>因為我們走的是不尋常的路，應該是啦不然怎麼那麼少人XD，路途中還看到了一些貓咪和住宅，住在深山裡面感覺應該挺不方便的～途中有一位澳洲人，因為我太累了在中間休息時，想說搭話一下練習我的破英文XD，現在只記得他是澳洲人而已哈哈，稍微尬聊一下，他就接著往上爬了，沒錯我還在休息XD，他跟我們說山頂見囉～see you later～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_isARRMpks4YMXNqOAxH7bA.webp"></p><p>說實在的有些地方真的有夠陡的，雖然說身體好像變輕鬆了，但依舊是拖著在大阪走了五六天的身體來爬山XD，脫離小路之後就開始看的人群了～接著往上爬到山頂的那一刻那個瞬間那個moment，真的是身心舒暢很有成就感，也愛上了爬山的那種感覺～而且今天的天氣真的超好，山上既不熱又不冷，還吹著徐徐的微風，是個超級適合爬山的天氣！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_0TRF5K0ijImxvHieMOVd5g.webp"></p><p>之後我們就開始往下走，此時也接近中午的時間，肚子也開始餓了～大概再往下走一點的地方，看到有在賣吃的就直接進去吃了～吃了鍋燒烏龍麵，不知道為什麼這碗烏龍麵格外的美味！吃完出來後看到了一覽京都的美景～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_tBJHPEj95XAk9BBwksMhEQ.webp"></p><p>稻荷山下次來要走走正規的路上去看看～感覺有一些地方是沒有繞道的～</p><p>爬完山後大概是下午的時間，接著準備前往清水寺，但坐火車過去好像有點麻煩，於是我們決定做計程車過去，原本以為會很貴，一直有個既定印象說日本計程車超級貴，但其實實際上搭起來三個人分不會有貴的感覺，重點是很舒服哈哈哈，一上車司機的口音有點重，我多聽了幾次才了解他想要說什麼～大概是說清水寺載上去的話，那邊塞車很嚴重會影響他的工作，所以要我們決定是在商店街下車呢？還是去一條秘徑走路五分鐘過去～當下我覺得很酷所以就跟他說五分鐘的那條！於是乎就被載到山上啦！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Z1-nAinf-MawkGeWW6s85Q.webp"></p><p>滿炫的！第一次來清水寺竟然不是從正門進去XD，果然走沒多久就看到清水寺本寺啦！可以看到這麼遠的地方看也可以看到上面一大堆人～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9NBWhR0N08p6WI8ubkisCg.webp"></p><p>有點可惜的是，十一月初去的依舊是綠油油的一大片～下次希望可以看到紅通通的楓葉，我想那場面一定很壯觀！在這邊看著夕陽也是一個很優的體驗～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_LJZifWRIITNoElzAxCka9w.webp"></p><p>接著晚餐去吃了一間很特別的拉麵店，他是一個set的那種，有餐前酒，前菜，主食，甜點～整體來說不錯吃但依舊沒有打敗辰拉麵，不過他店的包廂超級有日劇的感覺的XD，很像是來談生意的那種～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-mOQJVRuXsUyzlNIIpTsOw.webp"></p><p>接著前往錦市場裡面的天滿宮～路上經過了八坂神社，然後走進去花見小路看看，路上還真的看到藝伎，親眼見到的衝擊力頗大的！錦市場逛完後想說去一間居酒屋看看（雖然我不喝酒～）然後吃吃鳥串燒，結果幾乎人都滿滿的～最後找到一間我覺得很好吃的串燒！不過好像太好吃了我完全沒拍照XD，吃完串燒後我們決定沿著鴨川回區住宿的地方，</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_PDZohp3l5L24pLzajrOZ6Q.webp"></p><p>很舒服的一個地方～如果跟女朋友來晚上在這邊散散步聊聊天肯定非常的浪漫XD可惜我是單身狗QQ，下次來一定要跟女友來！</p><hr><h2 id="日本之第八天"><a href="#日本之第八天" class="headerlink" title="日本之第八天"></a>日本之第八天</h2><p>今天的天氣預報說會下雨，果然也在下雨，所以我們本日行程都排在市內居多～第一站前往鐵道博物館～這邊其實超出我的期待不少，有好多可以互動的東西，也有好多可以細部的看看火車內部構造的裝置，甚至可以去按按那些平常不太能按的緊急按鈕XD</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_WHfZjGFEpckp6RUe70q4UA.webp"></p><p>還可以玩玩怎麼樣駕駛火車～頂樓還可以直接看到京都車站的火車進出站的樣子！不得不說日本火車的班次好像有點多XD</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_FpiTgAXDpYVTMTti6wlqwQ.webp"></p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_saqmsjzytS_DkwUpWHfchw.webp"></p><p>最後發現好像有個特別的蒸汽火車可以搭過來，只不過票賣完了XD，可惜了～那個蒸汽火車真的很壯觀！鳴笛的時候可以感受到大地都在震動！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_m7k6CeWGis_Fp_YTrEGUWg.webp"></p><p>之後我們前往錦市場，昨天只有去天滿宮其他地方都沒什麼逛而且時間也晚了大部分都收攤了～再次前往錦市場好好的看看有什麼可以吃～然後就看到我想吃的店！這個蝦子我真的超級喜歡的！那個緊實又飽滿的蝦肉，簡單的鹽調味，可以吃出蝦子本身的鮮甜和彈牙的口感，真的是太讚了！！！！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_E46GYJm9mKBkCxijGOpsqQ.webp"></p><p>之後就是逛街的行程啦，不得不說錦市場真的頗大的，而且有滿多滿特別的店～錦市場逛完後我們就前往京都塔啦～</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_-ggyH9SLIaoRJQWm2rcD4w.webp"></p><p>京都塔上面是挺壯觀的，不過不怎麼適合拍著，怎麼拍都紅紅或藍藍的XD，接著吃個拉麵就準備回旅館休息了～走路回家會經過東本願寺，晚上看也是很有威嚴的一個寺廟！</p><p><img src="/blog/images/2023-12-03%E7%A8%BB%E8%8D%B7%EF%BC%8C%E6%B8%85%E6%B0%B4%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_nd1JOLZPxtcCEhBtwk8ERg.webp"></p><p>這個時候我在神社和寺廟中已經買了很多御守和抽了很多籤XD，而這個也變成我的興趣的感覺了，隔天也是去了很多的神社和寺廟，可以說是每個地方都買了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在大阪那邊有休息了一天，所以到京都的時候其實整個人是新的感覺，感覺又可以每天這樣走個3萬步以上！&lt;/p&gt;
&lt;h2 id=&quot;日本之第七天&quot;&gt;&lt;a href=&quot;#日本之第七天&quot; class=&quot;headerlink&quot; title=&quot;日本之第七天&quot;&gt;&lt;/a&gt;日本之第七天&lt;/h2&gt;</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>日記みたいなもの</title>
    <link href="https://m124578n.github.io/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/"/>
    <id>https://m124578n.github.io/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/</id>
    <published>2023-12-03T02:00:00.000Z</published>
    <updated>2023-12-18T07:11:56.213Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp"></p><p>最近はいろいろな事を試しています、よりいい状態とか、いい健康とか、自分が理想的な人になるために、たくさんのことを慣れるような、習慣をつけるようなことを努力しています。何でこういう考えが生み出すのか、それは主な原因はやはり付き合うの相手が欲しいからだ！その相手が見つかる前には、僕は自分が付き合いたい人にならないければならない！そこで、三つの点を考えました！</p><p>その一、運動</p><p>いい健康、いい体、いい体力、いいスタイル、というとそれほ運動ですね、運動の習慣をつけると定期的に身体の中の悪い、汚いなどな必要がないものを排除ができる、それで夜が眠れやすいし、起きた後もだるさもないし、体力も上がるし、全部いい事ばかり、やらない理由はとこにもないのだ！</p><p>その二、飲食</p><p>現代人は栄養バランスがとても悪いと気がする、特に自分のこと、以前は週に二、三回、それ以上かも、いっぱいの揚げ物とか加工製品を食べていた、それは絶対太るだろう、だから今は、なるべく野菜とかきのことか原型な食べ物を食べるつもり〜</p><p>その三、人</p><p>やば、人と人の接触が多いれば多いほどがいいのだ、理想的な相手が会うためにはたくさんの人に話す、知り合うのが、見つかりやすいと思っているのだ、それに人と話すのも奥が深い学問だ、話題とか、返事とかのも練習が必要だと思っている！</p><p>最後は自分がいい人になるように頑張ろう！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-12-03%E6%97%A5%E8%A8%98%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%81%AE/1_65JywErW_CuZIxm_8YqhFA.webp&quot;&gt;</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="japanese" scheme="https://m124578n.github.io/tags/japanese/"/>
    
  </entry>
  
  <entry>
    <title>歷史，城堡，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-02T04:00:00.000Z</published>
    <updated>2023-12-18T07:10:19.595Z</updated>
    
    <content type="html"><![CDATA[<p>到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD</p><h2 id="日本之第四天"><a href="#日本之第四天" class="headerlink" title="日本之第四天"></a>日本之第四天</h2><p>早上起來搭地鐵前往大阪城！只要知道搭到哪一站就好了，其餘跟著外國人走準沒錯XD，大家的目的地都是大阪城～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4bq1chfZAhAi-iov83Dj-Q.webp"><br><em>一出車站就能看見的～</em></p><p>一走進去大阪城的區域，可以很明顯地感覺到整體的氛圍都不一樣了，都市中有一個那麼大又廣的區域，然後大量的自然融合在歷史的建築中，我超喜歡這種雰囲気的！</p><p>接著往前走一點就可以看到在最外圍的護城河，我第一眼真的是被震驚到，那滂薄重大莊嚴的感覺（明明只是在最外圍XD，不過這照片真的真的沒辦法傳達到現場感受到的那種強大又壯觀的氣勢，下次來大阪我肯定會再來一次把周圍沒逛到的仔細的繞過一遍！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_xTZWNWimlBst8gkXf6Xhwg.webp"><br><em>可以看到天氣不是很好ＱＱ</em></p><p>走進去！！我自己很喜歡拍這種由地上往前看的照片，我也不知道為什麼XD</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VVXKAemCObjS6iZxDs-v4g.webp"></p><p>走進去會經過兩扇超大的門，想想如果以前打仗要突破這些城門想必是非常不容易的事情！接著再繼續走會看到一些建築物，然後是神社！有點後悔沒有去看看這個神社～之後在京都的時候真的是愛上了神社，好喜歡裡面的御守！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Wtd9FeCA9lW0CcCgLSV0Nw.webp"></p><p>再來是內圈的護城河，護城河有兩圈！！可以從橋的這個門看到大阪城本城啦！！！整個氣勢都不一樣跟周圍的建築物比起來很明顯的感覺出來一種高貴奢華感～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_DT1BP9jsDFw5BYyBiHR2xQ.webp"></p><p>我當時有一個想法，我是敵人跑到這邊我也已經累了XD，這邊離一開始那邊其實有一點距離了～</p><p>接著當然是大阪城本城啦！！！當下看到真的是非常的壯觀，不只城堡本體，就連下面那些地基的石頭的覺得很驚豔，古時候到底是怎麼把這樣壯觀龐大的城堡給建立起來的～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_wwUbkicoHr-7F_ab21sQNw.webp"></p><p>進去裡面有很多樓層，頂樓可以感受到彷彿城主在觀看自己的領地那種感覺，不過周圍的景觀綠色出去一點就是現代的高樓大廈了～以前的話估計不可能有比大阪城還高的建築物吧！</p><p>依序往下走可以看到大阪城的歷史，和一些日本的歷史人物的一生，我自己是對日本歷史不太熟悉啦，不過裡面講故事的方式我覺得非常的特別！懂日文的話非常推薦進去看看，還有些樓層會有一些歷史的古物，武士刀、當時的書卷、裝備等等的，還有大阪城的更早以前的縮小版模型，我好喜歡看那些模型！！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_P_Ymz8t6Qr3ISAOF_9JoDA.webp"></p><p>接著呢本來打算去做環湖的船，但沒事先做功課，好多人呀！，要等大概兩個小時，而且中間開始飄雨了，就沒有搭船了～又留下了一個遺憾呢～</p><p>最後一張跟大阪城說再見的照片～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eCPXSn02oUMjafCswj9xAw.webp"></p><p>我真的好喜歡這樣的歷史建築（特別是日本的）～</p><p>接著搭地鐵前往下一站今昔館～時間已到中午先吃個飯吧！到天神橋筋，本來想吃的拉麵店沒開，只好在商店街找一間囉！</p><p>好吃的醬油拉麵！！但心目中的第一名（辰拉麵）沒有被更新掉就是了</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_MOWZtOkLBNYHA40ySEJ3Dg.webp"></p><p>接著前往今昔館～今昔館裡面有以前的歷史建築，像是他們的商店還是住宅等等的，還有我最喜歡的縮小模型！！裡面也是拍了很多照逛了個過癮，只不過身體開始覺得累了，肯定是因為外面在下雨！！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Xc925K98toPQg8uRAgcF8A.webp"></p><p>之後前往梅田逛街，雖然天氣不好，但在大阪走路依然感覺很舒服～不愧是日本之行人的天堂！！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H-Iqq5qD0gSYEpBYBn6xvQ.webp"></p><p>就這樣結束了，充滿歷史文化最後轉變到現在都市的一天～</p><hr><h2 id="日本之第五天"><a href="#日本之第五天" class="headerlink" title="日本之第五天"></a>日本之第五天</h2><p>這天很短，因為我覺得該讓身體休息一下準備京都的神社之旅！！所以早上在天下茶屋附近繞了一圈，看看這邊居民的生活，也看看大阪比較外圍的景色～悠閒的走在路上，漫無目的的看看日本的房子也是不錯的體驗！中間還路過一間看起來很像新開的超市～買了唐揚雞，摁～我果然喜歡這種軟軟的唐揚雞，這跟我之前大學在高雄的一間唐揚雞很像，我非常喜歡！！雖然吃完之後又跑去全家買了全家炸雞XD，依舊忘了拍照哈哈哈</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_TNy6Q2kS9Pnxu7sriRBvkg.webp"></p><p>接著就回住宿的地方睡了個午覺，後面覺得其實這樣中間差一天輕鬆的休息也不錯呢～(明明就是體力太差了XD，回去之後要好好鍛練了～)</p><hr><h2 id="日本之第六天"><a href="#日本之第六天" class="headerlink" title="日本之第六天"></a>日本之第六天</h2><p>今天是前往京都的日子，不過在那之前我們決定去大阪車站逛一下街～這邊的現代化都市感就特別的重了，雖然第四天有來過一次，不過下雨跟晴天的感覺差挺多的～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_1YCZGv5DY8kKPqpfiI-BHQ.webp"></p><p>又去逛了寶可夢中心、JUMP、卡普空等等的周邊～我真的好喜歡百變怪！！想要蒐集百變怪的周邊了～要不是只有I14的手機殼，不然我就買了手機殼回家再買I15（Ｘ</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_VAQzRZ_MzA_z1HAP7_XXOQ.webp"><br><em>你看！他在對你笑耶！！</em></p><p>接著中午去吃了一間吃到飽，螃蟹就算了，吃到飽種類不多，整體都挺好吃的，最令我驚豔的是炒青菜！！好久沒吃到炒青菜了而且還超好吃，吃了好幾盤呢～而且我還怕自己吃太飽想睡覺哈哈，因為下午還有其他地方要逛，吃太飽也不會想走路只想躺平～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_Y-0dexAlFhMNhJyzya_ctw.webp"><br><em>好吃！只不過爐烤豬排有點失望ＱＱ跟我想的不一樣～</em></p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_KmOZmndV_0GSDfDtD4DpvQ.webp"></p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_D1veRzeIf2s0c_09dDPnCg.webp"></p><p>日本真的是怎麼拍都好看，每次回顧都覺得照片拍太少了～這夕陽也是挺好看的！！</p><p>接著就前往京都了～搭個火車人好多，大概40分鐘就到了京都～</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_esjxHxlcy0RF1AcF8Rns4w.webp"></p><p>旅程過了一半了，突然覺得時間漸漸的加速了～好希望再來十天XD</p><p>不過京都的路走起來就沒有大阪舒服～人行道有些整修的痕跡～</p><p>晚餐吃やよい軒定食就是好吃！白飯就是讚！</p><p><img src="/blog/images/2023-12-02%E6%AD%B7%E5%8F%B2%EF%BC%8C%E5%9F%8E%E5%A0%A1%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_jmBvsIWgIxnlGaevXe6Uig.webp"></p><p>如果台灣有像這樣的定食且價格合理的話我肯定吃爆！還有個前提是白飯要跟日本的一樣好吃XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;到了第四天，我這不精實的身體也差不多適應了這幾天走下來的感覺，漸漸的身體的疲勞感減輕了一點～不過！下雨天整體的感覺就比較沒那麼好了～所以還是很累XD&lt;/p&gt;
&lt;h2 id=&quot;日本之第四天&quot;&gt;&lt;a href=&quot;#日本之第四天&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="osaka" scheme="https://m124578n.github.io/tags/osaka/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
    <category term="kyoto" scheme="https://m124578n.github.io/tags/kyoto/"/>
    
  </entry>
  
  <entry>
    <title>首次，出國，日本行！！</title>
    <link href="https://m124578n.github.io/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-12-02T02:00:00.000Z</published>
    <updated>2023-12-18T06:49:08.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="わくわく"><a href="#わくわく" class="headerlink" title="わくわく"></a>わくわく</h2><p>從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的嗎（X</p><p>走在日本的街道，聽著周圍都是日文的環境，大口吸著新鮮的空氣，品嚐最道地的日本拉麵，就在今年2023&#x2F;11終於實現了我做了25年的夢！<br>至今回來了兩個禮拜還是意猶未盡，甚至想直接住在那邊了XD</p><p>久久沒寫文章了，自從上次參加完ithome的鐵人賽後就沒再寫過了～連續三十天真的是有夠硬，好佩服那些每天都能輸出的前輩！好了回歸正題，今天就來好好的回顧我在日本十天的自由行～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_eKQh7KF3N-dGvma2bUxYYw.webp"><br><em>桃園機場，人生首次離開台灣！</em></p><p>在去日本的前兩個禮拜，我突然重感冒！喉嚨痛到不行外加腳趾甲溝炎，我真的是非常擔心我真的能去日本嗎，機票都買了住宿都訂好了，甚至是行程都大致排好了，我期待了三四個月就要這樣泡湯了嗎！！！</p><p>而且看了好幾位醫生和醫院喉嚨疼痛感依舊讓我晚上都沒睡好，隔天起床沒精神就算了還很痛，我只好向公司一直請假，請了整整一個禮拜～基本上都躺在家裡完全不想動！</p><p>但就這樣過了一個禮拜後，奇蹟似的突然痊癒了，這時離去日本已經剩下5、6天，感謝我的身體和意志力讓我可以康復～雖然因為感冒的關係體力貌似消耗的極大，導致剛到日本的前幾天其實都累累的，但我那興奮的又悸動的心情好像讓我腎上腺素爆發，基本上精神都是超過200%的！撐起來！</p><hr><h2 id="日本之第一天"><a href="#日本之第一天" class="headerlink" title="日本之第一天"></a>日本之第一天</h2><p>到了住宿的地方，放完行李（我只有帶一個小背包，其餘都打算直接在日本買，哈哈哈）就走朋友走在晚上八點的日本街道，思考著要吃什麼來開啟這趟日本之旅呢！就這樣走到了一間看起來非常日式餐館的店，少少的幾個座位都是靠著吧台，老闆就在面前調理，看著既熟悉又陌生的日文菜單，跟老闆注文了拉麵跟焼きめし，原本以為不會太大份，結果來了個大的，吃到非常飽哈哈，就這樣聽著旁邊熟客跟老闆的互動，吃完了來日本的第一餐，有種既熟悉又陌生的味道，但真的很感動！</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_b6Mr-Z-9FDMKhaSLZVRfzw.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_ct864Ox3blu_Auq-opSeyQ.webp"></p><p>吃飽後，跑到了附近的超市購買了一些生活用品和明天的早餐，我買了一個梅子飯糰，接著呢！走到我非常期待的便利商店，全家！沒錯！我要吃全家炸雞了ファミチキ，我只能說超級無敵好吃，以前都聽著大家說好吃好吃，一直很好奇到底有多好吃，結果真的出乎意料的好吃，光是看著聞著那眼淚都快從嘴角流出來了XD，不過太快吃完忘記拍照了～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_2NFkPqtcCSxKh35yGz5Q6A.webp"><br><em>只有拍全家，食物已消失XD</em></p><p>就這樣踏入日本的第一天結束了，實際上只有在外面走2、3個小時而已吧，期待明天的行程！！</p><hr><h2 id="日本之第二天"><a href="#日本之第二天" class="headerlink" title="日本之第二天"></a>日本之第二天</h2><p>前進黑門市場！本來以為會吃很多東西，但可能昨天那個晚餐吃太飽了，再加上早上吃了一個飯糰（梅子飯糰也是有夠好吃），有挺多想試試看的食物但就吃一點而已，稍微可惜了一些些，不過有吃到和牛串，感想是我果然不喜歡吃牛XD，不過如果有和牛燒肉或牛排我應該還是會想嘗試看看，畢竟先試了再說～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HdajNFINc3kXtr5HXuMAhg.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_HvvNNBPW8xA83KXdd8n12Q.webp"></p><p>逛完黑門市場後就一路走到道頓崛，不得不說日本真的非常的行人友善，走起來特別的舒服，街景也特別的優美柔和且整體的融合感看了就是舒暢，說到道頓崛，我就是個觀光客肯定要來看グリコ，到這邊的時候其實還算早，就一大堆人好恐怖！</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_bzrwVPPCSMG_kR_IjKVUZQ.webp"></p><p>在這邊逛了唐吉，拍了好多張照片，午餐吃了炸豬排，日本的白飯真的是非常的好吃，來了兩天我真的可以為了吃白飯搬到日本去XD，不過我們這次行程真的都只有排大地標，其餘真的是很隨性，都是到了現場才決定要做什麼要逛什麼～有種到處探索的感覺我很喜歡～</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_9pexDXd1RLMvAm0AEKFhHA.webp"></p><p>吃完豬排後，前往下個地方～下個地方是朋友說他喜歡的明星剛好來大阪辦活動，於是我們就決定去看看，中間路過了アメリカ村是一個滿特別的地方，整體的氛圍感不像在日本但又有日式的感覺，一如往常的人依舊非常多XD，還有一台特別的車播放著音樂在這周邊徘徊</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_GNjDlD9nnup759VZnh0MBQ.webp"></p><p>之後走到了一處比較像住宅區的地方，有一個大公園裡面很多家長帶著小孩子在玩耍～而我們的目的地就在這個公園的旁邊～這邊我都忘記拍照了，太可惜了QQ</p><p>走著走著很快地就來到晚上了，真的是繞了很多地方，可是我沒有習慣觀光客模式，都一直忘記拍照，太可惡了！！在前往難波車站的路上看到了一台大牛（我也想要一台XD）然後還有一棟很漂亮的建築，雖然我到現在還不知道他是什麼XD</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_gFs5P9ifQ6zYC6UqovR0IA.webp"></p><p>晚餐呢就在住處附近吃了美式的家庭餐廳，我自己是覺得還不錯，特別是漢堡排很好吃！不過這樣吃下來，發覺日本不容易吃到熟的蔬菜，都是生菜居多～這兩天已經感覺到蔬菜含量不足了XD</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_4nYzzhAPqnPcBE2hiPdoMQ.webp"></p><p>就這樣結束了第二天在日本的旅遊～晚上回到家，買了一些貼腳的，希望明天可以再繼續走一整天XD，已經幾年沒運動的我，旅遊的前幾天身體一直在跟我哭訴的感覺，哈哈，只不過都被我這興奮的感覺和意志力給壓過去了，晚上還是得好好照顧一下他們，多貼幾片，明天還要靠你們呢！</p><hr><h2 id="日本之第三天"><a href="#日本之第三天" class="headerlink" title="日本之第三天"></a>日本之第三天</h2><p>一早就跑去日本橋，逛逛動漫的周邊等等的，不過我好像已經過了這個年紀了，我是沒有特別有興趣，只是覺得看看還行，不過要買的話很容易被現實層面的自己給制止，畢竟買了也沒地方放呀！</p><p>但中午是我滿期待的女僕咖啡廳，從來沒踏入過女僕咖啡廳，一直很想體驗看看那種感覺會尷尬的氛圍XD，沒錯學日文也是為了好好的跟女僕聊天（X</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_EP8DZnfMBc8k8mVg5W1H6Q.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_iGeFKg0o1Cg_wzOKJRbQYw.webp"></p><p>整體的感覺我還滿喜歡的，而且有種對自己的日文認可的那種感覺，可以好好的跟女僕聊聊天，可能也是我第一次用日文跟日本人聊天吧！只能說好險再來之前有跟朋友辦每個禮拜一次的日文讀書會，練習說說日文，不然我畢業後到現在完全沒用過真的是都快忘記怎麼講了～下次來日本旅遊，肯定會想再來看看的！</p><p>日本橋逛了很多間店，只不過我都偏走馬看花，又忘記開啟觀光客模式瘋狂拍照了，殘念！</p><p>接著就前往了心齋橋，那邊有寶可夢中心和吉卜力等等的店面，這邊真的挺好逛了，有好多相關的周邊，但本來打算要吃敘敘苑，沒訂位又不餓就沒吃了，小缺憾～不過心齋橋的人也是爆多，可以看到韓國，台灣，和日本其他地方來的觀光客，歐美反而比較少在這邊看到，不過這樣的商店街真的挺不錯的，最後來看看大龍貓和不要吃太胖還有無臉男XD</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_H0_3Zv26qYbqefTXtY2cVw.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_lVqbpygbXXphhgj-91EnCw.webp"></p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_rOjg2uHcmr3yY3UdM7FujQ.webp"></p><p>繞著繞著就接近晚上了，心齋橋走回難波車站會經過道頓崛又拍了晚上版的XD，人更多了！</p><p><img src="/blog/images/2023-12-02%E9%A6%96%E6%AC%A1%EF%BC%8C%E5%87%BA%E5%9C%8B%EF%BC%8C%E6%97%A5%E6%9C%AC%E8%A1%8C%EF%BC%81%EF%BC%81/1_crIo2zjxvuhmwx9Rmtg_xA.webp"></p><p>第三天大概就這樣結束了，腳又酸又痛的XD趕緊回家多貼幾片！</p><p>日本的前三天，就這樣過完了，基本上都是觀光的地方，啊我就觀光客當然去觀光景點XD，有幾點比較可惜的是沒有去大阪知名的神社逛逛，不過這也是去京都後才有的感想XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;わくわく&quot;&gt;&lt;a href=&quot;#わくわく&quot; class=&quot;headerlink&quot; title=&quot;わくわく&quot;&gt;&lt;/a&gt;わくわく&lt;/h2&gt;&lt;p&gt;從小就嚮往著去日本旅遊，學了四年的日文，卻因為疫情的關係畢業沒辦法去日本，我那麼認真學日文不就是為了到日本賞櫻賞楓賞日本妹的</summary>
      
    
    
    
    <category term="旅遊" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/"/>
    
    <category term="日本" scheme="https://m124578n.github.io/categories/%E6%97%85%E9%81%8A/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="travel" scheme="https://m124578n.github.io/tags/travel/"/>
    
    <category term="osaka" scheme="https://m124578n.github.io/tags/osaka/"/>
    
    <category term="japan" scheme="https://m124578n.github.io/tags/japan/"/>
    
  </entry>
  
  <entry>
    <title>Django x Javascript 不同寫法part2. 更新State的方式進行JS渲染</title>
    <link href="https://m124578n.github.io/2023-08-27Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%20%20%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/"/>
    <id>https://m124578n.github.io/2023-08-27Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%20%20%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/</id>
    <published>2023-08-27T12:00:00.000Z</published>
    <updated>2023-12-18T06:29:42.709Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-08-27DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%B2%E8%A1%8CJS%E6%B8%B2%E6%9F%93/0_Yd6S5EqUbIdDYODn.webp"><br><em>image <a href="https://unsplash.com/photos/a-macbook-with-lines-of-code-on-its-screen-on-a-busy-desk-m_HRfLhgABo">source</a></em></p><p>上次的文章中是我以前常用的寫法，而今天要說的是我前陣子看到這篇文章發現的新大陸</p><h3 id="week-21-前端框架-先別急著學-React-HackMD"><a href="#week-21-前端框架-先別急著學-React-HackMD" class="headerlink" title="[week 21] 前端框架 - 先別急著學 React - HackMD"></a><a href="https://hackmd.io/@Heidi-Liu/note-fe302-review?source=post_page-----4e0621202043--------------------------------">[week 21] 前端框架 - 先別急著學 React - HackMD</a></h3><p>我覺得挺有趣的就試著把上次那版改成這種方式下去實作！</p><p>Django的程式碼跟上週一樣所以今天不會有python的code，就請參考上篇文章！！</p><p>那這次我是使用axios跟fetch大同小異，只是需要而外安裝（引入）也有使用到一些JQuery，話不多說先上code吧～</p><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.7.0.js&quot;</span> integrity=<span class="hljs-string">&quot;sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="hljs-comment">//....</span><span class="hljs-keyword">let</span> state = &#123;    <span class="hljs-attr">todos</span>: []&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;            response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                state = &#123;                    <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                        <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,                        <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,                        <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span>                    &#125;]                &#125;            &#125;)            <span class="hljs-title function_">updateState</span>(state)        &#125;)    &#125;<span class="hljs-comment">// 更新 state</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;    state = newState;    <span class="hljs-title function_">render</span>()&#125;<span class="hljs-comment">// state =&gt; UI</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 先把畫面清空</span>    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(    <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>    state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)    );&#125;<span class="hljs-comment">// Todo component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span><span class="hljs-string">        &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Span(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// Span component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span>&#125;<span class="hljs-comment">// Button component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// 新增 todo</span>$(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();    <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;    $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>,         &#123;            <span class="hljs-string">&quot;title&quot;</span>: content        &#125;,        &#123;            <span class="hljs-attr">headers</span>: &#123;             <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,            &#125;,        &#125;    )    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-comment">// 更新 state</span>        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                <span class="hljs-attr">id</span>: todo_id,                <span class="hljs-attr">content</span>: title,                <span class="hljs-attr">isDone</span>: complete            &#125;]        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 刪除 todo</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 未完成 &lt;-&gt; 已完成</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;                <span class="hljs-keyword">return</span> &#123;                ...todo,                <span class="hljs-attr">isDone</span>: complete                &#125;            &#125;)        &#125;)    &#125;)&#125;)</code></pre><p>跟上次相比是不是很不一樣，我自己覺得這樣子的寫法更加的直觀和易讀易懂！</p><p>那我們一樣拆開來看，首先我們要生成Todo的component</p><pre><code class="hljs javascript"><span class="hljs-comment">// Todo component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Todo</span>(<span class="hljs-params">&#123;id, content, isDone&#125;</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;ui segment todo&quot; data-id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;</span><span class="hljs-string">        &lt;p class=&quot;ui big header&quot;&gt; <span class="hljs-subst">$&#123;id&#125;</span> | <span class="hljs-subst">$&#123;content&#125;</span> &lt;/p&gt;</span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Span(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: isDone ? <span class="hljs-string">&#x27;ui green label&#x27;</span> : <span class="hljs-string">&#x27;ui gray label&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: isDone ? <span class="hljs-string">&#x27;Complete&#x27;</span> : <span class="hljs-string">&#x27;Not Completed&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;blue btn-update&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Update&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">        <span class="hljs-subst">$&#123;Button(&#123;</span></span><span class="hljs-subst"><span class="hljs-string">            className: <span class="hljs-string">&#x27;red btn-delete&#x27;</span>,</span></span><span class="hljs-subst"><span class="hljs-string">            content: <span class="hljs-string">&#x27;Delete&#x27;</span></span></span><span class="hljs-subst"><span class="hljs-string">        &#125;)&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;<span class="hljs-comment">// Span component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Span</span>(<span class="hljs-params">props</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span class=&quot;<span class="hljs-subst">$&#123;props.className&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/span&gt;`</span>&#125;<span class="hljs-comment">// Button component</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;a class=&quot;ui <span class="hljs-subst">$&#123;props.className&#125;</span> button&quot;&gt;<span class="hljs-subst">$&#123;props.content&#125;</span>&lt;/a&gt;</span><span class="hljs-string">    `</span>&#125;</code></pre><p>我的Todo component裡面還包括了一個Span component和兩個Button component那他們會依據帶進去的參數而有不同的樣式</p><p>接著再到get_all_list()</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> state = &#123;    <span class="hljs-attr">todos</span>: []&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/&quot;</span>)        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;            response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                state = &#123;                    <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                        <span class="hljs-attr">id</span>: todo.<span class="hljs-property">id</span>,                        <span class="hljs-attr">content</span>: todo.<span class="hljs-property">title</span>,                        <span class="hljs-attr">isDone</span>: todo.<span class="hljs-property">complete</span>                    &#125;]                &#125;            &#125;)            <span class="hljs-title function_">updateState</span>(state)        &#125;)    &#125;<span class="hljs-comment">// 更新 state</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params">newState</span>) &#123;    state = newState;    <span class="hljs-title function_">render</span>()&#125;<span class="hljs-comment">// state =&gt; UI</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 先把畫面清空</span>    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">empty</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">todos</span>)    $(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">append</span>(    <span class="hljs-comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>    state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> <span class="hljs-title class_">Todo</span>(todo)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)    )&#125;</code></pre><p>一開始的狀態先給一個空array，在get_all_list()用axios去打api拿取現在所有的Todo datas，拿到datas後在一個一個把他們塞進去todos array裡面，最後再交由updateState去把現在的state更新掉然後render，render()的工作很簡單會先把現在html上所有的todos元素清空，然後在一筆一筆塞進去～</p><p>再來我們來看看新增</p><pre><code class="hljs javascript"><span class="hljs-comment">// 新增 todo</span>$(<span class="hljs-string">&#x27;.btn-add&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> content = $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>();    <span class="hljs-keyword">if</span> (!content) <span class="hljs-keyword">return</span>;    $(<span class="hljs-string">&#x27;.input-todo&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>);    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>,         &#123;            <span class="hljs-string">&quot;title&quot;</span>: content        &#125;,        &#123;            <span class="hljs-attr">headers</span>: &#123;               <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,            &#125;,        &#125;    )    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        todo_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        title = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_title&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-comment">// 更新 state</span>        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: [...state.<span class="hljs-property">todos</span>, &#123;                <span class="hljs-attr">id</span>: todo_id,                <span class="hljs-attr">content</span>: title,                <span class="hljs-attr">isDone</span>: complete            &#125;]        &#125;)    &#125;)&#125;)</code></pre><p>很簡單的去判斷button有沒有沒click，然後取input的值丟axios，那response會回傳該todo的data，就把他updateState一次就OK了！</p><p>接下來的修改和刪除也是同樣的概念，打api後response丟給updateState就完事啦～</p><pre><code class="hljs javascript"><span class="hljs-comment">// 刪除 todo</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-delete&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        d_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span> = state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== d_id)        &#125;)    &#125;)&#125;)<span class="hljs-comment">// 未完成 &lt;-&gt; 已完成</span>$(<span class="hljs-string">&#x27;.todos&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.btn-update&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-title class_">Number</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.todo&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>));    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+id)    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;        u_id = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;todo_id&quot;</span>]        complete = response.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;complete&quot;</span>]        <span class="hljs-title function_">updateState</span>(&#123;            <span class="hljs-attr">todos</span>: state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> !== u_id) <span class="hljs-keyword">return</span> todo;                <span class="hljs-keyword">return</span> &#123;                ...todo,                <span class="hljs-attr">isDone</span>: complete                &#125;            &#125;)        &#125;)    &#125;)&#125;)</code></pre><p>刪除就是把存在state裡的todo id移除掉，而修改則是把該todo id抓出來改變他的isDone屬性。</p><p>至此就大功告成啦，對Javascript不熟悉的我經過這個練習大概可以知道state component的概念！下次可能就是直接用react改寫看看囉！</p><p>軟體和程式的世界真的很有趣，可以用不同的做法達到相同的目的，而且瞬息萬變，可能明天又能有新的東西可以學習，想想就興奮呢！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-08-27DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part2.%E6%9B%B4%E6%96%B0State%E7%9A%84%E6%96%B9%E5%</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="學習" scheme="https://m124578n.github.io/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="javascript" scheme="https://m124578n.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Django x Javascript 不同寫法part1.使用Django原生template</title>
    <link href="https://m124578n.github.io/2023-08-20Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/"/>
    <id>https://m124578n.github.io/2023-08-20Django%20x%20Javascript%20%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/</id>
    <published>2023-08-20T12:00:00.000Z</published>
    <updated>2023-12-18T06:29:50.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-08-20DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftemplate%E5%92%8C%E6%88%91%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84Javascript%E5%AF%AB%E6%B3%95/0_MmikwY_ANgH8Xj99.webp"><br><em>image <a href="https://unsplash.com/photos/black-flat-screen-computer-monitor-SyvsTmuuZyM">source</a></em></p><p>前陣子看到了這個</p><h3 id="Youtube影片"><a href="#Youtube影片" class="headerlink" title="Youtube影片"></a><a href="https://www.youtube.com/watch?v=3vfum74ggHE&list=PLrgX5bzJJljqMbq7msQX4nzTtV3kqZOST&ab_channel=PatrickLoeber">Youtube影片</a></h3><p>決定花了一點時間去研究練習Django網站的各種寫法，其中包括原生template、fetch、axios、react，後面其實都在寫Javascript居多，Python改成API後就沒事了XD。</p><p>照著影片把最基本的Django template版本先做出來大概會長這樣</p><pre><code class="hljs python"><span class="hljs-comment"># view.py</span>...<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>, &#123;<span class="hljs-string">&quot;todo_list&quot;</span>: todos&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;index&quot;</span>)</code></pre><p>首頁＋增刪修，且任何動作都直接導回index做重新查詢</p><pre><code class="hljs html">// base.html...<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/add&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>            &#123;% csrf_token %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        &#123;% for todo in todo_list %&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui segment&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui big header&quot;</span>&gt;</span>&#123;&#123; todo.id &#125;&#125; | &#123;&#123; todo.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>            &#123;% if todo.complete == False %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui gray label&quot;</span>&gt;</span>Not Complete<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            &#123;% else %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui green label&quot;</span>&gt;</span>Completed<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            &#123;% endif %&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/update/&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui red button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/delete/&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        &#123;% endfor %&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>很簡單且基礎的Jinja2模板，但使用上面的程式碼寫出來的網站不管做什麼事都會重新整理一遍（導回index），現在ajax已經是基本要求了所以開改！</p><p>首先先把Django改成API形式吧！這邊就沒用restful framework直接回json</p><pre><code class="hljs python"><span class="hljs-comment"># view.py</span>...<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;base.html&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">api</span>(<span class="hljs-params">request</span>):    todos = Todo.objects.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-built_in">list</span>(todos.values())&#125;)<span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):    body = request.body.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    body = json.loads(body)    title = body.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    todo = Todo(title=title)    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete, <span class="hljs-string">&quot;todo_title&quot;</span>: todo.title&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.complete = <span class="hljs-keyword">not</span> todo.complete    todo.save()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id, <span class="hljs-string">&quot;complete&quot;</span>: todo.complete&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">request, todo_id</span>):    todo = Todo.objects.get(<span class="hljs-built_in">id</span>=todo_id)    todo.delete()    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;todo_id&quot;</span>: todo_id&#125;)</code></pre><p>再來就是改base.html</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;get_all_list()&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui center aligned header&quot;</span>&gt;</span>To Do App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Todo Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter Todo...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">add()</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = form_sumbit</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">form_sumbit</span>(<span class="hljs-params">e</span>)&#123;</span><span class="language-javascript">                the_event = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span></span><span class="language-javascript">                code = the_event.<span class="hljs-property">keyCode</span> || the_event.<span class="hljs-property">which</span> || the_event.<span class="hljs-property">charCode</span></span><span class="language-javascript">                <span class="hljs-keyword">if</span> (code == <span class="hljs-number">13</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-title function_">add</span>()</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><span class="language-javascript">                &#125;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/&quot;</span>)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJosn</span>)&#123;</span><span class="language-javascript">                    data = myJosn[<span class="hljs-string">&quot;data&quot;</span>]</span><span class="language-javascript">                    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;</span><span class="language-javascript">                        html = <span class="hljs-string">&quot;&quot;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27; | &#x27;</span>+todo.<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span></span><span class="language-javascript">                        <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">complete</span>)&#123;</span><span class="language-javascript">                            html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui green label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Completed&lt;/span&gt;&#x27;</span></span><span class="language-javascript">                        &#125;</span><span class="language-javascript">                        <span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">                            html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span></span><span class="language-javascript">                        &#125;</span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span></span><span class="language-javascript">                        html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span></span><span class="language-javascript">                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html</span><span class="language-javascript">                    &#125;);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                title = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#title&quot;</span>).<span class="hljs-property">value</span></span><span class="language-javascript">                data = &#123;</span><span class="language-javascript">                    <span class="hljs-string">&quot;title&quot;</span>: title</span><span class="language-javascript">                &#125;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/add/&quot;</span>, &#123;</span><span class="language-javascript">                    <span class="hljs-attr">headers</span>: &#123; </span><span class="language-javascript">                        <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;csrf_token&#125;&#125;&quot;</span>,</span><span class="language-javascript">                        <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/4.0 MDN Example&quot;</span>,</span><span class="language-javascript">                        <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>, </span><span class="language-javascript">                    &#125;,</span><span class="language-javascript">                    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>, </span><span class="language-javascript">                    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>)&#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = myJson[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    title = myJson[<span class="hljs-string">&quot;todo_title&quot;</span>]</span><span class="language-javascript">                    html = <span class="hljs-string">&quot;&quot;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo_id+<span class="hljs-string">&#x27; | &#x27;</span>+title+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span></span><span class="language-javascript">                    html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo_id+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span></span><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">update_</span>(<span class="hljs-params">todo_id</span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/update/&quot;</span>+todo_id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>) &#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    complete = myJson[<span class="hljs-string">&quot;complete&quot;</span>]</span><span class="language-javascript">                    ctodo_id = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#todo&quot;</span>+todo_id)</span><span class="language-javascript">                    <span class="hljs-keyword">if</span> (complete)&#123;</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;gray&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;green&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Completed&quot;</span></span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                    <span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;green&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;gray&quot;</span>)</span><span class="language-javascript">                        ctodo_id.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Not Complete&quot;</span></span><span class="language-javascript">                    &#125;</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">delete_</span>(<span class="hljs-params">todo_id</span>)&#123;</span><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/delete/&quot;</span>+todo_id)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJson</span>) &#123;</span><span class="language-javascript">                    todo_id = myJson[<span class="hljs-string">&quot;todo_id&quot;</span>]</span><span class="language-javascript">                    this_node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all_todo&quot;</span>+id)</span><span class="language-javascript">                    this_node.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(this_node)</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>WOW變超多的，我們一個一個拆開來看吧</p><p>首先先來看看get_all_list做了什麼</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">get_all_list</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/&quot;</span>)    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>)&#123;        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()    &#125;)    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">myJosn</span>)&#123;        data = myJosn[<span class="hljs-string">&quot;data&quot;</span>]        data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;            html = <span class="hljs-string">&quot;&quot;</span>            html += <span class="hljs-string">&#x27;&lt;div id=&quot;all_todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt; &lt;div class=&quot;ui segment&quot;&gt; &#x27;</span>            html += <span class="hljs-string">&#x27;&lt;p class=&quot;ui big header&quot;&gt;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27; | &#x27;</span>+todo.<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/p&gt; &#x27;</span>            <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">complete</span>)&#123;                html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui green label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Completed&lt;/span&gt;&#x27;</span>            &#125;            <span class="hljs-keyword">else</span>&#123;                html += <span class="hljs-string">&#x27;&lt;span class=&quot;ui gray label&quot; id=&quot;todo&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;&gt;Not Complete&lt;/span&gt; &#x27;</span>            &#125;            html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui blue button&quot; onclick=update_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Update&lt;/a&gt; &#x27;</span>            html += <span class="hljs-string">&#x27;&lt;a class=&quot;ui red button&quot; onclick=delete_(&quot;&#x27;</span>+todo.<span class="hljs-property">id</span>+<span class="hljs-string">&#x27;&quot;)&gt;Delete&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&#x27;</span>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#all&quot;</span>).<span class="hljs-property">innerHTML</span> += html        &#125;);    &#125;)&#125;</code></pre><p>fetch把過去後回來的response要先過一層json才能使用，而這個就是把原先\</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-08-20DjangoxJavascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1.%E4%BD%BF%E7%94%A8Django%E5%8E%9F%E7%94%9Ftem</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="學習" scheme="https://m124578n.github.io/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="javascript" scheme="https://m124578n.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Line-Bot串接Line-Notify實現跨群組轉播訊息～</title>
    <link href="https://m124578n.github.io/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/</id>
    <published>2023-07-23T12:00:00.000Z</published>
    <updated>2023-12-15T09:08:31.492Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/0_f8lsWRDjU_jcsc7-.webp"></p><p>我對自己提了一個需求，我需要把一個Line群組的訊息轉發到另一個Line群組，大概要做一個月，就覺得每天這樣手動傳太麻煩了，於是乎我決定做一個Line-Bot來幫我處理這件事吧。</p><h2 id="首先先研究了Line-Bot要怎麼接收訊息於是google"><a href="#首先先研究了Line-Bot要怎麼接收訊息於是google" class="headerlink" title="首先先研究了Line-Bot要怎麼接收訊息於是google"></a>首先先研究了Line-Bot要怎麼接收訊息於是google</h2><h2 id="LINE-BOT-教學-Python"><a href="#LINE-BOT-教學-Python" class="headerlink" title="LINE BOT 教學 ( Python )"></a><a href="https://steam.oxxostudio.tw/category/python/example/line-bot.html?source=post_page-----c0acfed7d9f6--------------------------------">LINE BOT 教學 ( Python )</a></h2><p>這篇大致上有完整的基礎教學，開始抄功課吧！！</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> config<span class="hljs-keyword">from</span> linebot <span class="hljs-keyword">import</span> LineBotApi, WebhookHandler<span class="hljs-keyword">from</span> linebot.exceptions <span class="hljs-keyword">import</span> InvalidSignatureError<span class="hljs-keyword">from</span> linebot.models <span class="hljs-keyword">import</span> MessageEvent, TextMessage, TextSendMessageapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):    body = request.get_data(as_text=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        json_data = json.loads(body)  <span class="hljs-comment"># json 格式化訊息內容</span>        access_token = config.CHANNEL_ACCESS_TOKEN        secret = config.CHANNEL_SECRET        line_bot_api = LineBotApi(access_token)  <span class="hljs-comment"># 確認 token 是否正確</span>        handler = WebhookHandler(secret)  <span class="hljs-comment"># 確認 secret 是否正確</span>        signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]  <span class="hljs-comment"># 加入回傳的 headers</span>        handler.handle(body, signature)  <span class="hljs-comment"># 綁定訊息回傳的相關資訊</span>        token = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;replyToken&#x27;</span>]  <span class="hljs-comment"># 取得回傳訊息的 Token</span>        message_type = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]  <span class="hljs-comment"># 取得 LINe 收到的訊息類型</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;text&#x27;</span>:            msg = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;text&#x27;</span>]  <span class="hljs-comment"># 取得 LINE 收到的文字訊息</span>            line_bot_api.reply_message(tk,TextSendMessage(msg)) <span class="hljs-comment"># 這邊會回覆傳進來的訊息</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;image&#x27;</span>:            msg_id = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]            message_content = line_bot_api.get_message_content(msg_id)  <span class="hljs-comment"># Line的圖片要透過ID去找</span>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fd:                fd.write(message_content.content)  <span class="hljs-comment"># 這邊把圖片存下來</span>    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(body)  <span class="hljs-comment"># 如果發生錯誤，印出收到的內容</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span></code></pre><p>這邊只是簡單的測試Line-Bot能不能順利地接受文字和圖片，程式碼的部分上面是這樣，在來要去Line Developer設定機器人取得上面兩個參數：</p><ul><li>Channel_Access_Token</li><li>Channel_Secret</li></ul><p>首先先進入</p><h2 id="LINE-Developers"><a href="#LINE-Developers" class="headerlink" title="LINE Developers"></a><a href="https://developers.line.biz/zh-hant/?source=post_page-----c0acfed7d9f6--------------------------------">LINE Developers</a></h2><p>然後去點先new channel<br>再點選Messaging API</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_nilYbCP_aFa5cnxSXFXk0g.webp"></p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_ianpFH1X4dVDa3khk4FQFA.webp"></p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_mr4Zb9T8PSH7d9yqoIk7vg.webp"></p><p>把該填的資料填一填就會獲得一個機器人囉～<br>而在機器人的Basic Setting中可以找到Channel Secret<br>然後在Messaging API 可以加機器人好友以及找到Channel Access Token</p><p>完成上述的步驟把那兩個參數加上去後就完成了啦（（還早還早<br>上面那些步驟弄完了，還差一台Server去把我的機器人部署上去並且要給一個https的網址丟給Line-Bot的Webhook這樣才算完成～</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_1StBjniv5ErlIExt9SbVCg.webp"></p><p>然後我就想去找個免費的平台用！低成本製作能不花錢則不花錢！<br>於是我找到了fly.io</p><h2 id="fly-io"><a href="#fly-io" class="headerlink" title="fly.io"></a><a href="https://fly.io/?source=post_page-----c0acfed7d9f6--------------------------------">fly.io</a></h2><p>fly.io有提供一些免費的空間，詳細就請自行觀看免費方案。<br>由於我是寫Python所以用google搜尋 fly io python找到了</p><h2 id="Run-a-Python-App"><a href="#Run-a-Python-App" class="headerlink" title="Run a Python App"></a><a href="https://fly.io/docs/languages-and-frameworks/python/?source=post_page-----c0acfed7d9f6--------------------------------">Run a Python App</a></h2><p>趕緊拿來改寫，改寫完後在使用fly.io部署的步驟就完成啦！！<br>fly.io在使用前記得要安裝唷～<br>然後照著上面的步驟使用：</p><ul><li>flyctl launch</li><li>flyctl deploy</li><li>更新則使用 flyctl deploy — update-only</li></ul><p>基本上上述就可以完成一個只會回覆訊息的Line-Bot機器人囉！！</p><p>然而我的需求不只是要一個只會回覆訊息的機器人<br>（誰會需要這樣的機器人XD）<br>我還需要讓這個機器人幫我轉傳訊息！<br>於是找到了Line-Notify～</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/0_BM2LYZ-jhhPamJ9N.webp"></p><p>Line-Notify，其實簡單的說就是打Line的API就可能傳訊息！<br>以Python來說就是打requests請求，上code</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_message</span>(<span class="hljs-params">msg</span>):    token = config.TOKEN    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: msg&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data)</code></pre><p>而token怎麼來去Line-Notify登錄一個服務吧</p><h2 id="LINE-Notify"><a href="#LINE-Notify" class="headerlink" title="LINE Notify"></a><a href="https://notify-bot.line.me/zh_TW/?source=post_page-----c0acfed7d9f6--------------------------------">LINE Notify</a></h2><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_EQbNadwe3tYiSw9im1VB6A.webp"></p><p>那下面那個Callback URL當然就是填入Line-Bot的Webhook也就是你個Server的所在處囉～</p><p>登錄完服務就來註冊權杖囉～</p><p><img src="/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%A8%8A%E6%81%AF%EF%BD%9E/1_Pbti7K4tgWXxSurP8zqzBg.webp"></p><p>權杖註冊就會給你一個Token，把這個Token丟到剛剛的程式碼中就能傳了！</p><p>完整的程式碼如下：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> config<span class="hljs-keyword">from</span> linebot <span class="hljs-keyword">import</span> LineBotApi, WebhookHandler<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> linebot.exceptions <span class="hljs-keyword">import</span> InvalidSignatureErrorapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):    body = request.get_data(as_text=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        json_data = json.loads(body)  <span class="hljs-comment"># json 格式化訊息內容</span>        access_token = config.CHANNEL_ACCESS_TOKEN        secret = config.CHANNEL_SECRET        line_bot_api = LineBotApi(access_token)  <span class="hljs-comment"># 確認 token 是否正確</span>        handler = WebhookHandler(secret)  <span class="hljs-comment"># 確認 secret 是否正確</span>        signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]  <span class="hljs-comment"># 加入回傳的 headers</span>        handler.handle(body, signature)  <span class="hljs-comment"># 綁定訊息回傳的相關資訊</span>        token = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;replyToken&#x27;</span>]  <span class="hljs-comment"># 取得回傳訊息的 Token</span>        message_type = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]  <span class="hljs-comment"># 取得 LINe 收到的訊息類型</span>        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;text&#x27;</span>:            msg = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;text&#x27;</span>]  <span class="hljs-comment"># 取得 LINE 收到的文字訊息</span>            line_notify_message(msg)        <span class="hljs-keyword">if</span> message_type == <span class="hljs-string">&#x27;image&#x27;</span>:            msg_id = json_data[<span class="hljs-string">&#x27;events&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]            message_content = line_bot_api.get_message_content(msg_id)            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fd:  <span class="hljs-comment"># /workspace/&#123;msg_id&#125;.jpg</span>                fd.write(message_content.content)            line_notify_image(msg_id)    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(body)  <span class="hljs-comment"># 如果發生錯誤，印出收到的內容</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_message</span>(<span class="hljs-params">msg</span>):    token = config.TOKEN    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: msg&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data)<span class="hljs-keyword">def</span> <span class="hljs-title function_">line_notify_image</span>(<span class="hljs-params">msg_id</span>):    token = config.TOKEN    <span class="hljs-comment"># 要發送的訊息</span>    message = <span class="hljs-string">&#x27;這是用 Python 發送的訊息與圖片&#x27;</span>    <span class="hljs-comment"># HTTP 標頭參數與資料</span>    headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token&#125;    data = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: message&#125;    <span class="hljs-comment"># 要傳送的圖片檔案</span>    image = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;/workspace/<span class="hljs-subst">&#123;msg_id&#125;</span>.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)    files = &#123;<span class="hljs-string">&#x27;imageFile&#x27;</span>: image&#125;    <span class="hljs-comment"># 以 requests 發送 POST 請求</span>    requests.post(<span class="hljs-string">&quot;https://notify-api.line.me/api/notify&quot;</span>,                  headers=headers, data=data, files=files)</code></pre><p>因為是簡單的服務，程式碼方面我就沒那麼多要求了～請大家多見諒～</p><p>以上就是今天的簡單Line-Bot串Line-Notify介紹以及實作～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-07-23Line-Bot%E4%B8%B2%E6%8E%A5Line-Notify%E5%AF%A6%E7%8F%BE%E8%B7%A8%E7%BE%A4%E7%B5%84%E8%BD%89%E6%92%AD%E8%</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="flask" scheme="https://m124578n.github.io/tags/flask/"/>
    
    <category term="學習" scheme="https://m124578n.github.io/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="Line Bot" scheme="https://m124578n.github.io/tags/Line-Bot/"/>
    
    <category term="Line Notify" scheme="https://m124578n.github.io/tags/Line-Notify/"/>
    
    <category term="fly.io" scheme="https://m124578n.github.io/tags/fly-io/"/>
    
  </entry>
  
  <entry>
    <title>【閱讀心得】原子習慣</title>
    <link href="https://m124578n.github.io/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/"/>
    <id>https://m124578n.github.io/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/</id>
    <published>2023-07-09T12:00:00.000Z</published>
    <updated>2023-12-15T08:44:31.553Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/1_fxhtD2eXKMQt6FMBp-1zlg.webp"></p><h2 id="契機"><a href="#契機" class="headerlink" title="契機"></a>契機</h2><p>有不少人推薦了這本書，而我大概聽了友人分享兩三個月直到最近才買來看，而之所以會突然想看是因為，2023&#x2F;06~07這幾個禮拜一直在思考著自己追求的是什麼，想要的又是什麼，有沒有具體的路徑，或是明確的目標。而在迷惘的過程中就想到了“原子習慣”，於是興沖沖的趕緊去買來，並快速地看過一遍，從中其實發現了好幾個自己身處過的情境是符合書中的章節，而書中又整理出一個完整的脈絡。</p><h2 id="習慣"><a href="#習慣" class="headerlink" title="習慣"></a>習慣</h2><p>人類，從小就開始會產生很多習慣，好習慣、壞習慣、下意識的習慣、刻意培養的習慣。而我們就是活在習慣之中。</p><p>小時後回家第一件事是打開電腦上線打遊戲，這也是一個習慣，我出門一定要帶雨傘，這也是一個習慣，我刷牙會從左邊開始刷，這也是一個習慣。</p><p>習慣只是讓大腦進入一個節能模式，因為大腦是懶惰的，能節能下來的能量正是我們應該好好利用的，用在學習、用在上班、用在解決問題、用在認識新朋友，而當沒有好好的利用這些能量，就如同前面所說的大腦是懶惰的，人也是懶惰的，這些能量就白白的浪費掉了。</p><p>而當你有想要培養新的“好習慣”，大腦又會開始發懶，去執行你既有的習慣，而非探索未知領域，在初期可能可以靠著意志力去支撐，但又能維持多久呢？</p><p>此時你可能會開始嘗試很多做法，又或是乾脆遵循著大腦的習慣，而“原子習慣”這本書呢，就提供了一套實際有用且可以運行方法，讓你該變習慣過上你想要的生活。</p><h2 id="複利"><a href="#複利" class="headerlink" title="複利"></a>複利</h2><p>可能會比較有機會在股票市場上面聽到這個詞，但書中有提到讓習慣變成“複利”，這個概念讓我產生非常多的想法，並且只要持續就能產生更多價值。</p><p>從小地方開始慢慢培養起自己的習慣，時間久了，累積起來的將會成為自信的來源。</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>書中提到了許多我嘗試過但失敗的原因以及應該要如何改善，看完對自己以前一直模糊不清的感受有著更明確的方法以及信念，包括：</p><ul><li>“身份認同”的改變</li><li>明確的“講出來”會驅使你行動</li><li>建立習慣的四大步驟</li><li>移除習慣的四大反步驟</li></ul><p>都明明白白的列在了書上，而“你”需要做的事，就是拿起書中提到的方法以及重點，然後一步一步的實現，Just do it！相信就會改變！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-07-09%E3%80%90%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97%E3%80%91%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/1_fxhtD2eXKMQ</summary>
      
    
    
    
    <category term="讀書心得" scheme="https://m124578n.github.io/categories/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="閱讀" scheme="https://m124578n.github.io/tags/%E9%96%B1%E8%AE%80/"/>
    
    <category term="原子習慣" scheme="https://m124578n.github.io/tags/%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/"/>
    
  </entry>
  
  <entry>
    <title>半年來個自我檢視（反省）～</title>
    <link href="https://m124578n.github.io/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/"/>
    <id>https://m124578n.github.io/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/</id>
    <published>2023-07-02T12:00:00.000Z</published>
    <updated>2023-12-15T08:45:14.532Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/0_coDlzsKO8kICe-9e.webp"><br><em>image <a href="https://unsplash.com/photos/a-calendar-with-red-push-buttons-pinned-to-it-bwOAixLG0uc">source</a></em></p><p>昨天2023&#x2F;7&#x2F;1是我轉職成工程師的一週年紀念日，工作後才知道工程師不只是單單的會寫程式就好，還需要有溝通的能力、架構的規劃能力、以及自我學習的能力，更何況我現在還是一個程式都沒有寫得很好的程度。</p><p>剛開始工作的時候覺得公司給的任務好像也沒什麼困難的，就沒有多想的工作工作做了半年到2022年底，當時的我覺得過去半年好像沒什麼長進感受不到自己真的有成為工程師，而在2023年初加入<a href="https://www.youtube.com/@waterball-software-academy">水球軟體學院</a>認識了各式各樣的工程師才發覺自己離“工程師”這個角色的距離還有一大段，而我前半年學到的充其量只能當作一個“會寫程式的普通人”，也有聽到別人分享『<strong>達克效應</strong>』原來我正在站愚昧的山頂，視野範圍擴大後才發現會寫程式這件事的範圍作用只在自己的公司。</p><p><img src="/blog/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%BC%89%EF%BD%9E/1_80Jkmo-O2V6w98nQzYDGjw.webp"><br><em>image <a href="https://georgech3.medium.com/%E6%84%9A%E6%98%A7%E4%B9%8B%E5%B7%94-%E7%B5%95%E6%9C%9B%E4%B9%8B%E8%B0%B7-%E9%81%94%E5%85%8B%E6%95%88%E6%87%89-dk-effect-%E7%9A%84%E7%BE%8E%E9%BA%97%E9%8C%AF%E8%AA%A4-%E5%B0%8D%E7%84%A1%E7%9F%A5%E7%9A%84%E7%84%A1%E6%B3%95%E8%AA%8D%E7%9F%A5-a05b95ccb8a0">source</a></em></p><p>而當時我覺得把自己的時間全部投入水球軟體學院這一個地方，我想在這邊獲得的目標有：</p><ol><li>學會&#x2F;學習怎麼寫程式</li><li>了解除了程式還需要什麼</li><li>確認自己之前的知識是否正確</li><li>找到提升薪水的最短路徑</li><li>認識更多人累積人脈</li></ol><p>這應該是年初剛加進來一、兩個禮拜的目標，而相對應的解法依序為：</p><ol><li>報名<a href="https://waterballsa.tw/design-pattern">水球的軟體精通之旅</a></li><li>多看看學院裡的人都在聊什麼</li><li>參與大家的話題或活動</li><li>目前尚未找到（瓶頸中）</li><li>主動分享自己的故事&#x2F;想法，take之前要先give</li></ol><p>不得不說這半年的收穫確實是很豐富的，有時候我會試著回朔自己的記憶，如果回朔的時間特別久就代表我在那段時期是有在往前進的，反之則停留或倒退。</p><hr><p>到現在這個時間點，我整理整理自己感受的困擾&#x2F;壓抑&#x2F;force：</p><ol><li>我的惰性</li><li>時間管理</li><li>找不到我想要的工作</li><li>缺乏明確的道路</li></ol><p>目前想到相對應的解決法依序為：</p><ol><li>建立自我獎勵機制，讓自己不要想太多做就對了</li><li>多列一些短期目標，並結合獎勵機制創造回饋感</li><li>履歷邊投邊修，結合上面短期目標做一些自己想要的作品</li><li>總之先把 <a href="https://roadmap.sh/python">python&#x2F;backend roadmap</a><br>往上看自己就是一個不夠自律的人，且隨著工作覺得越來越無聊，要想辦法拉回當初寫程式的初衷，做出新奇有趣的東西，且無意間的幫助到一些人。</li></ol><p>所以，我要在這邊列下我下半年要達成的目標：</p><ol><li>找到一份自己喜歡的工作</li><li>水球的課程如期完成</li><li>做出一個拉麵地圖的網站</li><li>日文的複習以及英文的學習</li><li>文章輸出練習</li><li>言語&#x2F;文字轉換程式的速度及完整度</li></ol><p>大概以上，這篇文章最重要的一個目的就是在我迷惘之時，時時刻刻的提醒我要達成夢想就必須往前，哪怕不小心繞了個彎路也要把上面這些達成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-07-02%E5%8D%8A%E5%B9%B4%E4%BE%86%E5%80%8B%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%EF%BC%88%E5%8F%8D%E7%9C%81%EF%B</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="自我檢視" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="人生" scheme="https://m124578n.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="自我檢視" scheme="https://m124578n.github.io/tags/%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】Django和Flask的練習</title>
    <link href="https://m124578n.github.io/2023-06-14%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/"/>
    <id>https://m124578n.github.io/2023-06-14%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_django%E5%92%8Cflask%E7%9A%84%E7%B7%B4%E7%BF%92/</id>
    <published>2023-06-14T12:00:00.000Z</published>
    <updated>2023-12-15T08:44:52.823Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-06-14django_flask_practice/Django-vs-Flask-1.jpg"><br><em>image <a href="https://www.turing.com/blog/django-vs-flask-which-framework-to-choose/">django-vs-flask-which-framework-to-choose</a></em></p><p>最近在練習 <a href="https://www.djangoproject.com/">Django</a> 和 <a href="https://flask.palletsprojects.com/en/latest/">Flask</a> 的restful相關套件實作方法，來對比一下兩者使用的相關套件等。</p><h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>django要實作restful API有超集的套件是 <a href="https://www.django-rest-framework.org/">django rest framework</a> 跟著官方的tutorial下去實作能大概理解如何快速使用該框架，練習使用到的相關套件：</p><ul><li><a href="https://www.django-rest-framework.org/">django-rest-framework</a>：restful的框架包含serializer序列化器</li><li><a href="https://drf-spectacular.readthedocs.io/en/latest/">drf-spectacular</a>：swagger相關套件</li><li><a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/">django-rest-framework-simplejwt</a>：JWT套件</li></ul><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>flask則是要自己一個一個疊樂高、拼拼圖的那種感覺，各式各樣的flask-OOO套件互相搭配組合，我自己練習用的大概有：</p><ul><li><a href="https://flask-restful.readthedocs.io/en/latest/">flask-restful</a>：resuful的框架</li><li><a href="https://flask-sqlalchemy.palletsprojects.com/en/latest/">flask-sqlalchemy</a>：ORM</li><li><a href="https://flask-migrate.readthedocs.io/en/latest/">flask-migrate</a>：資料庫版控</li><li><a href="https://flask-marshmallow.readthedocs.io/en/latest/">flask-marshmallow</a>：序列化器</li></ul><h2 id="練習django"><a href="#練習django" class="headerlink" title="練習django"></a>練習django</h2><p>練習django的過程中會發現view的寫法會有以下幾種：</p><ul><li>GenericAPIView</li><li>APIView</li><li>ViewSets</li></ul><p>三者的差異目前還沒有太熟悉，還需要加強研究！<br>這篇文章寫得挺詳細的<br><a href="https://zhuanlan.zhihu.com/p/72527077">https://zhuanlan.zhihu.com/p/72527077</a></p><h3 id="django-rest-framework"><a href="#django-rest-framework" class="headerlink" title="django rest framework"></a>django rest framework</h3><p>而且django rest framework由於都已經幫你把很多地方都封裝起來，要進行客製化會需要花一點時間去看source code，相對來說如果只是一般的CRUD使用ViewSets能節省不少寫code的時間！！</p><hr><h2 id="練習flask"><a href="#練習flask" class="headerlink" title="練習flask"></a>練習flask</h2><p>flask倒是看著官方文件和一些實作範例就能很順利開啟一個專案，只不過過程中會有一點問題，在尚未使用flask-migrate時，資料表model.py在create table的時候網路上的範例會教使用python shell去import model的db在執行db.create_all()這邊會報錯現在寫法會要求要使用with app.app.context()才有辦法去執行，這邊還待研究，不過照著官方的文件做就絕對沒問題的！</p><hr><h2 id="做個總結"><a href="#做個總結" class="headerlink" title="做個總結"></a>做個總結</h2><p>目前還需要更深入了解的：</p><ol><li>django 三種view的差異性以及客製化要如何改寫(override function)</li><li>django rest framework中的serializer的實作原理以及如何客製化</li><li>flask 中的專案資料夾層級要怎麼規劃及設計</li><li>flask 尚未完成簡單的CRUD範例</li><li>flask 中app.context是什麼，目前看到很多翻譯寫『應用上下文』？</li></ol><p>在現職中沒有機會碰到這些框架及套件的我，只能下班加緊腳步學習了，增加自己的競爭力，希望下份專案或工作中能活用自己所學的一切！！</p><hr><h1 id="每天進步1-，一年竟能成長37倍！"><a href="#每天進步1-，一年竟能成長37倍！" class="headerlink" title="每天進步1%，一年竟能成長37倍！"></a><a href="https://www.storm.mg/lifestyle/3360705?page=1">每天進步1%，一年竟能成長37倍！</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-06-14django_flask_practice/Django-vs-Flask-1.jpg&quot;&gt;&lt;br&gt;&lt;em&gt;image &lt;a href=&quot;https://www.turing.com/blog/django-v</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="flask" scheme="https://m124578n.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】Python Magic Method 02：__repr__、__str__、__format__、__bytes__</title>
    <link href="https://m124578n.github.io/2023-05-21%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part2/"/>
    <id>https://m124578n.github.io/2023-05-21%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part2/</id>
    <published>2023-05-21T12:00:00.000Z</published>
    <updated>2023-12-15T06:26:48.120Z</updated>
    
    <content type="html"><![CDATA[<p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>藉由學習Magic Method能深度的了解Python，也讓我在寫code的時候能有不同的想法和選擇最近在水球軟體學院之軟體設計精通之旅上的一個作業『大老二』中就有部分使用Magic Method讓我的code寫起來舒適許多，課程相關的體驗和想法有機會再來寫篇文章。那我們就進入主題吧！</p><hr><h3 id="object-repr-self"><a href="#object-repr-self" class="headerlink" title="object.__repr__(self)"></a>object.__repr__(self)</h3><ul><li>representation</li><li>Called by the repr() built-in function to compute the “official” string representation of an object.</li></ul><h3 id="object-str-self"><a href="#object-str-self" class="headerlink" title="object.__str__(self)"></a>object.__str__(self)</h3><ul><li>string</li><li>Called by str(object) and the built-in functions format() and print() to compute the “informal” or nicely printable string representation of an object.</li></ul><p>以上兩個就一起講，他們兩個非常地相似，看官方文件重點捕捉__repr__被標註為正式，而__str__被標註為非正式，至於什麼是正式與非正式呢，有在部分文章中看到__repr__是寫給機器看而__str__是寫給人看這樣的說法。</p><ul><li>__repr__呼叫方式repr()或直接輸入該物件</li><li>__str__呼叫方式有print() format() str()</li><li>參考文章：<a href="https://ithelp.ithome.com.tw/articles/10194593">https://ithelp.ithome.com.tw/articles/10194593</a></li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name:<span class="hljs-subst">&#123;self.name&#125;</span>, age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，年齡：<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 而當直接在console中輸入p</span><span class="hljs-comment"># 會跳出：姓名：John，年齡：25</span></code></pre><ul><li>如今天只有使用 __str__，則repr()會顯示該物件的記憶體位置。<br>當今天只有使用 __repr__，則呼叫 __str__ 也會顯示 __repr__ 內容。<br>以下範例：</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name:<span class="hljs-subst">&#123;self.name&#125;</span>, age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># Name:John, age:25</span><span class="hljs-comment"># &lt;__main__.Person object at 0x100e91fd0&gt;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，年齡：<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(p)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))<span class="hljs-comment"># output:</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 姓名：John，年齡：25</span><span class="hljs-comment"># 姓名：John，年齡：25</span></code></pre><hr><h3 id="object-format-self-format-spec"><a href="#object-format-self-format-spec" class="headerlink" title="object.__format__(self, format_spec)"></a>object.__format__(self, format_spec)</h3><ul><li>Called by the format() built-in function, and by extension, evaluation of formatted string literals and the str.format() method, to produce a “formatted” string representation of an object.</li><li>__format__呼叫用format()，可以客製化format後回傳的值</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicFormat</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__format__</span>(<span class="hljs-params">self, format_spec</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;我的名字是：<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>f = MagicFormat(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My name is :<span class="hljs-subst">&#123;f.name&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(f))<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;f&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s&quot;</span> % f)<span class="hljs-comment"># output</span><span class="hljs-comment"># My name is :John  這個單純只是摳該物件的屬性</span><span class="hljs-comment"># 我的名字是：John</span><span class="hljs-comment"># 我的名字是：John</span><span class="hljs-comment"># &lt;__main__.MagicFormat object at 0x100a79fd0&gt;</span></code></pre><ul><li><p>最後一個之所以沒有辦法套用format是因為%s表示string而我上面的class並沒有定義__str__或__repr__所以印出來的會是他的記憶體位置。</p></li><li><p>下面會是比較特殊的用法，看了看覺得滿有趣的。</p></li><li><p>參考文章<a href="https://www.ctyun.cn/zhishi/p-172413">https://www.ctyun.cn/zhishi/p-172413</a></p></li></ul><pre><code class="hljs python">data_dict = &#123;    <span class="hljs-string">&#x27;ymd&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.year&#125;:&#123;0.month&#125;:&#123;0.day&#125;&#x27;</span>,    <span class="hljs-string">&#x27;dmy&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.day&#125;/&#123;0.month&#125;/&#123;0.year&#125;&#x27;</span>,    <span class="hljs-string">&#x27;mdy&#x27;</span>: <span class="hljs-string">&#x27;&#123;0.month&#125;-&#123;0.day&#125;-&#123;0.year&#125;&#x27;</span>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyText</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, year, month, day</span>):        self.year = year        self.month = month        self.day = day    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__format__</span>(<span class="hljs-params">self, format_spec</span>):        fmt = data_dict[format_spec]        <span class="hljs-keyword">return</span> fmt.<span class="hljs-built_in">format</span>(self)d1 = MyText(<span class="hljs-number">2019</span>, <span class="hljs-number">9</span>, <span class="hljs-number">17</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:ymd&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:dmy&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:mdy&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d1))<span class="hljs-comment"># output</span><span class="hljs-comment"># 2019:9:17</span><span class="hljs-comment"># 17/9/2019</span><span class="hljs-comment"># 9-17-2019</span></code></pre><ul><li><p>而這邊為什麼要寫0呢，我花了一點時間去理解到底為什麼是0，找到了這篇文章，文章裡面有表示format(index0, index1)而我return fmt.format(self)只有一個參數，所以會去讀到第一個值類似[0]。</p></li><li><p>參考文章：<a href="https://bobbyhadz.com/blog/python-indexerror-replacement-index-1-out-of-range">https://bobbyhadz.com/blog/python-indexerror-replacement-index-1-out-of-range</a></p></li></ul><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;&#125;</span> <span class="hljs-subst">&#123;&#125;</span>&quot;</span>.<span class="hljs-built_in">format</span>(index0, index1)) <span class="hljs-comment"># 字串那邊的&#123;&#125;會根據索引對應到後面format()定義的參數</span></code></pre><ul><li>而format其實還有很多特殊的功能，之後有機會在寫篇文章吧～</li></ul><hr><h3 id="object-bytes-self"><a href="#object-bytes-self" class="headerlink" title="object.__bytes__(self)"></a>object.__bytes__(self)</h3><ul><li>Called by bytes to compute a byte-string representation of an object. This should return a bytes object.</li><li>簡單的一句話，呼叫用bytes()，__bytes__必須回傳bytes物件</li><li>實際使用情境目前還沒有想法</li></ul><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):        self.name = name        self.age = age    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bytes__</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;here is bytes&#x27;</span>p = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(p))<span class="hljs-comment"># output</span><span class="hljs-comment"># b&#x27;here is bytes&#x27;</span></code></pre><p>目前是真的不清楚什麼時候會使用到他，跟 __del__ 一樣呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。&lt;/p&gt;
&lt;p&gt;藉由學習Magic Method能深度的了解Python，也讓我在寫code的時候能有不同的想法和選擇最近在水球軟體學院之</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="magic method" scheme="https://m124578n.github.io/tags/magic-method/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】Python Magic Method 01：__new__、__init__、__del__。</title>
    <link href="https://m124578n.github.io/2023-05-15%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/"/>
    <id>https://m124578n.github.io/2023-05-15%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98_python_magic_methods_part1/</id>
    <published>2023-05-15T12:00:00.000Z</published>
    <updated>2023-12-15T06:26:31.971Z</updated>
    
    <content type="html"><![CDATA[<hr><p>本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。</p><p>Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭雙底線結尾，我們常見要定義class屬性時使用的__init__也是Magic Method～，然後我會看Python的document然後一個一個去了解Magic Method到底在做什麼以及怎麼使用。</p><hr><h3 id="object-new-cls-…"><a href="#object-new-cls-…" class="headerlink" title="object.__new__(cls[, …])"></a>object.__new__(cls[, …])</h3><ul><li><p>new</p></li><li><p>Called to create a new instance of class cls. __new__() is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument.</p></li><li><p>__new__ 會在__init__ 之前執行， 其主要功能是實例__init__所指定的屬性。 如果__new__沒有return cls 則__new__不會被調用。 <br>以下是範例：</p><pre><code class="hljs python"><span class="hljs-comment"># new會在init前執行</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicNew</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is new&quot;</span>)        instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> instance    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here is init&quot;</span>)        self.name = namec = MagicNew(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># here is new</span><span class="hljs-comment"># here is init</span></code></pre></li><li><p>以下是使用情境為設計模式之單例模式： <br>參考網址：<a href="https://zhuanlan.zhihu.com/p/35943253">https://zhuanlan.zhihu.com/p/35943253</a></p></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 單例模式，該物件存在就不會在new一個新的出來</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:    _instance = <span class="hljs-literal">None</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            cls._instance = <span class="hljs-built_in">object</span>.__new__(cls)        <span class="hljs-keyword">return</span> cls._instances1 = Singleton()s2 = Singleton()<span class="hljs-built_in">print</span>(s1)<span class="hljs-built_in">print</span>(s2)<span class="hljs-comment"># output:</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># &lt;__main__.Singleton object at 0x104808d90&gt;</span><span class="hljs-comment"># 注意這邊的記憶體位置 s1 s2 會是同一個物件</span></code></pre><hr><h3 id="object-init-self-…"><a href="#object-init-self-…" class="headerlink" title="object.__init__(self[, …])"></a>object.__init__(self[, …])</h3><ul><li>initialization</li><li>Called after the instance has been created (by __new__()), but before it is returned to the caller. The arguments are those passed to the class constructor expression.</li><li>__new__() to create it, and __init__() to customize it<br>__init__就是大家常見的定義該物件屬性的方式了。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 在new出物件時可以透過init來指定該物件所擁有的屬性</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicInit</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span>, say_something: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;I am default&quot;</span></span>):        self.name = name        self.age = age        self.say_something = say_somethingp1 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>)p2 = MagicInit(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;change the default&quot;</span>)<span class="hljs-built_in">print</span>(p1.name, p1.age, p1.say_something)<span class="hljs-built_in">print</span>(p2.name, p2.age, p2.say_something)<span class="hljs-comment"># output:</span><span class="hljs-comment"># John 25 I am default</span><span class="hljs-comment"># John 25 change the default</span></code></pre><ul><li>不過據我所知好像有滿多奇妙的操作可以在 __init__ 完成，畢竟new出一個物件的時候執行完 __new__ 就會執行 __init__，根據不同的使用情境或許能有不同的操作物件。（待學習….）</li></ul><hr><h3 id="object-del-self"><a href="#object-del-self" class="headerlink" title="object.__del__(self)"></a>object.__del__(self)</h3><ul><li>Called when the instance is about to be destroyed.</li><li>__del__當該物件被消除時會call到這個magic method </li><li>根據官方文件表示：<ul><li>del x doesn’t directly call x.__del__() - the former decrements the reference count for x by one, and the latter is only called when x’s reference count reaches zero.</li><li>del &lt;物件&gt;時並不會直接去call __del__()而會先去扣他所關聯的計算，而物件的new出來初始reference count值為1，隨著使用(指定變數為該物件時)會+1，而del &lt;物件&gt;時該數會-1，直到該物件的reference count為0時才會去call __del__()。 （下面使用sys.getrefcount(&lt;物件&gt;)也算使用唷）<br>參考文章：<a href="https://www.796t.com/content/1542840125.html">https://www.796t.com/content/1542840125.html</a></li></ul></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-keyword">del</span> p<span class="hljs-built_in">print</span>(p)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 刪除了</span><span class="hljs-comment"># Traceback (most recent call last):</span><span class="hljs-comment"># NameError: name &#x27;p&#x27; is not defined</span></code></pre><ul><li>一開始先new出一個物件出來後直接 del &lt;物件&gt;該物件就不會存在程式所以就會觸發__del__()。</li></ul><pre><code class="hljs python"><span class="hljs-comment"># 當今天使用該物件不只一次時</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">class</span> <span class="hljs-title class_">MagicDel</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):        self.name = name    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;刪除了&quot;</span>)<span class="hljs-comment"># sys.getrefcount() 可以取得reference count</span>p = MagicDel(<span class="hljs-string">&quot;John&quot;</span>)<span class="hljs-built_in">print</span>(sys.getrefcount(p))p1 = p<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-keyword">del</span> p1<span class="hljs-built_in">print</span>(sys.getrefcount(p))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待兩秒鐘&quot;</span>)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 3</span><span class="hljs-comment"># 2</span><span class="hljs-comment"># 等待兩秒鐘後</span><span class="hljs-comment"># 刪除了</span></code></pre><ul><li>而當今天讓多個物件去使用這個class則會顯示如上圖，而在整個程式結束後才會觸發 __del__()。<br>目前還不清楚什麼情況下會有機會去使用。（待學習….）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;本系列會著重在紀錄學習Python的筆記，如果有任何問題或是錯誤的地方，可以直接留言或私訊我，自學錯誤很難看到問題點，還請各位多多指教。&lt;/p&gt;
&lt;p&gt;Python Magic Method 直接翻譯就叫”魔法方法 or 魔術方法”，這個神奇的方法也就是雙底線開頭</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
    <category term="magic method" scheme="https://m124578n.github.io/tags/magic-method/"/>
    
  </entry>
  
  <entry>
    <title>【抱怨】並不能解決問題！！</title>
    <link href="https://m124578n.github.io/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/</id>
    <published>2023-05-05T12:00:00.000Z</published>
    <updated>2023-12-15T08:45:39.664Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/0_MCz9mw3Nb8072FP9.webp"><br><em>image <a href="https://www.businessweekly.com.tw/careers/blog/23638">source</a></em></p><p>大家是否對生活中有許多不滿，或是很常聽到同事朋友在抱怨什麼什麼事情而當下覺得別在抱怨了聽了都煩了，但自己碰到同樣的狀況時，也會不會不小心成為了一個愛抱怨的人呢？</p><p>最近在水球軟體學院看到大家討論主管職，也在網路上看到一些文章，再結合自己實際遇到的情況，想要好好的整理整理並找出一個我認為相對合宜的作法～</p><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>我先來稍微講講我在工作中遇到的問題。<br>我目前在一家ＯＯ公司就職，而這是我第一份的軟體工作，我很感謝主管給我機會讓沒有經驗的我加入公司並學習軟體的基本知識，而我進來公司幾個禮拜後發現，這邊的資訊部有著非常獨特的分工及步驟，大家都是各自開發自己負責的系統，並在有需要資訊交流的時候在撰寫API供同事使用，我也沒有多想畢竟是第一份，所以很快就接受了這樣的模式。</p><p>直到最近慢慢接觸不同的工程師也聽到不同的工作環境又看了很多不同的文章分享軟體工程的知識，而我很快就進入了『<strong>比較</strong>』這個過程，再加上公司專案的一些狀況，然後就開始有些不滿及抱怨。</p><p>比較是正常的，人都會想要成長想要到自己理想的地方，但比較也有分健康跟不健康的之後再討論。</p><p>而不滿及抱怨也都是很正常的事，世界上只有極少數的東西是完美的，而大部分事情是為追求完美而妥協。</p><p>所以最近我開始反思自己：</p><ul><li>是不是抱怨過頭了？</li><li>是不是對主管有了一些不好的偏見？</li><li>是不是對太過於自我為中心了？</li><li>是不是自己的行為舉止已經影響到了同事或朋友？</li><li>是不是自己不適合這裡？</li><li>是不是自己能力不夠？</li><li>是不是一直重複的以上壞的迴圈而break不出來？</li></ul><p>這些是我對我自己的反省，以及我應該要怎麼樣調整自己的心態，引導自己break壞的迴圈導入好的迴圈呢？</p><h2 id="水球軟體學院和一些文章"><a href="#水球軟體學院和一些文章" class="headerlink" title="水球軟體學院和一些文章"></a>水球軟體學院和一些文章</h2><p>在這邊看到大家在討論主管這件事也自己看了一些文章做的心得，千萬不要對主管抱持著這兩種狀態：</p><p>一. 把主管當作神</p><pre><code>當作是神無腦的跟著主管，這或許是不錯的主意，但這樣自己真的會進步嗎？更何況主管也是人，也不一定每次都是對的，而無腦跟著主管而不疑，最終造成專案進步延遲又或是直接收掉還是自己被懷疑能力，到最後都不是一個好結果。</code></pre><p>二、把主管當作鬼</p><pre><code>當作是鬼，見到主管就覺得恐怖，不想面對不想溝通不想聽到主管任何的要求，那不是請主管離職就是自己離職，想也知道是後者，最後損失最大的也是自己，而也留下了一個社會／企業對自己不好的印象，沒人可以保證在這邊發生這樣的事情不會影響到自己後來的職涯發展。</code></pre><p>我們再回頭想想，主管既然能有這個職位，那必然有他的能力（不管哪方面），那身為底下的員工是不是也該給一定的尊重呢（前提是主管有尊重你），<strong>尊重和溝通</strong>會是好的迴圈之起點。</p><h2 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h2><p>這邊我把自己的心態調整成這樣：</p><ol><li>先嘗試跟主管溝通看看到底哪裡出了問題</li><li>主管改變不了或拒絕溝通那只好改變自己，讓自己在工作時舒服一點</li><li>盡可能的反思自己的言行舉止，不要有太多負面情緒</li><li>主管沒有盡責那不是我們能控制的，至少我們控制自己做個好下屬／員工</li><li>討論事情千萬不要帶任何情緒，盡可能客觀，收起一切偏見，做到論事別論人</li><li>工作就是要開心，積極正面的態度也能影響到周圍的人</li><li>環境不好真的嘗試了也改變不了，那何不試試改變自己</li><li>以上真的沒辦法達成，那就再回來反省調整，讓自己變成更好的人</li></ol><p>目前我在工作的心態上希望能調整成這樣的狀態，或許會有人說改變不了自己就改變環境／公司，但<strong>我覺得心態對了到哪都不是問題，心態錯了到哪都還是會產生問題</strong>。</p><p>而本文的最後在回顧到主題，<strong>抱怨</strong>其實是可以的，適當的抒發情緒會使心靈更加健康，但抱怨不能解決問題，抱怨完後還是要對現況的問題點進行分析，找出可以改善的地方進行調整，至少下次遇到同樣的情境狀況時，自己也能有更多的選項避免掉最不開心的結尾。</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><h3 id="五分鐘的抱怨"><a href="#五分鐘的抱怨" class="headerlink" title="五分鐘的抱怨"></a>五分鐘的抱怨</h3><p><img src="/blog/images/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%BC%81%EF%BC%81/0_tE6BzOdq9DILj38g.webp"><br><em>image <a href="https://www.freepik.com/vectors/five-minutes">source</a></em></p><p>當遇到不滿的事情是，抱怨是不能解決問題的，五分鐘抱怨後收起自己的情緒，反思反省自己在這件事當中學習到什麼，而下次遇到類似的問題又能怎麼改進，而成為更好的人，讓自己的邁向正的循環。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-05-05%E3%80%90%E6%8A%B1%E6%80%A8%E3%80%91%E4%B8%A6%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%B1%BA%E5%95%8F%E9%A1%8C%EF%B</summary>
      
    
    
    
    <category term="生活" scheme="https://m124578n.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="life" scheme="https://m124578n.github.io/tags/life/"/>
    
    <category term="人生" scheme="https://m124578n.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Django網頁開發設計，新進展！</title>
    <link href="https://m124578n.github.io/2023-04-23Django%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC%E8%A8%AD%E8%A8%88%EF%BC%8C%E6%96%B0%E9%80%B2%E5%B1%95%EF%BC%81/"/>
    <id>https://m124578n.github.io/2023-04-23Django%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC%E8%A8%AD%E8%A8%88%EF%BC%8C%E6%96%B0%E9%80%B2%E5%B1%95%EF%BC%81/</id>
    <published>2023-04-23T12:00:00.000Z</published>
    <updated>2023-12-19T01:39:15.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-04-23Django%E9%96%8B%E7%99%BC%E6%96%B0%E9%80%B2%E5%B1%95/0__po9b2MR2fXklzUT.gif"><br><em>image <a href="https://memes.tw/gif-post?maker=16">memes.tw</a></em></p><p>延續前幾篇的想法下，又多冒出了一些新的點子！<br>而最新的點子好像才有辦法解決掉我一開始的煩惱。</p><hr><p>一開始的目標是我要我的view是乾淨的、舒服的，於是我把一些相關的判斷或對資料庫的處理額外拉了類別出來，就前幾篇來說會是Member類別有login這個方法，然而這樣我的view裡面依舊有一些基本的判斷，例如：判斷request的method、拿取前端拋回來的資料⋯⋯依舊會讓我的view乘載過多的資訊，導致頁面一多看起來就亂亂的，於是參考了 <a href="https://discord.com/invite/waterballsa">水球軟體學院</a> 社群夥伴的想法，我終於打造出一版我目前滿意的寫法，大致順序如下：</p><ul><li>把原本view裡面的資訊包成一個Service類別</li><li>在Service類別中處理原來會跟Member類別的行為</li><li>大功告成</li></ul><pre><code class="hljs python"><span class="hljs-comment">#views.py</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> LoginService(request)</code></pre><p>這樣變得非常的乾淨呢！！再來只要把LoginService做好～</p><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginService</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request</span>):    self.request = request  <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;GET&quot;</span>:      ctx = &#123;&#125;      <span class="hljs-keyword">return</span> render(self.request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;POST&quot;</span>:      data = &#123;&#125;      會員帳號 = self.request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      會員密碼 = self.request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      member = 會員()      <span class="hljs-keyword">if</span> member.login(會員帳號, 會員密碼):        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確！！&quot;</span>      <span class="hljs-keyword">else</span>:        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！帳號密碼有誤～&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre><p>完美！！這樣就可以很完美的把我的view變乾淨。</p><hr><p>但今天歹擠謀假甘單（事情沒有那麼簡單），我的網站不只有member這個角色，還有store這個角色呢～照這樣看來我不就又要開一個view又要開一個LoginService呢？？（當然view要開因為不同頁面），於是我突發奇想蹦出了這個作法：</p><p>直接把store類別 &#x2F; 物件直接當作參數丟進去！！</p><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> LoginService(request, Store()).login()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> LoginService(request, Member()).login()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginService</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request, user</span>):    self.request = request    self.user = user    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;GET&quot;</span>:      ctx = &#123;&#125;      <span class="hljs-keyword">return</span> render(self.request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)    <span class="hljs-keyword">if</span> self.request.method == <span class="hljs-string">&quot;POST&quot;</span>:      data = &#123;&#125;      會員帳號 = self.request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      會員密碼 = self.request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)      <span class="hljs-comment">#這裡就直接修改掉！！</span>      <span class="hljs-keyword">if</span> self.user.login(會員帳號, 會員密碼):        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確！！&quot;</span>      <span class="hljs-keyword">else</span>:        data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！帳號密碼有誤～&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre><p>可喜可賀！！這樣我的LoginService就可以同時給member和store使用了，假設未來又多了新的角色我也可以直接使用LoginService（除非他今天登入不用帳號密碼了），於是乎我就這樣開心的繼續寫著程式～～</p><hr><p>心得：很感謝社群的夥伴願意分享想法，不然我自己一個人要想出這些東西可能還要花上好一段時間，我也相信我這個一定不是最佳解答，但至少以現在來說我可以繼續開心的寫程式，而不會有一個疙瘩黏在那邊，如果你有更好的想法也歡迎一起交流交流～～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-04-23Django%E9%96%8B%E7%99%BC%E6%96%B0%E9%80%B2%E5%B1%95/0__po9b2MR2fXklzUT.gif&quot;&gt;&lt;br&gt;&lt;em&gt;image &lt;a href=&quot;https</summary>
      
    
    
    
    <category term="其他" scheme="https://m124578n.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>想法不斷，選擇困難</title>
    <link href="https://m124578n.github.io/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/"/>
    <id>https://m124578n.github.io/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/</id>
    <published>2023-04-13T12:00:00.000Z</published>
    <updated>2023-12-15T08:45:56.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/0__xXSZf9Ve9CJFFkm.webp"><br><em>image <a href="https://www.ttnmedia.com/%E6%8C%89%E4%B8%8B%E6%9A%AB%E5%81%9C%E9%88%95-%E9%96%8B%E5%A7%8B%E6%80%9D%E8%80%83/">source</a></em></p><p>本日開發延續之前的想法，發現越想越多，越想越難下手～這可能也是選擇障礙的一種！</p><hr><p>今天我試著把許多地方改變了許多，來看看before after吧。</p><h2 id="原本的做法"><a href="#原本的做法" class="headerlink" title="原本的做法"></a>原本的做法</h2><ul><li>目前會員登入的流程都是在view裡面，包括檢查是否已經是會員，檢查密碼是不是正確的，再送Json給前端看這個人到底有沒有登入成功。寫起來大概會長這樣。<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">會員登入頁面</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:    ctx = &#123;&#125;    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:    data = &#123;&#125;    會員帳號 = request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    會員密碼 = request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    會員_query_set = 會員資料表.objects.<span class="hljs-built_in">filter</span>(會員帳號欄位=會員帳號)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>(會員_query_set) == []:      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！你還沒有註冊！&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)    <span class="hljs-keyword">if</span> check_password(會員_query_set.會員密碼, 會員密碼):      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確通過&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)    <span class="hljs-keyword">else</span>:      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！密碼錯誤&quot;</span>      <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre>現在看可能有些人已經受不了了，什麼哩哩叩叩的東西都摻雜在一起！？</li></ul><h2 id="改版後的做法"><a href="#改版後的做法" class="headerlink" title="改版後的做法"></a>改版後的做法</h2><ul><li>改版後大概會像是把所有東西都打包起來，把view清乾淨。</li></ul><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">會員登入頁面</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:    ctx = &#123;&#125;    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;會員登入.html&quot;</span>, ctx)  <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:    data = &#123;&#125;    會員帳號 = request.POST.get(<span class="hljs-string">&quot;會員帳號&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    會員密碼 = request.POST.get(<span class="hljs-string">&quot;會員密碼&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    member = 會員()    <span class="hljs-keyword">if</span> member.login(會員帳號, 會員密碼):      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;密碼正確！！&quot;</span>    <span class="hljs-keyword">else</span>:      data[<span class="hljs-string">&#x27;message&#x27;</span>] = <span class="hljs-string">&quot;噗噗！！帳號密碼有誤～&quot;</span>    <span class="hljs-keyword">return</span> JsonResponse(data)</code></pre><p>這樣子感覺起來好像好一點了，至少變的比較好讀了。</p><hr><p>於是呢，我就改改改，之前幾乎都沒有包成物件的地方都調整了許多，也盡量找出符合他們的method，類似：member.login(), member.register(), member.create_case()等等等…..，盡量找出是屬於這個物件的行為，也剛好之前有試著做OOA，所以大部分都只是抓漏，把以前程式碼符合行為的地方抓出來包，包著包著view就越來越輕便了，可喜可賀，可口可樂。</p><p>不過，後面又有衍生的問題產生了，我每一個物件的方法隨著我抓漏的過程中越來越多，然而我目前也都沒有使用到繼承也還沒有感覺到可以使用的點，讓我有點不明白這樣的方面究竟是對的還是錯的呢？？</p><p>最後希望明天的我可以幫現在的我解決這些問題！！</p><hr><p>其實還有一個地方也滿讓我兩難的，就是member.login()這個做法是好的嗎？還是其實會需要有一個Service物件來讓member可以登入呢？</p><p>問了ChatGPT給我的回應是(由於那個對話被我刪掉了只能憑印象)：</p><h2 id="以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。"><a href="#以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。" class="headerlink" title="以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。"></a>以上兩個做法都是很好的開發方式，可以根據你的情境或需求做選擇。</h2><p>但我還是懷疑了他，真的是這樣嗎！？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-04-13%E6%83%B3%E6%B3%95%E4%B8%8D%E6%96%B7_%E9%81%B8%E6%93%87%E5%9B%B0%E9%9B%A3/0__xXSZf9Ve9CJFFkm.webp&quot;&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="其他" scheme="https://m124578n.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
    <category term="python" scheme="https://m124578n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初探店家會員網站設計</title>
    <link href="https://m124578n.github.io/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/"/>
    <id>https://m124578n.github.io/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/</id>
    <published>2023-04-12T12:00:00.000Z</published>
    <updated>2023-12-15T08:46:03.035Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/0_E4O1EYZpyOn2aYbt.jpg"><br><em>image <a href="https://unsplash.com/photos/gray-and-blue-open-signage-c9FQyqIECds">unsplash</a></em></p><p>大家好我是小智，我是一個轉職者，目前剛轉職差不多半年多一點，這篇主要是拿來紀錄我最近在開發上的疑問和設計中的疑問，希望未來的我可以來幫我解答！！</p><hr><h3 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h3><p>目前我正在開發一個購物網站，有會員也有店家，以下是我的順序。</p><ol><li>我先設計了資料庫的table，我的資料庫會員跟店家的表格是完全分開的。</li><li>我建立了Django專案初始化，並把前面的table加入到Django的model中。</li><li>我就直接使用Django的MTV開發，所有的邏輯都集中在app的view裡面，然後就這樣開發到了最近。</li></ol><hr><h3 id="先整理"><a href="#先整理" class="headerlink" title="先整理"></a>先整理</h3><p>最近一直很煩躁，我的view越來越龐大，每當有需求變動時要改一個地方就要花很多時間找在哪裡，搞的我非常痛苦，就在此時，我決定我要整理我的程式碼！！以下是我的順序。</p><ol><li>首先我先試著對我的網站做OOA把所有物件之間的關係畫出來，同時梳理現在對網站的需求。</li><li>把上面所有物件都先開立出來，並試著更動現有的程式碼。</li><li>然後把view裡面所有的網頁(function)拆開，目前是有分步驟和分頁面。</li></ol><hr><h3 id="第二次整理"><a href="#第二次整理" class="headerlink" title="第二次整理"></a>第二次整理</h3><p>然後我又想到我的view裡面也摻雜了一堆的DjangoORM我就想著我能不能也把他們拆出來，於是又出來了另一個版本。</p><ol><li>我把view中的ORM全都拆掉，並建立專屬ORM的物件群。</li><li>然後把剛剛OOA所建立的物件中列幾個方法，有讀取資料庫時(通常是New的時候)就透過ORM物件去讀取資料庫並拋回view。</li></ol><hr><h3 id="最後總結"><a href="#最後總結" class="headerlink" title="最後總結"></a>最後總結</h3><p>完成這版後，基本上我的程式已經拆的很細了，流程大概會變成這樣，以一個店家要登入為例。</p><ol><li>店家到我的網站登入頁面打完帳密案下登入ajax POST。</li><li>這個request會打到我的server。</li><li>server中間nginx略過。</li><li>來到Django裡面之後根據路由由urls.py去分配。</li><li>urls.py分配到指定的view.py。</li><li>view.py裡面有個login的function他在流到POST method。</li><li>到POST method後會先去讀取Store(id)物件。</li><li>Store(id)會去讀取StoreORM(id&#x3D;id)會確認存不存在。</li><li>存在之後再比對密碼的正確性。</li><li>之後回傳結果Json在丟給前端ajax處理。</li></ol><hr><p>目前改成這樣是有比較開心了，不過還是有一些些的違和感，感覺好像還是有一些地方有問題，想了想覺得就先這樣吧，之後如果違和感大到忍受不住再來跑一次上述的流程或是查一些資料看看有沒有辦法優化吧～～</p><h2 id="結論就是：交給未來的我"><a href="#結論就是：交給未來的我" class="headerlink" title="結論就是：交給未來的我"></a>結論就是：交給未來的我</h2><p>最後寫完的心得：大概就是好像還是需要圖片支援，純文字的話感覺有點乏味，等有空的時候再來補吧～～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-04-12%E5%88%9D%E6%8E%A2%E5%BA%97%E5%AE%B6%E6%9C%83%E5%93%A1%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/0_E4O1EYZpyOn</summary>
      
    
    
    
    <category term="其他" scheme="https://m124578n.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="django" scheme="https://m124578n.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Git CICD with Docker</title>
    <link href="https://m124578n.github.io/2023-03-18Git_CICD_with_Docker/"/>
    <id>https://m124578n.github.io/2023-03-18Git_CICD_with_Docker/</id>
    <published>2023-03-18T12:00:00.000Z</published>
    <updated>2023-12-15T08:46:17.962Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_bZP17SmwRZihfAYDr5KBFg.webp"><br><em>image <a href="https://1000logos.net/docker-logo/">docker-logo</a></em></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>這個主題是在水球軟體學院中舉辦的Docker共學會最終回的成果發表文章，本人我也是第一次寫文章，主要目的應該會著重在自己的一個紀錄，內容如果不是那麼正確還請多多包容和指點以下正篇。</p><hr><h1 id="正篇："><a href="#正篇：" class="headerlink" title="正篇："></a>正篇：</h1><p>Docker是一個容器化服務，他可以在一台電腦中切出好幾個環境分別執行不同的任務。</p><p>這邊會進行一個簡單的web server然後執行Github actions 或 Gitlab CICD達成自動化測試以及自動化部署。</p><p>稍後將會介紹到的項目有以下幾樣：</p><ul><li><p>Dockerfile</p></li><li><p>docker-compose.yml</p></li><li><p>github&#x2F;workflows 中的yml檔</p></li></ul><hr><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>最基本的要架設一個網站會需要的服務為web server和database。</p><p>那們我將會以Python Django串接Nginx做為web server那database是使用Django預設的sqlite簡單演示。</p><h3 id="資料夾階層會長這樣"><a href="#資料夾階層會長這樣" class="headerlink" title="資料夾階層會長這樣"></a>資料夾階層會長這樣</h3><pre><code class="hljs bash">+根目錄|+-+nginx/|      ||      +--Dockerfile|      +--docker-nginx-web.conf|      +--nginx.conf+-+web/|     ||     +--Dockerfile|     +--requirements.txt|     +-+app/以下略|+--docker-compose.yml</code></pre><h3 id="這是Django也就是web裡面的Dockerfile"><a href="#這是Django也就是web裡面的Dockerfile" class="headerlink" title="這是Django也就是web裡面的Dockerfile"></a>這是Django也就是web裡面的Dockerfile</h3><pre><code class="hljs bash">FROM python:3.8.5LABEL maintainer=<span class="hljs-string">&quot;xxxx@gmail.com&quot;</span>WORKDIR /webCOPY . /web/RUN pip install --upgrade pip RUN pip install -r requirements.txtWORKDIR /web/appVOLUME /webEXPOSE 8001</code></pre><h3 id="再來是nginx裡面的Dockerfile"><a href="#再來是nginx裡面的Dockerfile" class="headerlink" title="再來是nginx裡面的Dockerfile"></a>再來是nginx裡面的Dockerfile</h3><pre><code class="hljs bash">FROM nginx:latestLABEL maintainer=<span class="hljs-string">&quot;xxxx@gmail.com&quot;</span>COPY nginx.conf /etc/nginx/nginx.confCOPY docker-nginx-web.conf /etc/nginx/sites-available/RUN <span class="hljs-built_in">mkdir</span> -p /etc/nginx/sites-enabled/ &amp;&amp; \    <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/docker-nginx-web.conf /etc/nginx/sites-enabled/CMD [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</code></pre><h3 id="然後是根目錄下的docker-compose-yml"><a href="#然後是根目錄下的docker-compose-yml" class="headerlink" title="然後是根目錄下的docker-compose.yml"></a>然後是根目錄下的docker-compose.yml</h3><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3.8&#x27;</span>services:        app_web:                build: ./web                container_name: app_web                restart: always                <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;uwsgi --ini uwsgi.ini&quot;</span>]                volumes:                        - web_data:/web/app                ports:                        - <span class="hljs-string">&quot;8001:8001&quot;</span>                environment:                        - PYTHONUNBUFFERED=TURE        app_nginx:                build: ./nginx                container_name: app_nginx                restart: always                volumes:                        - web_data:/web/app                ports:                        - <span class="hljs-string">&quot;80:80&quot;</span>                depends_on:                        - app_webvolumes:        web_data:</code></pre><p>那我們這邊docker-compose.yml裡面的build會去找尋web和nginx目錄下的Dockerfile並根據Dockerfile的內容去啟動container。</p><p>這邊下指令</p><pre><code class="hljs bash">docker-compose up --build -d</code></pre><p>其實就會直接把兩個container建立起來了。</p><hr><h2 id="Github-actions"><a href="#Github-actions" class="headerlink" title="Github actions"></a>Github actions</h2><p>然後就可以開始寫Github actions的yml檔囉！</p><h3 id="我們到Github的頁面點選Actions"><a href="#我們到Github的頁面點選Actions" class="headerlink" title="我們到Github的頁面點選Actions"></a>我們到Github的頁面點選Actions</h3><p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_NEBsJwswssn2VffDuNyVSg.webp"></p><h3 id="點選下方的Configure就會先幫你建立一個預設的yml"><a href="#點選下方的Configure就會先幫你建立一個預設的yml" class="headerlink" title="點選下方的Configure就會先幫你建立一個預設的yml"></a>點選下方的Configure就會先幫你建立一個預設的yml</h3><p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_eT-ez4_d77qUFV54NycBig.webp"></p><p>這邊就可以開始編輯自己的yml檔，但是Github上也有很多已經編輯好的yml檔會出現在Configure下方可以選用。</p><p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_Zk9WR4svGoxlIuGd59R8gw.webp"></p><p>那這邊我就先用預設的yml來編輯</p><p>那預設的yml呢它上面會有很詳細的註解說明每一個指令的功用，這邊只截取我需要的部分把它改寫成這樣</p><pre><code class="hljs bash">name: Django CIon:  push:    branches: [ <span class="hljs-string">&quot;main&quot;</span> ]  pull_request:    branches: [ <span class="hljs-string">&quot;main&quot;</span> ]<span class="hljs-built_in">jobs</span>:  build:    runs-on: ubuntu-latest    strategy:      max-parallel: 4      matrix:        python-version: [3.8]    steps:    - uses: actions/checkout@v3    - name: Set up Python <span class="hljs-variable">$&#123;&#123; matrix.python-version &#125;</span>&#125;      uses: actions/setup-python@v3      with:        python-version: <span class="hljs-variable">$&#123;&#123; matrix.python-version &#125;</span>&#125;    - name: Install Dependencies      run: |        python -m pip install --upgrade pip        pip install -r web/requirements.txt    - name: Run Tests      run: |        python  web/app/manage.py <span class="hljs-built_in">test</span></code></pre><p>這邊是當你對這個repositories有push或是pull_request的時候就會觸發job的程序，上面那邊有$NaN是我們可以對他執行多個版本的測試，這邊我只有跑一個python 3.8，那我們看到最後一行，這個就只是在跑Django的測試內容。</p><h3 id="接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分"><a href="#接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分" class="headerlink" title="接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分"></a>接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分</h3><pre><code class="hljs bash">name: Django CD<span class="hljs-comment"># 只有在 CI 的 workflow 完成時才會執行此 workflow</span><span class="hljs-comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run</span>on:  workflow_run:    workflows: [ Django CI ]    types:      - completed<span class="hljs-built_in">jobs</span>:  deploy:    runs-on: ubuntu-latest    <span class="hljs-comment"># 注意前面 workflow_run 的 completed 意思是「完成」，不論執行結果成功或是失敗都算是「完成」</span>    <span class="hljs-comment"># 但是一般來說測試如果失敗就應該暫停部屬至正式環境</span>    <span class="hljs-comment"># 因此這裡加上一個 if 判斷，只有 CI 成功才會執行此 workflow</span>    <span class="hljs-comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run</span>    <span class="hljs-keyword">if</span>: <span class="hljs-variable">$&#123;&#123; github.event.workflow_run.conclusion == &#x27;success&#x27; &#125;</span>&#125;        steps:      <span class="hljs-comment"># 使用 appleboy/ssh-action@master 這個 action 遠端連線至正式環境</span>      <span class="hljs-comment"># https://github.com/appleboy/ssh-action</span>      - name: Deployment        uses: appleboy/ssh-action@master        with:          host: <span class="hljs-variable">$&#123;&#123; secrets.HOST &#125;</span>&#125;          key: <span class="hljs-variable">$&#123;&#123; secrets.TOKEN &#125;</span>&#125;          username: ec2-user          <span class="hljs-comment"># 執行部屬的指令</span>          <span class="hljs-comment">#docker rmi -f $(docker images -q  -f dangling=true)</span>          <span class="hljs-comment">#docker volume rm $(docker volume ls -q -f dangling=true)</span>          script: |             <span class="hljs-built_in">whoami</span>                    sudo yum -y install docker            sudo yum -y install git             sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(<span class="hljs-built_in">uname</span> -s)-$(<span class="hljs-built_in">uname</span> -m) -o /usr/local/bin/docker-compose            sudo <span class="hljs-built_in">chmod</span> 777 /usr/local/bin/docker-compose            docker-compose version            <span class="hljs-built_in">cd</span> ~            sudo <span class="hljs-built_in">rm</span> -fr *            sudo git <span class="hljs-built_in">clone</span> https://github.com/xxx/testCICD.git            <span class="hljs-built_in">cd</span> testCICD            sudo systemctl restart docker            sudo <span class="hljs-built_in">chmod</span> 777 /var/run/docker.sock            docker-compose down            docker rmi -f $(docker images -q  -f dangling=<span class="hljs-literal">true</span>)            docker volume <span class="hljs-built_in">rm</span> $(docker volume <span class="hljs-built_in">ls</span> -q -f dangling=<span class="hljs-literal">true</span>)            docker-compose up --build -d</code></pre><p>這邊我是參考了appleboy的ssh-action，這樣就可以透過ssh的方式連接到你的機器裡做上面所寫好的script了，那上面有兩個地方應該會有問題就是host跟key那兩個變數的新增位置在Settings</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_8Wz_y3La0uRxRcdfkytSvA.webp"></p><h3 id="Secrets-and-variables"><a href="#Secrets-and-variables" class="headerlink" title="Secrets and variables"></a>Secrets and variables</h3><p>裡面的Security點開Secrets and variables中的Actions</p><p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_PC6h-Bnv3I5Ow5j0U4NbRQ.webp"></p><p>你會看到</p><p><img src="/blog/images/2023-03-18Git_CICD_with_Docker/1_y0993aLDo40RPOChDZMQkw.webp"></p><p>這邊就可以管理你在Github actions中的任何密鑰以及變數。</p><p>這邊這個CICD最終會部署到我在AWS EC2中架設的一個小機器裡面，裡頭還有很多細節也有很多我還沒搞清楚的地方，之後有機會在拆分主題來一一探討。</p><hr><p>最後，我是一個轉職的工程師，目前剛轉滿半年多一點，還在努力學習中，如果有任何問題或建議都可以私訊我<a href="mailto:&#109;&#50;&#x33;&#x35;&#x36;&#x38;&#x6e;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#109;&#50;&#x33;&#x35;&#x36;&#x38;&#x6e;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a>，我也常在 <a href="https://discord.gg/waterballsa">水球軟體學院</a> 活動，歡迎大家一起加入這個大社群一起學習一起進步！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/2023-03-18Git_CICD_with_Docker/1_bZP17SmwRZihfAYDr5KBFg.webp&quot;&gt;&lt;br&gt;&lt;em&gt;image &lt;a href=&quot;https://1000logos.net/docker-</summary>
      
    
    
    
    <category term="學習" scheme="https://m124578n.github.io/categories/%E5%AD%B8%E7%BF%92/"/>
    
    
    <category term="github actions" scheme="https://m124578n.github.io/tags/github-actions/"/>
    
    <category term="docker" scheme="https://m124578n.github.io/tags/docker/"/>
    
    <category term="水球軟體學院" scheme="https://m124578n.github.io/tags/%E6%B0%B4%E7%90%83%E8%BB%9F%E9%AB%94%E5%AD%B8%E9%99%A2/"/>
    
  </entry>
  
</feed>
